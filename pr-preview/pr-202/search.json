[
  {
    "objectID": "modules/module5/slides/module5_end.html#module-learning-outcomes",
    "href": "modules/module5/slides/module5_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 5",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nFollow guidelines for best practices in visualization design.\nAdjust axes extents and formatting.\nModify titles of figure elements.\nChoose appropriate color schemes for your data.\nUse pre-made and custom color schemes.\nSelectively highlight and annotate data with color and text.\nDirectly label data instead of using legends.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#repetition-of-hue-lightness-and-saturation",
    "href": "modules/module5/slides/module5_09.html#repetition-of-hue-lightness-and-saturation",
    "title": "Effective use of colour for quantitative data",
    "section": "Repetition of hue, lightness, and saturation",
    "text": "Repetition of hue, lightness, and saturation\n\n\nIn the last slide deck, we varied hues to represent categorical values, with a focus on the distinction between colour hues/categories. When choosing a colour scheme to represent quantitative data, we will instead focus on sequential, perceptually uniform changes in lightness.\nSequential changes in lightness ensures that uniform changes in the values of the data are perceived as uniform changes in the colour space. In other words, we want it to be intuitive how the colours relate to the numerical values they represent, so that we can accurately understand how the data values vary when looking at the changing colours."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#lightness-is-more-effective-than-hue-to-communicate-changes-in-quantitative-data",
    "href": "modules/module5/slides/module5_09.html#lightness-is-more-effective-than-hue-to-communicate-changes-in-quantitative-data",
    "title": "Effective use of colour for quantitative data",
    "section": "Lightness is more effective than hue to communicate changes in quantitative data",
    "text": "Lightness is more effective than hue to communicate changes in quantitative data\n\n\n\nIn the plots on this slide, we have encoded the same variable (Horsepower) to be represented by both the x-axis and the colour. This is rarely done in practice, but it is useful to contrast and understand colour schemes because we know that the colours of the points should change in a perceptually uniform manner as we move from left to right along the x-axis.\nIn the leftmost plot in this slide, we used the default categorical colour scheme. As you can see this is not at all well suited to represent numerical data as the sharp transitions between hues makes it appear as if there are groups in the data, whereas we know that these values are changing gradually from left to right on the x-axis.\nIn the plot to the right, we have used the default sequential colour scheme for quantitative data in Altair. This conveys the gradual change in the Horsepower values in a perceptually uniform manner. We can clearly see that colour is changing gradually from light to dark along the x-axis, although it can be hard to pinpoint exactly which number a particular colour is (remember that colour is not as good as position to convey an exact value even when it is easy to see the overall trend)."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#combining-lightness-variation-with-a-slight-variation-in-hue-highlights-detail-in-the-data",
    "href": "modules/module5/slides/module5_09.html#combining-lightness-variation-with-a-slight-variation-in-hue-highlights-detail-in-the-data",
    "title": "Effective use of colour for quantitative data",
    "section": "Combining lightness variation with a slight variation in hue highlights detail in the data",
    "text": "Combining lightness variation with a slight variation in hue highlights detail in the data\n\n\n\nThe leftmost plot here uses the same default colour scheme as in the previous slide.\nThe plot on the right has a colour scheme that adds a slight variation in hue while keeping the perceptually uniform variation in lightness.\nThe reason for this is to highlight small variations in the data when this is of great importance. We can see the effect of this by studying the values in the 60-80 range in both plots. It is hard to see the differences between these in the leftmost plot, but thanks to the hue transition from yellow to green in the rightmost plot we can more clearly perceive detail in this range.\nAlthough the hue shifts in these plots are more gradual than in the plot with the categorical colour scheme in the previous slide, it may still introduce a slight bias towards seeing groupings where there are none, which is something to keep in mind.\nIn practice, both of these colour schemes are used often to represent quantitative data."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#high-values-should-have-the-most-contrast-to-the-background",
    "href": "modules/module5/slides/module5_09.html#high-values-should-have-the-most-contrast-to-the-background",
    "title": "Effective use of colour for quantitative data",
    "section": "High values should have the most contrast to the background",
    "text": "High values should have the most contrast to the background\n\ncars = data.cars()\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Horsepower', title='Engine power (hp)',\n                    scale=alt.Scale(scheme='viridis', reverse=True)))\n\n\n\n\n\n\n\n\nTo decide whether the highest or lowest values should be at the lightest or darkest end of a sequential colour scheme, it is advisable to set it so that the most important values has the most contrast to the background.\nOften there is no difference in importance between high and low values; then the convention is to set the highest values to have the most contrast with the background, which is the case for most Altair colour schemes by default.\nHowever, for the “viridis” colour scheme that we are using here, goes from dark to light by default so we need to pass reverse=True to alt.Scale (this technique could be used to reverse any scale in Altair, including the value along one of the axes).\nThe Viridis colour scheme was designed by the developers of matplotlib (another Python plotting package). In addition to the colour schemes linked in the previous slide deck, more details and examples are available in the matplotlib documentation, and many of the core design principles are outlined in this entertaining talk, including the design choice behind Viridis.\nNote that we are using filled circular marks and the size parameter to enlarge the points slightly and make it easier to see the changes in colour that we will be discussing in this slide deck."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#some-colour-schemes-are-designed-specifically-for-people-with-colour-vision-deficiencies",
    "href": "modules/module5/slides/module5_09.html#some-colour-schemes-are-designed-specifically-for-people-with-colour-vision-deficiencies",
    "title": "Effective use of colour for quantitative data",
    "section": "Some colour schemes are designed specifically for people with colour vision deficiencies",
    "text": "Some colour schemes are designed specifically for people with colour vision deficiencies\n\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Horsepower', title='Engine power (hp)',\n                    scale=alt.Scale(scheme='cividis', reverse=True)))\n\n\n\n\n\n\n\n\nBoth viridis, the default blue colour scheme, and most of the quantitative colour schemes available in Altair are well perceived by people with colour vision deficiencies since the data variation is mostly represented as variation in lightness.\nHowever, there are also some colour schemes that are designed to look almost exactly the same for people with the most common colour vision deficiencies also when it comes to the hue variation.\n'cividis' is one of these colour schemes and you can see how it looks in this plot.\nNearly 10% of the population is colour vision deficient; red-green colour blindness, in particular, affects 8% of men and 0.5% of women. Guidelines for making your visualizations more accessible to those with reduced colour vision, will in many cases also improve the interpretability of your graphs for people who have standard colour vision.\nFortunately, many of these are followed by the default settings in Altair, and we don’t need to change the colour scheme for this reason.\nIf you are unsure how your plot will look for someone who sees colours differently than you, this website lets you upload an image and simulate different colour vision deficiencies."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#additional-hue-variation-brings-out-further-detail-but-distorts-the-perceptual-uniformity",
    "href": "modules/module5/slides/module5_09.html#additional-hue-variation-brings-out-further-detail-but-distorts-the-perceptual-uniformity",
    "title": "Effective use of colour for quantitative data",
    "section": "Additional hue variation brings out further detail but distorts the perceptual uniformity",
    "text": "Additional hue variation brings out further detail but distorts the perceptual uniformity\n\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Horsepower', title='Engine power (hp)',\n                    scale=alt.Scale(scheme='turbo')))\n\n\n\n\n\n\n\n\nIf minor variation in the data is of uttermost importance, it is possible to use sequential colour schemes with additional hues.\nIn this plot, we use a modern rainbow colour scheme to highlight small changes in the Horsepower variable. While both the previous colour schemes were gradually increasing in lightness, this is not the case for this rainbow map.\nHere the lightest colours are in the middle and the darkest at both extremes of the colour schemes. This is particularly negative for people with colour vision deficiencies, which can no longer rely on the gradual lightness change and the varying hues, therefore, makes this plot less accessible.\nIn addition to losing the overall intuitiveness of the colour scheme, the many hues mean that we’re likely to perceive changes in the colour in a non-uniform manner, and see groups where they are none.\nImportantly, the rainbow map we have used here is a modern colour scheme called “turbo”, which was recently developed by Google. Most rainbow colour schemes you will see on plots in the wild use a colour scheme called “jet”, which used to be the default in many plotting packages but is not a good choice for any data, because it introduces artificial banding and highlighting of values.\nThe take-home message here is that there are valid use cases for modern rainbow maps, but you should be confident that there is no better alternative before reaching for this tool, and be careful when interpreting rainbow-coloured plots in general.\nThe jet rainbow colourmap should be avoided for many reasons, including that the sharp transitions between colours introduce a visual threshold that do not represent the underlying continuous data. Another issue is luminance (brightness). For example, your eye is drawn to the yellow and cyan regions, because the luminance is higher. This can have the unfortunate effect of highlighting features in your data that don’t exist, misleading your viewers! Since higher values are not always lighter, this means that your graph is not going to translate well to greyscale. More details about jet can be found in this blog post and this series of posts. A better alternative when you really need small differences in your data to stand out is to use the turbo rainbow colour scheme."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#colour-is-most-effectively-used-to-represent-a-separate-dataframe-column",
    "href": "modules/module5/slides/module5_09.html#colour-is-most-effectively-used-to-represent-a-separate-dataframe-column",
    "title": "Effective use of colour for quantitative data",
    "section": "Colour is most effectively used to represent a separate dataframe column",
    "text": "Colour is most effectively used to represent a separate dataframe column\n\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Weight_in_lbs', title='Weight (lbs)'))\n\n\n\n\n\n\n\n\nIn the previous slides, we encoded the same dataframe column in both the x and color channel so that it was easy for us to directly compare the colours to the points position on the x-axis.\nHowever, this is rarely done in practice, where it is often more effective to encode a separate dataframe column as the colour of the points.\nIn this slide we have encoded the weight of the cars as the colour. As we talked about in a previous module, it is difficult to see exactly which value a colour represents, but we can effectively communicate roughly how heavy the cars are as well as clearly highlight trends in the data.\nIn this plot, the trend is that the points get gradually darker the further towards the bottom right corner they lie. This means that heavier cars are the ones with more powerful engines and poorer gas mileage."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#diverging-colour-schemes-are-suitable-for-plots-with-a-natural-midpoint",
    "href": "modules/module5/slides/module5_09.html#diverging-colour-schemes-are-suitable-for-plots-with-a-natural-midpoint",
    "title": "Effective use of colour for quantitative data",
    "section": "Diverging colour schemes are suitable for plots with a natural midpoint",
    "text": "Diverging colour schemes are suitable for plots with a natural midpoint\n\n\nIn this slide, you see the lightness variation among all the colour schemes we have covered. Categorical colours are discretely separated, perceptually uniform colour schemes vary lightness linearly throughout the range, whereas rainbow maps peak lightness in the middle and have dark colours at the extremes.\nThe colour scheme to the far right is called a diverging colour scheme, which are useful when there is a natural midpoint in the data as we will see next.\nThere is also one other type of colour scheme, cyclical, which starts and ends in both the same lightness and hue. This design is useful for values with natural cycles such as degrees of an angle of the month of the year, where the end and beginning are close to each other."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#temperature-data-can-be-represented-with-a-sequential-colour-scheme",
    "href": "modules/module5/slides/module5_09.html#temperature-data-can-be-represented-with-a-sequential-colour-scheme",
    "title": "Effective use of colour for quantitative data",
    "section": "Temperature data can be represented with a sequential colour scheme",
    "text": "Temperature data can be represented with a sequential colour scheme\n\nimport pandas as pd\n\ntoronto_temp = pd.read_csv(\n    \"../../data/weatherstats_toronto_daily.csv\", parse_dates=[\"date\"]\n)[[\"date\", \"avg_temperature\"]]\nalt.Chart(toronto_temp).mark_circle(size=50).encode(\n    alt.X(\"date\", title=None),\n    alt.Y(\"avg_temperature\", title=\"Average temperature (°C)\"),\n    color=alt.Color(\"avg_temperature\", title=\"Average temperature (°C)\"),\n)\n\n\n\n\n\n\n\n\nExamples of data that is effectively represented by diverging colour schemes include temperature, correlations, and differences, where zero often can be a natural midpoint.\nHere we are plotting data from the last few years of the average daily temperature (C) in Toronto, Canada downloaded from weatherstats.ca.\nAs you can see, a sequential colour scheme can be used to visualize this data, but it does not get a good sense for when the temperature was negative and when it was positive."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#a-diverging-colour-scheme-effectively-highlights-values-at-the-extreme-temperatures",
    "href": "modules/module5/slides/module5_09.html#a-diverging-colour-scheme-effectively-highlights-values-at-the-extreme-temperatures",
    "title": "Effective use of colour for quantitative data",
    "section": "A diverging colour scheme effectively highlights values at the extreme temperatures",
    "text": "A diverging colour scheme effectively highlights values at the extreme temperatures\n\nalt.Chart(toronto_temp).mark_circle(size=50).encode(\n    alt.X('date', title=None),\n    alt.Y('avg_temperature', title='Average temperature (°C)'),\n    color=alt.Color('avg_temperature',\n                    title='Average temperature (°C)',\n                    scale=alt.Scale(scheme='blueorange', domainMid=0)))\n\n\n\n\n\n\n\n\nWhen using a diverging colours scheme as in this slide, it is clear which days had the extreme negative and the extreme positive temperatures.\nThis is because diverging colour schemes vary in lightness from dark at the extremes to light in the middle, and use different hues for values on each side of the midpoint.\nBy default, the midpoint would be set in the middle of the max and min values in our data (so around +5 here). Since 0 is a natural midpoint, we specify this manually.\nThe default diverging colour scheme uses orange and blue hues, but there are many other effective combinations. You should avoid using green and red, because these are practically impossible to tell apart for people with the most common types of colour vision deficiencies."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#an-explicit-domain-can-be-defined-to-adjust-colours-at-the-extremes",
    "href": "modules/module5/slides/module5_09.html#an-explicit-domain-can-be-defined-to-adjust-colours-at-the-extremes",
    "title": "Effective use of colour for quantitative data",
    "section": "An explicit domain can be defined to adjust colours at the extremes",
    "text": "An explicit domain can be defined to adjust colours at the extremes\n\nalt.Chart(toronto_temp).mark_circle(size=50).encode(\n    alt.X('date', title=None),\n    alt.Y('avg_temperature', title='Average temperature (°C)'),\n    color=alt.Color('avg_temperature',\n                    title='Average temperature (°C)',\n                    scale=alt.Scale(scheme='blueorange', domain=[-30, 30])))\n\n\n\n\n\n\n\n\nWhen setting the midpoint of the diverging colour scheme, the extremes data values on either side are given the darkest lightness values.\nThis means that the positive side of the scale is longer, and only points 30 degrees away from the midpoint are coloured in the darkest orange colour,\nOn the other hand, for the negative values, it is sufficient to be only 20 degrees away from the midpoint to be colour in the darkest blue colour.\nThis colouring strategy is often effective, but it is also possible for us to set the explicit domain over which the colours are defined, so that points as many steps on either side of the midpoint are assigned the same lightness values.\nFor temperature data, either approach is fine and it depends on what we want to highlight.\nFor correlation data, which can never be over 1 or under -1, it would more often than not be sensible to set these limits as the domain values.\nIf you are interested in reading more about how colour choices determines what we see, this is an educational article."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#read-in-the-data-containing-the-daily-sum-of-donations-to-wikipedia-in-2020",
    "href": "modules/module5/slides/module5_05.html#read-in-the-data-containing-the-daily-sum-of-donations-to-wikipedia-in-2020",
    "title": "Defining and transforming axis ranges",
    "section": "Read in the data containing the daily sum of donations to Wikipedia in 2020",
    "text": "Read in the data containing the daily sum of donations to Wikipedia in 2020\n\nimport pandas as pd\nimport altair as alt\n\ndonations = pd.read_csv(\"../../data/donations.csv\", parse_dates=[\"date\"])\nalt.Chart(\n    donations, title=\"Wikipedia donations peak during Christmas\"\n).mark_circle().encode(\n    alt.X(\"date\", title=None),\n    alt.Y(\"sum\", axis=alt.Axis(format=\"$s\"), title=\"Amount donated per day\"),\n)\n\n\n\n\n\n\n\n\nWe will be working with a data set that contains the daily sum of all donations received by Wikipedia in the year 2020. When do you think Wikipedia receives the largest amount of donated money?\nFrom this overview of the data we can see that the most money is donated around Christmas and New Years’.\nThere also seems to be a higher amount donated during the fall then during spring and winter.\nHowever, we cannot see exactly which values the data points during the first half of the year has. Are they close to zero? Or 10,000? We can’t know from looking at this plot."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axis-by-filtering-the-data",
    "href": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axis-by-filtering-the-data",
    "title": "Defining and transforming axis ranges",
    "section": "We can zoom in to highlight a region of an axis by filtering the data",
    "text": "We can zoom in to highlight a region of an axis by filtering the data\n\ntitle_text = 'Wikipedia donations peak during Christmas'\ndonations_2020_until_july = donations[donations['date'].between(\"2020\", \"2020-07\")]\nalt.Chart(donations_2020_until_july, title=title_text).mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day'))\n\n\n\n\n\n\n\n\nZooming in on an axis is useful when we want to highlight a certain region. The easiest way to achieve this is often to filter the data with pandas before passing it alt.Chart.\nHere we create a new dataframe containing only the donations made in the first half of 2020, up until the month of July."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axes",
    "href": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axes",
    "title": "Defining and transforming axis ranges",
    "section": "We can zoom in to highlight a region of an axes",
    "text": "We can zoom in to highlight a region of an axes\n\nalt.Chart(donations_2020_until_july, title=title_text).mark_circle(clip=True).encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'),\n          title='Amount donated per day',\n          scale=alt.Scale(domain=[0, 100_000])))\n\n\n\n\n\n\n\n\nIt is not always practical to filter the data, so it is good to know how to change the axis range directly in Altair. For this, we could modify the domain of the axis’ scale.\nWhen we modify the scale, we need to set clip=True inside the mark. Without it, we would still see the circles extending beyond the range of the chart.\nThis also serves as a reminder to think twice about limiting the displayed points because it can skew the perception of the data as we saw with the bar chart in the previous slide deck.\nWhen we used alt.Axis previously, the changes we made were cosmetic, such as tick numbers, label formatting etc.\nNow that were are modifying the range of the actual displayed values, we need to use alt.Scale instead. Here we place alt.Scale within alt.Y to specify that we are changing the scale of the y-axis. It also works the same way with alt.Color and alt.Size, which changes the display of these in the legend.\nAfter zooming in on the y-axis as in this slide, we can more clearly see the variation in the lower value data points. We can see that more money is often donated at the beginning of each month, except for the month of July."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#axes-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "href": "modules/module5/slides/module5_05.html#axes-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "title": "Defining and transforming axis ranges",
    "section": "Axes can be anchored to the data range instead of to zero without explicitly setting the domain",
    "text": "Axes can be anchored to the data range instead of to zero without explicitly setting the domain\n\nalt.Chart(donations[donations['sum'] &gt; 2.5e6]).mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day'))\n\n\n\n\n\n\n\n\nYou might have noticed from previous modules that Altair often includes 0 in the axis, even if our data does not have any values close to 0. The reason for this is to enforce good habits and not create, for example, a bar plot that is cut off which makes the difference appear much bigger than they actually are.\nHowever, there are also good reasons for setting the range based on the extent of the data. when your data is compressed in a narrow range far from zero, e.g. plotting time on one axis and having all observations fall between 10 and 11 in the evening.\nIn this slide, we can see that showing only the days with high total donations only uses about half of the vertical space available in the chart."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#axis-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "href": "modules/module5/slides/module5_05.html#axis-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "title": "Defining and transforming axis ranges",
    "section": "Axis can be anchored to the data range instead of to zero without explicitly setting the domain",
    "text": "Axis can be anchored to the data range instead of to zero without explicitly setting the domain\n\nalt.Chart(donations[donations['sum'] &gt; 2.5e6]).mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day', scale=alt.Scale(zero=False)))\n\n\n\n\n\n\n\n\nIf we wanted to use the full range, we could set the domain explicitly like before, but the shortcut zero=False allows us to adjust the axis to the min and max values of the data with less typing.\nWe need to be careful when doing this since it can make small differences appear much bigger than they are. On the previous slide, the point at 4.7M was about twice as far from the x-axis as the point at 2.5M from the x-axis. In this slide, it is about 20 times further away from the x-axis!"
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#large-values-can-hide-variation-among-the-rest-of-the-data",
    "href": "modules/module5/slides/module5_05.html#large-values-can-hide-variation-among-the-rest-of-the-data",
    "title": "Defining and transforming axis ranges",
    "section": "Large values can hide variation among the rest of the data",
    "text": "Large values can hide variation among the rest of the data\n\nalt.Chart(donations, title='Wikipedia donations peak during Christmas').mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day'))\n\n\n\n\n\n\n\n\nSo far, we have seen how we can zoom in to reveal the detail of a specific region of the chart.\nWhat if we want to show all the chart, but still, be able to see details for the days with lower total donations?"
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#altair-allows-us-to-interactively-zoom-in-and-out-of-the-plot",
    "href": "modules/module5/slides/module5_05.html#altair-allows-us-to-interactively-zoom-in-and-out-of-the-plot",
    "title": "Defining and transforming axis ranges",
    "section": "Altair allows us to interactively zoom in and out of the plot",
    "text": "Altair allows us to interactively zoom in and out of the plot\n\nalt.Chart(donations, title='Wikipedia donations peak during Christmas').mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day')).interactive()\n\n\n\n\n\n\n\n\nOne of Altair’s strong suites is that it is not limited to static visualizations.\nBy simply appending the interactive() method to our chart we can use the mouse to zoom by scrolling and pan by clicking and dragging!\nThis allows us to interactively explore the data and zoom in on the points of interest as needed. We will learn more about interactive visualizations in the last module, this is just a sample of what is possible.\nNeat ey? Now let’s get back to the current task at hand, how can we solve the problem of a large axis range in a static figure? As sometimes, we need a static figure, e.g. when we print images on paper or display them in a static file-type, such as a PDF."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#a-log-transformed-axis-can-reveal-detail-across-a-large-range-of-values",
    "href": "modules/module5/slides/module5_05.html#a-log-transformed-axis-can-reveal-detail-across-a-large-range-of-values",
    "title": "Defining and transforming axis ranges",
    "section": "A log-transformed axis can reveal detail across a large range of values",
    "text": "A log-transformed axis can reveal detail across a large range of values\n\nalt.Chart(donations).mark_point().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (log-transformed)',\n          axis=alt.Axis(format='$s'), scale=alt.Scale(type='log')),\n    alt.Tooltip('week_day'))\n\n\n\n\n\n\n\n\nBy applying a logarithmic (log) transformation to the y-axis, we’re able to increase the range used for the smaller values by compressing the space used for larger values.\nThis means that log transformations are useful when there are large differences in the data values, such as in our case here.\nLog scales are also useful to show data that has been obtained from multiplication or division, such as ratios.\nThe default log transformation in Altair uses the base 10 which is the most common choice. Every step on a log scale is referred to as a difference of an “order of magnitude”.\nIt is important to remember that we log scaled axes are not as easy to interpret as linear ones, and it is easy to underestimate actual the difference between large and small values.\nThis is especially true when creating figures for communication with the general public rather than in a subject area where participants might be more used to seeing this transformation.\nIf you find yourself situation make sure that you clearly label the axis as log-transformed and add any explanatory text to help a general audience interpret your visualization."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#the-log-transformation-does-not-work-for-data-containing-the-value-zero",
    "href": "modules/module5/slides/module5_05.html#the-log-transformation-does-not-work-for-data-containing-the-value-zero",
    "title": "Defining and transforming axis ranges",
    "section": "The log transformation does not work for data containing the value zero",
    "text": "The log transformation does not work for data containing the value zero\n\ndonations.loc[0, 'sum'] = 0\nalt.Chart(donations).mark_point().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (log-transformed)',\n          axis=alt.Axis(format='$'), scale=alt.Scale(type='log')))\n\n\n\n\n\n\n\n\nThe way the logarithmic transform is defined means that it cannot be calculated for the value 0.\nWe can see this if we artificially introduce a 0 in our dataset.\nAll the data points are compressed at the top, because the log of 0 is interpreted as a value of negative infinity."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#the-symlog-transformation-avoids-the-problem-with-zeroes-in-the-data",
    "href": "modules/module5/slides/module5_05.html#the-symlog-transformation-avoids-the-problem-with-zeroes-in-the-data",
    "title": "Defining and transforming axis ranges",
    "section": "The symlog transformation avoids the problem with zeroes in the data",
    "text": "The symlog transformation avoids the problem with zeroes in the data\n\nalt.Chart(donations).mark_point().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (symlog-transformed)',\n          axis=alt.Axis(format='$s'), scale=alt.Scale(type='symlog')))\n\n\n\n\n\n\n\n\nFortunately, there is a symmetrical variant of the log transformation (symlog) which works around the issues with zeroes by defining a linear range for values close to 0, and a logarithmic range of all other values.\nWe can see that the y-axis looks different here as it explicitly includes the value zero, and the tick values are set differently for symlog compared to the regular log transform."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#remember-to-use-the-correct-mark-for-your-data",
    "href": "modules/module5/slides/module5_05.html#remember-to-use-the-correct-mark-for-your-data",
    "title": "Defining and transforming axis ranges",
    "section": "Remember to use the correct mark for your data",
    "text": "Remember to use the correct mark for your data\n\nalt.Chart(donations.drop(0)).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (log-transformed)',\n          axis=alt.Axis(format='$s'), scale=alt.Scale(type='log')))\n\n\n\n\n\n\n\n\nIn this slide, we’re dropping the artificial 0 we introduced earlier to bring attention to another important aspect of visualization: the choice of mark.\nSo far we have been plotting our time-series data using circles. This has been useful to illustrate the points above, but it is not the most effective choice for visualizing temporal data.\nBy changing the mark to a line it is much easier for us to follow the trend going from one point to another and we can immediately spot a curious pattern!\nWhat are those repeated ups and down? Are those random fluctuations or are there particular days of the month where people are more likely to donate?\nWe will return to this data in the last slide deck of this module to find out!"
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data",
    "href": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data",
    "title": "Effective Figures for Communication",
    "section": "Figure design allows us to tell different stories from the same data",
    "text": "Figure design allows us to tell different stories from the same data\nFrom Infoworld\n\n\nWhen designing figures for presentation, we have the possibility to tell different stories from the same underlying data.\nOn this slide, you can see an award-winning figure describing the “bloody toll” from the American war in Iraq. This figure has been purposely designed to draw your attention to the blood-like red colour and the downward-facing bars which brings up an association with dripping blood.\nThe title also clearly highlights the negative aspects of this data.\nNow let’s look at another figure of the same data."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data-1",
    "href": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data-1",
    "title": "Effective Figures for Communication",
    "section": "Figure design allows us to tell different stories from the same data",
    "text": "Figure design allows us to tell different stories from the same data\nFrom Infoworld\n\n\nThis figure paints an entirely different picture of the event. It focuses on the recent declining trend in deaths, uses a positive green colour, and has the bars facing upwards.\nBoth figures are correct and both use the same data, but they convey starkly distinct messages.\nThis also serves to illustrate that understanding the principles behind designing figures for communication does not only help you create effective visualizations, it is also of great help when interpreting figures made by others."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation",
    "href": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation",
    "title": "Effective Figures for Communication",
    "section": "Figure design should be adopted to the target audience and situation",
    "text": "Figure design should be adopted to the target audience and situation\nFrom Kieran Healy’s Data Visualization: A practical introduction\n\n\nThis is an elegant figure that goes into exquisite detail about how Napoleon’s army gradually shrank in numbers as the march against the Russian empire in the early 1800s.\nThe width of the line is the number of soldiers in the army and the colour represents whether they are marching against Moscow (gold/brown) or retreating back to France (black). The bottom of the chart shows how the temperature changed during the campaign.\nIt does take a few seconds to digest the graph when you first see it, but once you have familiarised yourself with it, you appreciate how you can see in detail the army’s progress as it moved through Europe.\nThis is a great visualization when the reader has time to sit down with the plot for a while and when you believe your target audience will appreciate this level of detail?\nBut what if you are presenting this as part of a slide deck in a board meeting and only can spend a few seconds describing the plot? It would likely be too complicated to digest and the take-home message might be lost."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation-1",
    "href": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation-1",
    "title": "Effective Figures for Communication",
    "section": "Figure design should be adopted to the target audience and situation",
    "text": "Figure design should be adopted to the target audience and situation\nFrom Kieran Healy’s Data Visualization: A practical introduction\n\n\nIn the board meeting, this pie chart is likely more effective in communicating the take-home message: the Napolean army was decimated as a result of this military campaign.\nAlthough we said earlier in this course that we should generally avoid using pie charts, here the information is simple enough that a pie chart is very effective."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#breaking-an-axis-is-often-misleading",
    "href": "modules/module5/slides/module5_01.html#breaking-an-axis-is-often-misleading",
    "title": "Effective Figures for Communication",
    "section": "Breaking an axis is often misleading",
    "text": "Breaking an axis is often misleading\nFrom The Economist\n\n\nIn this module, we will also visit a few best practices in visualization design and learn why they are effective.\nWe can see one of these on this slide. Breaking the value axis of a chart can lead to that the differences between the values look much bigger than they are.\nIn the left chart of this slide, the value axis is broken resulting in the top bar being only 1.5x longer than the second-longest bar when the difference is in fact more than 5x as can be seen in the right-most chart.\nThis example is from an article in The Economist where they critique their past visualization mistakes, which is an effective way to learn."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#appropriate-choice-of-colours-makes-visualizations-much-more-effective",
    "href": "modules/module5/slides/module5_01.html#appropriate-choice-of-colours-makes-visualizations-much-more-effective",
    "title": "Effective Figures for Communication",
    "section": "Appropriate choice of colours makes visualizations much more effective",
    "text": "Appropriate choice of colours makes visualizations much more effective\n\n\n\nOn this slide, we have represented the values of one of the dataframe columns with different colour combinations. Using the correct colour combination might at first seem like a matter of aesthetics rather than an important part of data visualization, but it can have a profound impact on how we interpret plots.\nWithout knowing the details of how the colour combinations in this slide were created or even what makes for a good combination of colours, we can immediately see that it is easier to interpret the plot on the right.\nHaving the slight variation from light to dark blue is a more natural mapping for a range of values compared to the wide array of different colours used in the left plot.\nWe will learn why this is in a few slide decks!"
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#descriptive-figure-and-axis-titles-are-critical-for-effective-visualizations",
    "href": "modules/module5/slides/module5_01.html#descriptive-figure-and-axis-titles-are-critical-for-effective-visualizations",
    "title": "Effective Figures for Communication",
    "section": "Descriptive figure and axis titles are critical for effective visualizations",
    "text": "Descriptive figure and axis titles are critical for effective visualizations\n\n\nThis is the same figure we showed on the first slide, but with one small modification, can you see what it is?\nWhat we have done is removed the title from the top of the figure. This relatively small change makes the figure much less striking.\nWhile the graphics still stand out, we’re not hit with a powerful take-home message immediately when we look at the plot.\nEven if our audience would have the time to study this figure in detail and read all the text, it will likely not be as memorable without the striking title.\nLater in this module, we will learn not just how to create effective figure titles but also how to label our axes effectively."
  },
  {
    "objectID": "modules/module5/module5-13-what_did_we_just_learn.html",
    "href": "modules/module5/module5-13-what_did_we_just_learn.html",
    "title": "7. What did we just learn?",
    "section": "",
    "text": "7. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "7. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module5/module5-11-annotating_with_text_and_colour.html",
    "href": "modules/module5/module5-11-annotating_with_text_and_colour.html",
    "title": "6. Annotating With Text and Colour",
    "section": "",
    "text": "6. Annotating With Text and Colour\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "6. Annotating With Text and Colour"
    ]
  },
  {
    "objectID": "modules/module5/module5-09-effective_use_of_colour_quantitative_data.html",
    "href": "modules/module5/module5-09-effective_use_of_colour_quantitative_data.html",
    "title": "5. Effective Use of Colour for Quantitative Data",
    "section": "",
    "text": "5. Effective Use of Colour for Quantitative Data\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "5. Effective Use of Colour for Quantitative Data"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-effective_use_of_colour_categorical_data.html",
    "href": "modules/module5/module5-07-effective_use_of_colour_categorical_data.html",
    "title": "4. Effective Use of Colour for Categorical Data",
    "section": "",
    "text": "4. Effective Use of Colour for Categorical Data\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "4. Effective Use of Colour for Categorical Data"
    ]
  },
  {
    "objectID": "modules/module5/module5-05-defining_and_transforming_axis_ranges.html",
    "href": "modules/module5/module5-05-defining_and_transforming_axis_ranges.html",
    "title": "3. Defining and Transforming Axis Ranges",
    "section": "",
    "text": "3. Defining and Transforming Axis Ranges\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "3. Defining and Transforming Axis Ranges"
    ]
  },
  {
    "objectID": "modules/module5/module5-03-descriptive_titles_and_labels.html",
    "href": "modules/module5/module5-03-descriptive_titles_and_labels.html",
    "title": "2. Descriptive Titles and Labels",
    "section": "",
    "text": "2. Descriptive Titles and Labels\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "2. Descriptive Titles and Labels"
    ]
  },
  {
    "objectID": "modules/module5/module5-01-effective_figures_for_communication.html",
    "href": "modules/module5/module5-01-effective_figures_for_communication.html",
    "title": "1. Effective Figures for Communication",
    "section": "",
    "text": "1. Effective Figures for Communication\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "1. Effective Figures for Communication"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 1",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse the grammar of graphics presented here.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "href": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "title": "How Can We Visualize Data?",
    "section": "There are two types of visualization approaches",
    "text": "There are two types of visualization approaches\nWhen learning about data visualization, it is helpful to distinguish between the following two approaches to visualization:\n\nImperative\nDeclarative\n\n\nThere are a plethora of visualization packages in Python.\nThis rich selection can be beneficial but it is also confusing, especially when starting out and trying to decide which package to choose.\nWhen learning about data visualization, it is helpful to distinguish between plotting packages that follow either an imperative or a declarative visualization philosophy."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "href": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "title": "How Can We Visualize Data?",
    "section": "Imperative (low level) plotting focuses on plot mechanics",
    "text": "Imperative (low level) plotting focuses on plot mechanics\n\nFocus on plot construction details.\n\nOften includes loops, low-level drawing commands, etc.\n\nSpecify how something should be done\n\n“Draw a red point for every observation that has value X in column A, a blue point for every observation that has value Y in column A, etc.”\n\nMinute control over plotting details, but laborious for complex visualization.\n\n\nImperative (or low level) plotting packages focus on plot construction details such as how to implement the visualization in terms of for-loops, low-level drawing commands, etc.\nThis approach gives us minute control over what is plotted, but it becomes quite laborious when we need to plot larger dataframes, or create more complex visualizations."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "href": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "title": "How Can We Visualize Data?",
    "section": "The data we will be plotting",
    "text": "The data we will be plotting\n\n\n\n\nCountry\n\n\nArea\n\n\nPopulation\n\n\n\n\n\n\nRussia\n\n\n17098246\n\n\n144386830\n\n\n\n\nCanada\n\n\n9984670\n\n\n38008005\n\n\n\n\nChina\n\n\n9596961\n\n\n1400050000\n\n\n\n\n\nIn the example in the next slide, we will plot the area and the population for the three largest countries in the world to see how they compare. This is the table we are plotting."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of imperative plotting",
    "text": "Example of imperative plotting\n# Pseudocode\ncolors = ['blue', 'red', 'yellow']\nplot = create_plot()\nfor row_number, row_data in enumerate(dataframe):\n    plot.add_point(x=row_data['Area'], y=row_data['Population'], color=colors[row_number])\n\n\n\n\n\n\n\n\n\nFor this example, we will use Python-inspired pseudocode, which is code that is made up and designed so that it is less complex and easier to read than real programming languages.\nThis helps us focus on understanding the concepts of plotting instead of getting hung up on the code syntax details of a particular package.\nYou can see that an imperative approach to plotting this data would be to first create the plot and then loop through the dataframe to add a point for each country one by one.\nTo colour the points, we need to manually create a sequence of colours that we can access inside the loop.\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou can see that one of the countries is bigger than the others, and one of the countries has a much larger population, but without seeing the code, it is not possible to know which colour represents which country.\nWe could add a legend by creating it explicitly and adding one coloured dot per iteration in the loop."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "href": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "title": "How Can We Visualize Data?",
    "section": "Declarative (high level) plotting focuses on the data",
    "text": "Declarative (high level) plotting focuses on the data\n\nFocus on data and relationships.\n\nOften includes linking columns to visual channels.\n\nSpecify what should be done\n\n“Assign colors based on the values in column A”\n\nSmart defaults give us what we want without complete control over minor plotting details.\n\n\nDeclarative (or high level) plotting packages declare links between dataframe columns and visual channels, such as the x-axis, y-axis, colour, etc.\nThis means that you can provide a high-level specification of what you want the visualization to include, and the plot details are handled automatically.\nIn summary, declarative visualization tools let you think about data and relationships, while imperative visualization tools focus on plot construction details."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of declarative plotting",
    "text": "Example of declarative plotting\n# Pseudocode\npoint_plot(data=dataframe, x='Area', y='Population', color='Country')\n\n\n\n\n\n\n\n\n\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou will notice that this time the plot also includes a legend without us having to create it explicitly, which is a common convenience in declarative plotting packages."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "href": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "title": "How Can We Visualize Data?",
    "section": "A high-level grammar of graphics helps us compose plots effectively",
    "text": "A high-level grammar of graphics helps us compose plots effectively\n\nSimple grammatical components combine to create visualizations.\nVisualization grammars often consist of three main components:\n\nCreate a chart linked to a dataframe.\nAdd graphical elements (such as points, lines, etc).\nEncode dataframe columns as visual channels (such as x, etc).\n\n\n# Pseudocode\nchart(dataframe).add_points().encode_columns(x='Area', y='Population', color='Country')\n\nThe declarative plotting concept can be implemented in different ways.\nIn the previous slide, we had a dedicated function for creating the pointplot, and there would be a separate function for creating a lineplot, barplot, etc.\nWith this approach, it is often not easy to combine plots together, unless there is a specific function for that purpose and the three bullets points on this slide are all executed by this single function.\nAnother way to use declarative plotting is via a visualization grammar.\nGenerally, a grammar governs how individual parts come together to compose more complex constructs.\nFor example, a linguistic grammar decides how words and phrases can be combined into coherent sentences. A data visualization grammar determines how to combine individual parts of the plotting syntax to create complete visualization.\nIn the example on this slide, you can see that the three bullet points are now broken down into one main function to create the chart linked to the data, and then we build upon this by adding the graphical elements (add_points()) and the encoding of the columns to properties of this chart (encode_columns()).\nBy combining these three grammatical components in different ways, we can build a wide range of visualizations, without memorizing a unique function for each plot type.\nThanks to this grammatical visualization approach, we also only require minimal changes to our code to change the type of plot."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "href": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "title": "How Can We Visualize Data?",
    "section": "The Python plotting landscape",
    "text": "The Python plotting landscape\n\n\nNow that we know the basic concepts of how data can be visualized, let’s select a Python package and get coding!\nIn this image, you can see the most commonly used Python plotting packages.\nThere are many more, but these are the ones you are the most likely to hear about, so it is good to know that they exist.\nThe text to the left in the image is a legend to explain the colours used for the different Python packages (blue for high level, declarative packages and orange for low-level, imperative packages).\nAs you can see there are several high and low-level language, so how do we chose?\nIn this course we will use Altair, because it is a powerful declarative visualization tool with a clear and consistent grammar that also allows us to add interactive components to our plots, such as tooltips and selections.\nWe have also included some of the most common visualization packages for the web which are built-in Javascript and coloured in white.\nThe reason we mention these is that the Altair library is a little bit of Python code connected to an already existing powerful JavaScript package called VegaLite, which in turns builds on D3, the most dominant visualization package on the web today.\nBy leveraging these well-established JavaScript visualization packages Altair can create plots that work natively on the web and includes interactive features without reinventing the wheel.\nSince Altair and VegaLite are relatively new visualization libraries, they don’t yet support every single plot type out there, but they more than make up for it with their ease of use and support for powerful interactive visualizations, as we will see later."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "href": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "title": "How Can We Visualize Data?",
    "section": "Sample data can be found in Altair’s companion package vega_datasets",
    "text": "Sample data can be found in Altair’s companion package vega_datasets\n\nfrom vega_datasets import data\n\ncars = data.cars()\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n130.0\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n165.0\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n150.0\n3436\n11.0\n1970-01-01\nUSA\n\n\n3\namc rebel sst\n16.0\n8\n304.0\n150.0\n3433\n12.0\n1970-01-01\nUSA\n\n\n4\nford torino\n17.0\n8\n302.0\n140.0\n3449\n10.5\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n401\nford mustang gl\n27.0\n4\n140.0\n86.0\n2790\n15.6\n1982-01-01\nUSA\n\n\n402\nvw pickup\n44.0\n4\n97.0\n52.0\n2130\n24.6\n1982-01-01\nEurope\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n84.0\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n79.0\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n82.0\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nBefore we start visualizing data, we need to select a dataset and often also a question we want to answer.\nAltair works with dataframes in the “tidy” format (which we talked about in the Programming in Python for Data Science course), which means that they should consist of rows with one observation each and a set of named data columns with one feature each (you might also have heard these called fields or variables, but we will stick to columns for clarity).\nIn this course, we will often use data from the vega-datasets package, which has many plot-friendly practice datasets available as Pandas dataframes and can be loaded as demonstrated in this slide. We can use these datasets by importing the data module from the vega_datasets packages as in this slide. Here, our data contains the name of different cars and some attributes relating to each car. There are many interesting questions we could ask from this data set! For our first plot, let’s explore the relationship between how heavy a car is (the Weight_in_lbs column) and how good gas mileage it has (theMiles_per_gallon column).\nBefore starting to code the visualization, take a few seconds and think about what you would expect the relationship between these two columns to look like when you plot it."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "href": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "title": "How Can We Visualize Data?",
    "section": "Adding graphical elements via marks",
    "text": "Adding graphical elements via marks\n\nimport altair as alt\n\nalt.Chart(cars).mark_point()\n\n\n\n\n\n\n\n\nHere we assigned a shorter name (alt) to the Altair library when importing it to save us some typing later. The Altair syntax is similar to the grammar of graphics pseudocode we saw a few slides ago. The fundamental object in Altair is the Chart, which takes a data frame as a single argument, e.g. alt.Chart(cars).\nAfter the chart object has been created, we can specify how the graphical element should look that we use to visualize the data. This is called a graphical mark in Altair, and in this slide, we have used mark_point() to show the data as points.\nSince we have not specified which columns should be used for the x and y axes, we appear to only see one point in this plot since all the data is plotted on top of each other in the same location.\nTo the right of the chart, there is a button with three dots on it. don’t worry about it right now, we will explain what this is for at the end of the chapter."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "href": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "title": "How Can We Visualize Data?",
    "section": "Encoding columns as visual channels",
    "text": "Encoding columns as visual channels\nMapping a dataframe column to the x-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs')\n\n\n\n\n\n\n\n\nTo visually separate the points, we can encode columns in the dataframe as visual channels, such as the axes or colours of the plot.\nHere, we encode the column Miles_per_Gallon as the x-axis. For Pandas data frames, Altair automatically determines an appropriate data type for the mapped column, which in this case is quantitative (or numerical) and shows the numbers under the axis.\nYou can see that there are several short black lines spread out evenly on the x-axis. These are called axis ticks and help us see where the values of this dataframe column lie along the axis.\nThe faint gray lines are called grid lines and extend the locations of the axis ticks so that it is easy to compare their position to the points.\nThis is particularly useful when the points might be further away from the axis ticks, such as in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the y-scale",
    "text": "Mapping a dataframe column to the y-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nBy spreading out the data along both the x and y-axis, we can answer our initial question about the relationship between car weight and gas mileage. as it appears that the heavier cars are the ones that have the poorest mileage.\nAlthough we might have expected this to be the case, visualizing all the data points also provides information on the nature of the relationship between weight and mileage.\nIt appears that the x-y points don’t simply follow a straight line, but rather a curved line that where the mileage drop quickly when moving away from the lightest cars, but then decreases more slowly throughout the remainder of the data.\nThis rich, easily interpretable display of information is one of the main advantages of visualizing data and later in the course, we will talk more about the different type of relationships, such as linear, exponential, etc."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a numerical dataframe column to the colour scale",
    "text": "Mapping a numerical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Horsepower')\n\n\n\n\n\n\n\n\nIs there a relationship between horsepower and car weight, or fuel-efficiency?\nTo enrich this display of information further, we can colour the points according to a column in the dataframe. When we encode a column as the colour channel Altair will automatically figure out an appropriate colour scale to use, depending on whether the data is numerical, categorical, etc. Here we have indicated that we want to colour the points according to the car’s horsepower, which indicated how powerful its engine is.\nWe can see that the heavier cars have more powerful engines, than the lighter ones, but when using colour for a numerical comparison like this, makes it is harder to tell whether the relationship follows a straight line or is of another nature, so this encoding is mostly useful as an approximate indication of the horsepower.\nWe can also observe a relationship between the horsepower of a vehicle and the fuel efficiency. It appears that cars with greater horsepower (the points with a darker shade of blue) are less efficient with their fuel since miles per Gallon is much lower.\nIn the next module, we will learn more in detail about which encodings are most suitable for different comparisons."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a categorical dataframe column to the colour scale",
    "text": "Mapping a categorical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nIn the previous slide, a continuous, gradually increasing colour scale was used to visualize the gradual increase in the numerical column Horsepower. In this slide, we instead chose to colour the points per the categorical column Origin (where the car was made).\nAs you can see, Altair detects that this column contains categorical data (with the help of pandas) and picks a different colour scale to facilitate distinction between the categories. As in the previous slide,\nAltair automatically adds a helpful legend, and we can see that the heavier, more powerful cars are primarily manufactured in the US, while the lighter more fuel-efficient ones are manufactured in Europe and Japan (remember that this is true for this particular dataset, and not necessarily all cars)."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the shape scale",
    "text": "Mapping a dataframe column to the shape scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin')\n\n\n\n\n\n\n\n\nAlthough Altair’s colour scales are designed to be effective and easy to interpret, we can make the categories in our plot even more distinct by encoding the same categorical column as both colour and shape.\nThis also makes visualizations much easier to interpret and understand for anyone with visual colour deficiency (about 10% of the population). We will talk more in-depth about colour theory in a later module."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the size scale",
    "text": "Mapping a dataframe column to the size scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nSometimes a visualization tries to do too much. In this example, we have added the size channel to indicate the engine power.\nAlthough Altair elegantly handles the dual legends, it is difficult for us to discern useful information from this plot. If you go back to the plot where we encoded weight in the colour channel, you can see that the plot is much clearer.\nLater we will learn more about how to efficiently load a visualization with an appropriate amount of information, and what the research indicates regarding which visual channels are the most efficient for communicating information visually."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "href": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "title": "How Can We Visualize Data?",
    "section": "The action button can be used to save the plot",
    "text": "The action button can be used to save the plot\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nThis is the same visualization as from the last slide, and we will just use it as an example.\nThe button to the right of the chart with three dots on it is called the “action button”. and clicking it will bring up a menu.\nThe first two items in ’s menu can be used to save the chart, either in an image-based PNG-format or a text-based SVG-format.\nWe will also be learning about programmatic ways to save our charts later in the course.\nThe last three menu items relate to the library VegaLite, which is what we mentioned Altair is built upon, but we will not be using these in this course."
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse Altair’s grammar of graphics.\nCreate point and line visualizations in Altair.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering."
  },
  {
    "objectID": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "title": "3.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "True or False: Visualization Libraries",
    "text": "True or False: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "title": "2.1. Exercises",
    "section": "Your First Plot",
    "text": "Your First Plot\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s use the same vehicle dataset we saw in the lecture, but visualize the relationship between two different columns.\nThe data has already been imported for you in this exercise.\nHere is what it looks like:\n\n\n\n\n\n\nTasks:\n\nFill out the missing fields in the Altair plot in order to create a scatter plot.\nThe cars’ Horsepower should be on the y-axis and their Weight_in_lbs on the x-axis.\nColor the points by the Origin of the cars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nAre the column names expressed in quotes, e.g. y='Horsepower'?\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "href": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "title": "1.1. Exercises",
    "section": "True or False: Data Visualization",
    "text": "True or False: Data Visualization",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module-learning-outcomes.html",
    "href": "modules/module1/module1-00-module-learning-outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module0/module0-02-prerequisite_confirmation.html",
    "href": "modules/module0/module0-02-prerequisite_confirmation.html",
    "title": "1.1. Prerequisite Confirmation",
    "section": "",
    "text": "1.1. Prerequisite Confirmation",
    "crumbs": [
      "**M0. Visualization Intro**",
      "&nbsp;&nbsp; 1.1. Prerequisite confirmation"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Data Visualization!",
    "section": "",
    "text": "Welcome to Data Visualization!\nThis course is part of the Key Capabilities for Data Science program and covers topics related to data visualization.\nIn this course we will learn how to (and how not to) visualize data. We will learn about the grammar of visualization and how it’s implemented in the “Altair” package to create our figures. In addition to common statistical visualizations, we will learn how to tell stories with data, create geographical visualizations, and bring out plots to life by adding interactive elements. Together, these skills will allow us to create effective data visualizations that strengthen our own exploratory data analysis skills and our ability to communicate insights to others. Select the first module in the sidebar to the left to get started.\nCourse prerequisites: Programming in Python for Data Science"
  },
  {
    "objectID": "modules/module0/module0-01-data_visualization.html",
    "href": "modules/module0/module0-01-data_visualization.html",
    "title": "1. Data Visualization",
    "section": "",
    "text": "1. Data Visualization\n\nVideoSlides",
    "crumbs": [
      "**M0. Visualization Intro**",
      "1. Data Visualization"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\nBy the end of the course, students are expected to be able to:\n\nUse the Altair grammar of graphics to create data visualizations.\nSelect an appropriate visualization for the data.\nPerform exploratory data analysis on a dataset.\nEffectively communicate findings with figures.\nInterpret data visualizations to answer questions and formulate follow-up questions.\n\n\nIn this module, you will learn how to use Altair to create data visualizations, choose the right visualizations for your data, explore datasets, and effectively communicate your analytical findings."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#prerequisites",
    "href": "modules/module0/slides/module0_00.html#prerequisites",
    "title": "Welcome!",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we proceed to Module 1, it is important to make sure you have a solid foundation of coding in Python."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "href": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "title": "Welcome!",
    "section": "Have you taken Programming in Python for Data Science?",
    "text": "Have you taken Programming in Python for Data Science?\nMake sure you are familiar with basic Python programming concepts as they are essential for this course."
  },
  {
    "objectID": "modules/module1/module1-01-what_is_data_visualization.html",
    "href": "modules/module1/module1-01-what_is_data_visualization.html",
    "title": "1. What is Data Visualization?",
    "section": "",
    "text": "1. What is Data Visualization?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "1. What is Data Visualization?"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "href": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "title": "2. How can we visualize data?",
    "section": "",
    "text": "2. How can we visualize data?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "2. How can we visualize data?"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "href": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "title": "3. Aggregations, Lines, and Layers",
    "section": "",
    "text": "3. Aggregations, Lines, and Layers\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "3. Aggregations, Lines, and Layers"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-what_did_we_just_learn.html",
    "href": "modules/module1/module1-11-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "href": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "title": "What is Data Visualization?",
    "section": "What is the purpose of visualizing data?",
    "text": "What is the purpose of visualizing data?\nVisualizing data can be used to\n\nAnswer a specific question\nExplore data more generally to generate new questions\n\nTo create an effective visualization, start by\n\nLooking at the data\nThinking about what you want to achieve by making the visualization\nDrawing it out with pen and paper\n\n\nWe often visualize data in order to help us answer a specific question we have about our dataset, but it can also help us generate new questions.\nBefore creating a visualization, it is important that you think about why you are making it, and what you want to achieve from creating this plot.\nIs there a specific question you are trying to answer, like comparing the relationship between two dataframe columns? Or are you creating a plot to help you understand the structure of your data more in general, such as plotting the distribution of each dataframe column?\nIn either case, it can be extremely helpful to draw out your plot with pen and paper first. This helps you think about if the plot you are creating makes sense or if there is another plot better suited for the task at hand.\nDrawing with pen and paper also makes it easier to write the code afterwards, since you clearly know what you are expecting the visualization to look like."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "href": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "title": "What is Data Visualization?",
    "section": "Why bother visualizing data instead of showing raw numbers?",
    "text": "Why bother visualizing data instead of showing raw numbers?\nCan you see any differences in the general trends of these four sets of numbers?\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n10\n\n\n\n8.04\n\n\n\n\n\n\n\n\n\n10\n\n\n\n9.14\n\n\n\n\n\n\n\n\n\n10\n\n\n\n7.46\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.58\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n8\n\n\n\n6.95\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.14\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.77\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.76\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n13\n\n\n\n7.58\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.74\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.50\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.71\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n9\n\n\n\n8.81\n\n\n\n\n\n\n\n\n\n9\n\n\n\n8.77\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n11\n\n\n\n8.33\n\n\n\n\n\n\n\n\n\n11\n\n\n\n9.26\n\n\n\n\n\n\n\n\n\n11\n\n\n\n7.81\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.47\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n14\n\n\n\n9.96\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.10\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.04\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6\n\n\n\n7.24\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.13\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.08\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.25\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n4\n\n\n\n4.26\n\n\n\n\n\n\n\n\n\n4\n\n\n\n3.10\n\n\n\n\n\n\n\n\n\n4\n\n\n\n5.39\n\n\n\n\n\n\n\n\n\n19\n\n\n\n12.50\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n12\n\n\n\n10.84\n\n\n\n\n\n\n\n\n\n12\n\n\n\n9.13\n\n\n\n\n\n\n\n\n\n12\n\n\n\n8.15\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.56\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7\n\n\n\n4.81\n\n\n\n\n\n\n\n\n\n7\n\n\n\n7.26\n\n\n\n\n\n\n\n\n\n7\n\n\n\n6.42\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.91\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n\n5\n\n\n\n5.68\n\n\n\n\n\n\n\n\n\n5\n\n\n\n4.74\n\n\n\n\n\n\n\n\n\n5\n\n\n\n5.73\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy do we need visualizations to help answer our questions?\nIs it not enough to look at numbers in tables?\nTo understand why visualizations are so powerful, it is helpful to remember that to answer a question, we often have to put the data in a format that is easy for us humans to interpret.\nBecause our number systems have only been around for about 5,000 years, we need to assert effort and train ourselves to recognize structure in numerical data.\nVisual systems, on the other hand, have undergone refinement during 500,000,000 years of evolution, so we can instinctively recognize visual patterns and accurately estimate visual properties such as colours and distances.\nPractically, this means that we can arrive at correct conclusions faster from studying visual rather than numerical representations of the same data.\nFor example, have a look at the four sets of numbers in the table on the slide. Can you see the differences in the general trends between these four sets of numbers? This is a slightly modified version of the original, which was put together by statistician Francis Anscombe in the 70s."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "href": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "title": "What is Data Visualization?",
    "section": "Although summary statistics are often useful, they don’t tell the whole story",
    "text": "Although summary statistics are often useful, they don’t tell the whole story\nC is the only set with a different mean and standard deviation\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n\n\n\n\nstd\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n1.15\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummaries, such as the mean and standard deviation, are helpful statistical tools that are often useful for detecting the differences between datasets.\nHowever, since they collapse the data into just a few numbers, statistical summaries can’t tell the whole story about the data and there can be important differences between datasets that summaries fail to reveal.\nHere, the mean and standard deviation indicate that set C is slightly different from the other sets of data in terms of the centre of the sample distribution and the spread of that distribution, while the remaining three sets of data have a similar centre and spread."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "href": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "title": "What is Data Visualization?",
    "section": "Plotting the data immediately reveals patterns in the data",
    "text": "Plotting the data immediately reveals patterns in the data\nWe could not detect these patterns from only looking at the raw numbers or summary statistics\n\n\n\n\n\n\n\n\n\nHumans are not good at detecting patterns in raw numbers, and we don’t have good intuition about how different distributions of data can contribute to identical statistical summaries.\nBut guess what we excel at?\nDetecting visual patterns!\nIt is immediately clear to us how these sets of numbers differ once they are shown as graphical elements instead of textual objects.\nThis is one of the main reasons why data visualization is such a powerful tool for data exploration and communication.\nIn our example here, we would come to widely different conclusions about the behaviour of the data for the four different data sets.\nSets A and C are roughly linearly increasing at similar rates, whereas set B reaches a plateau and starts to drop, and set D has a constant X-value for all numbers except one big outlier."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "href": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "title": "What is Data Visualization?",
    "section": "More examples of plotting versus statistical summaries",
    "text": "More examples of plotting versus statistical summaries\n\nSource: Matejka and Fitzmaurice, 2017\n\nA more recent and dynamic illustration of how graphical representations are much easier for us to interpret compared to statistical summaries, is the Datasaurus GIF from Autodesk’s research team in this slide.\nIt displays several different datasets, all with the same mean, standard deviation and correlation between X and Y, but looking at the data graphically shows us how different these datasets actually are."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "href": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "title": "Aggregations, lines, and layers",
    "section": "Including all the data can hinder visualization of general trends",
    "text": "Including all the data can hinder visualization of general trends\n\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars()\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nThroughout this course we will explore many different datasets, but for now, we will stick to the cars dataset to keep it simple and focus on introducing additional Altair functionality.\nLet’s refresh our memory with this plot from the previous module.\nWe noted that it appears that cars differ in their weight and mileage based on their country of origin. At least the American cars appear to stand out, but it is difficult to see any differences between Europe and Japan.\nVisualizing all data points as in this slide is helpful to detect patterns in the data.\nBut when showing all observations, it can be hard to pick up on general trends in the data, e.g. if there are any differences in the mean weight of cars made in either Japan or Europe.\nTo more effectively visualize such general trends in the data, we can create plots of statistical summaries, such as means and medians.\nIn Altair (and pandas) these are referred to as data aggregations."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "href": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "title": "Aggregations, lines, and layers",
    "section": "Data aggregations are built into Altair",
    "text": "Data aggregations are built into Altair\n\nalt.Chart(cars).mark_point().encode(\n    x='mean(Weight_in_lbs)',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nTo plot the means of weight and mileage, we could use pandas to first calculate the mean values, and then plot the resulting dataframe in Altair.\nThis is powerful since we can access all aggregations built into pandas, but it is a bit verbose for simple common operations, such as the mean.\nFortunately, Altair has shortcuts for plotting simple aggregations where you provide the name of the aggregation together with the name of the column inside a string as in the example in this slide.\nThe Altair documentation includes a table with all available aggregations.\nIn this visualization, we can detect small differences between the means of the Japanese and Europeans cars, which was not discernible when we plotted all the points.\nWhether this difference is big enough to reach a different conclusion than when inspecting the previous plots depends on our application and the purpose of the data exploration."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time",
    "text": "Plotting aggregations to visualize trends over time\n\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n130.0\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n165.0\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n150.0\n3436\n11.0\n1970-01-01\nUSA\n\n\n3\namc rebel sst\n16.0\n8\n304.0\n150.0\n3433\n12.0\n1970-01-01\nUSA\n\n\n4\nford torino\n17.0\n8\n302.0\n140.0\n3449\n10.5\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n401\nford mustang gl\n27.0\n4\n140.0\n86.0\n2790\n15.6\n1982-01-01\nUSA\n\n\n402\nvw pickup\n44.0\n4\n97.0\n52.0\n2130\n24.6\n1982-01-01\nEurope\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n84.0\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n79.0\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n82.0\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nAggregations are often helpful when comparing trends over time, especially when there are multiple groups in the data. In the cars dataset, there is a Year column, indicating when the car was made.\nOften when there is a notion of time in the data, it is interesting to see how values in the dataframe change over time.\nIn this case, we might be interested in knowing whether newer cars are more fuel-efficient than older ones.\nPresumably, they should be, but does it differ depending on where the car was made?\nLet’s find out!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time works well",
    "text": "Plotting aggregations to visualize trends over time works well\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\n\n\n\n\n\n\n\nTo visualize the mean mileage for each year of all cars, we want to perform the aggregation on the Miles_per_Gallon column while leaving the Year column intact.\nAs you can see this plot one value (the mean) for each year in the dataframe.\nHere we can see that the observations in this dataframe span the years 1970-1982 and it does indeed look like the mileage is getting better over time as we expected!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "href": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting all data to visualize trends over time is not effective",
    "text": "Plotting all data to visualize trends over time is not effective\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nAs a comparison with the previous slide, if we instead of the mean would plot all the data points for each year, it would be much more difficult to see the pattern over time as you can see here."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting points to visualize trends over time is not ideal",
    "text": "Plotting points to visualize trends over time is not ideal\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nIf we try to explore the mileage over time while grouping the cars according to their origin, it is a bit difficult to immediately recognize which points belong to which group.\nIn fact, using points for visualizing trends is not ideal, and lines are often preferred as we will see in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting lines to visualize trends over time is ideal",
    "text": "Plotting lines to visualize trends over time is ideal\n\nalt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nOne key advantage of line plots is that they connect all the observations that belong to the same group presenting them as one unified graphical object (one line), which is easy for us to distinguish when looking at the plot instead of trying to connect the dots mentally.\nAnother advantage is that the slope of the line makes it easier to see if the value from one year to another is increasing or decreasing.\nAltair grammar lets us switch from a point plot to a line plot, by only changing mark_point() to mark_line(), and keeping the rest of the code as-is.\nIn this plot, we can clearly compare the mileage trends over time to conclude that cars from all origins improved their mileage, and that the trajectory and mileage values are the most similar between Europe and Japan."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "href": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "title": "Aggregations, lines, and layers",
    "section": "Combining a line with a set of points via layers",
    "text": "Combining a line with a set of points via layers\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\npoint = alt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + point\n\n\n\n\n\n\n\n\nTo augment a line plot, it is sometimes helpful to add point marks for each data point along the line, to emphasize where the observations fall.\nThis is helpful since the line drawn between points could be misleading if we have very few points.\nFor example, if you see a straight line, does that mean there are just two points, one in each corner of the line?\nOr are there ten points spread out all along the line?\nTo combine two different types of graphical marks (line and point in this case), we will use Altair’s layering grammar.\nIn this slide, we start by defining each chart separately:\nfirst a line plot,  then a point plot.\nWe can then use the + (plus) operator to combine the two into a layered chart."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "href": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "title": "Aggregations, lines, and layers",
    "section": "Building upon previous plots can save time when combining charts",
    "text": "Building upon previous plots can save time when combining charts\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point()\n\n\n\n\n\n\n\n\nWe can also create a layered plot by reusing a previous chart definition.\nRather than creating the point plot from scratch, we can start with the line plot, and then invoke the mark_point method.\nWe could also have typed mark_line(point=True), which is a special case for getting points on a line since it is such a common operation, but the layering grammar extends to other plots, so it is more helpful to focus on learning that."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "href": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "title": "Aggregations, lines, and layers",
    "section": "Showing raw values together with the mean is often helpful",
    "text": "Showing raw values together with the mean is often helpful\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWhen we are combing plots in layers, we can not only change the mark, but also the encodings.\nThis way, we can create a layer with one point per observations, and with a line for the average values.\nFor this, we need to use encode again after creating the first plot, to instruct Altair to use the raw values instead of the mean for the points.\n(note that the axis now has two labels, we will see how to change that in a future lecture).\nThis type of visualization is helpful when we want to show both the underlying data and a statistical summary, which is often helpful for elucidating what the data tells us.\nIt is also a good check to make sure nothing unexpected is going on with the raw values as we saw in the introductory example with Anscombe’s quartet."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "href": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "title": "Aggregations, lines, and layers",
    "section": "All encodings of the base chart are propagated unless they are overwritten",
    "text": "All encodings of the base chart are propagated unless they are overwritten\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWe have already seen that the x and y encoding remain the same in any subsequently created plots.\nHere, we’re showing that this also applies to the colour encoding to illustrate that any encoding will be propagated to all layers unless they are specifically overwritten.\nIf we would only have added colour to the point chart, there would still have been a single line instead of three."
  },
  {
    "objectID": "modules/module5/module5-00-module_learning_outcomes.html",
    "href": "modules/module5/module5-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-true_or_false_is_it_effective.html#true-or-false-is-it-effective",
    "href": "modules/module5/module5-02-true_or_false_is_it_effective.html#true-or-false-is-it-effective",
    "title": "1.1. Exercises",
    "section": "True or False: Is it Effective?",
    "text": "True or False: Is it Effective?",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-true_or_false_is_it_effective.html#which-graph-is-effective",
    "href": "modules/module5/module5-02-true_or_false_is_it_effective.html#which-graph-is-effective",
    "title": "1.1. Exercises",
    "section": "Which Graph is Effective?",
    "text": "Which Graph is Effective?\n\n\n\n\n\n\n\n\n\nPlot A\n\n\n\nPlot B",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-04-true_or_false_titles_and_formatting.html",
    "href": "modules/module5/module5-04-true_or_false_titles_and_formatting.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThe penguins that we see time and time again is going to help us practice with formatting in this question.\n\n\n\n\n\n\nFor this question let’s create a stacked histogram of the values in the culmen_depth_mm column for different penguin species.\nRemember in the previous module we discussed that the culmen is also sometimes referred to as the bill and is upper ridge of a bird’s beak. Here is the diagram we showed you in an earlier module that was made by Allison Horst.\n\n\n\n\n\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named base, use the data source penguins_df to make a histogram of the different quantities of penguin species in the data.\nMap the species on the y-axis and the count on the x-axis.\nIn the base plot make sure to give a label to the x-axis. Since the species is categorical, do not set a label for the y-axis.\nDisplay the base plot and take a look at what it’s communicating.\nCreate text by using mark_text() and save this in an object named text. It should have the same x and y mapping as the base plot but this time you want to make sure the count is displayed on the side of each species bar. Make sure it’s centered in alignment and located at dx=10.\nAfter observing the plot create and object named penguin_title using .TitleParams(). In this method, you will need to specify an insightful title, and subtitle, give the title a fontsize of 18, and set the subtitle colour to firebrick.\nRemove the grey box outlining the entire figure by setting the argument strokeWidth in the .configure_view() method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nIn the text plot, are you coding .mark_text(align='center', dx=10)?\nIn the text plot, are you specifying alt.Text('count()'?\nfor the titles formatting are you making sure to use the arguments subtitle, fontSize and subtitleColor?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe base plot of the code above looks like this:",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-04-true_or_false_titles_and_formatting.html#formatting-fun",
    "href": "modules/module5/module5-04-true_or_false_titles_and_formatting.html#formatting-fun",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThe penguins that we see time and time again is going to help us practice with formatting in this question.\n\n\n\n\n\n\nFor this question let’s create a stacked histogram of the values in the culmen_depth_mm column for different penguin species.\nRemember in the previous module we discussed that the culmen is also sometimes referred to as the bill and is upper ridge of a bird’s beak. Here is the diagram we showed you in an earlier module that was made by Allison Horst.\n\n\n\n\n\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named base, use the data source penguins_df to make a histogram of the different quantities of penguin species in the data.\nMap the species on the y-axis and the count on the x-axis.\nIn the base plot make sure to give a label to the x-axis. Since the species is categorical, do not set a label for the y-axis.\nDisplay the base plot and take a look at what it’s communicating.\nCreate text by using mark_text() and save this in an object named text. It should have the same x and y mapping as the base plot but this time you want to make sure the count is displayed on the side of each species bar. Make sure it’s centered in alignment and located at dx=10.\nAfter observing the plot create and object named penguin_title using .TitleParams(). In this method, you will need to specify an insightful title, and subtitle, give the title a fontsize of 18, and set the subtitle colour to firebrick.\nRemove the grey box outlining the entire figure by setting the argument strokeWidth in the .configure_view() method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nIn the text plot, are you coding .mark_text(align='center', dx=10)?\nIn the text plot, are you specifying alt.Text('count()'?\nfor the titles formatting are you making sure to use the arguments subtitle, fontSize and subtitleColor?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe base plot of the code above looks like this:",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-true_or_false_transformations.html#true-or-false-transformations",
    "href": "modules/module5/module5-06-true_or_false_transformations.html#true-or-false-transformations",
    "title": "3.1. Exercises",
    "section": "True or False: Transformations",
    "text": "True or False: Transformations",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-true_or_false_transformations.html#transformations-and-presentations",
    "href": "modules/module5/module5-06-true_or_false_transformations.html#transformations-and-presentations",
    "title": "3.1. Exercises",
    "section": "Transformations and Presentations",
    "text": "Transformations and Presentations",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-true_or_false_transformations.html#using-transformations-in-action",
    "href": "modules/module5/module5-06-true_or_false_transformations.html#using-transformations-in-action",
    "title": "3.1. Exercises",
    "section": "Using Transformations in Action!",
    "text": "Using Transformations in Action!\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThis variation of the Phillipino dataset originally from Kaggle shows the income and expenditure (in PHP) of residents in the Philippines.\n\n\n\n\n\n\nFirst, let’s just plot the income vs education expenditure with no transformations. Let’s make sure we are formatting the axes correctly and determine if we can make any conclusions regarding the relationship between the two variables.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named income_plot, use the data source income_df to make a scatterplot.\nMap the tot_income on the x-axis and education_expenditure on the y-axis.\nSet the opacity of the points to 0.5 and size to 10.\nMake sure to give the x and y-axis labels (with units) and the plot a title.\nThe x and y-axis values should have SI-units.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('tot_income', axis=alt.Axis(format='s'), title='Income (PHP)'))?\nAre you setting alt.Y('education_expenditure', axis=alt.Axis(format='s'), title='Education expenditure (PHP)')?\nAre you using .mark_circle()?\nAre you setting opacity=0.5, size=10 within .mark_circle()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s difficult to draw any clear conclusion on the relationship between these two variables. It might be helpful to transform these axes.\n\n\n\n\n\nLet’s transform the axes now!\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a new plot named income_log_plot create a new scatter plot similar to what we did before.\nMap the tot_income on the x-axis and education_expenditure on the y-axis.\nSet the opacity of the points to 0.5 and size to 10.\nMake sure to give the x and y-axis labels (with units) and the plot a title.\nThe x and y-axis values should have SI-units.\nThis time, transform both the x and y-axes with the appropriate transformation we answered from the multiple-choice question above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('tot_income', axis=alt.Axis(format='s'), title='Income (PHP)'), scale=alt.Scale(type='symlog'))?\nAre you setting alt.Y('education_expenditure', axis=alt.Axis(format='s'), title='Education expenditure (PHP)', scale=alt.Scale(type='symlog'))?\nAre you using .mark_circle()?\nAre you setting opacity=0.5, size=10 within .mark_circle()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-08-true_or_false_color_coordination.html#true-or-false-these-statement-are-either-black-or-white",
    "href": "modules/module5/module5-08-true_or_false_color_coordination.html#true-or-false-these-statement-are-either-black-or-white",
    "title": "4.1. Exercises",
    "section": "True or False: These Statement are Either Black or White",
    "text": "True or False: These Statement are Either Black or White",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-08-true_or_false_color_coordination.html#colour-coordination-quesions",
    "href": "modules/module5/module5-08-true_or_false_color_coordination.html#colour-coordination-quesions",
    "title": "4.1. Exercises",
    "section": "Colour Coordination Quesions",
    "text": "Colour Coordination Quesions",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-08-true_or_false_color_coordination.html#adding-some-colour-to-penguins",
    "href": "modules/module5/module5-08-true_or_false_color_coordination.html#adding-some-colour-to-penguins",
    "title": "4.1. Exercises",
    "section": "Adding some Colour to Penguins",
    "text": "Adding some Colour to Penguins\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe are about to talk our typically black and white penguins and brighten these birds up a bit! Using what we learned in the last 2 sections, let’s see if knowing flipper and body mass length can help us identify the species of penguin.\n\n\n\n\n\n\nLet’s plot the body_mass_g and flipper_length_mm but this time, let’s add a colour and shape channel to the species and explore if there are appears to be anything telling.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named colour_plot, use the data source penguins_df to make a scatter plot (mark_point) with points that are size 10.\nMap the flipper length on the x-axis and the body mass on the y-axis.\nMap the penguin species to both a colour and a shape channel.\nSelect a desired colour scheme, and assign it to the colour channel.\nIn this plot, it might be a good idea to restrict the axis ranges. Select an appropriate domain for both the x and y-axis.\nMake sure you are giving the channels all proper labels and the plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_point(size=10)?\nAre you setting alt.X('flipper_length_mm', scale=alt.Scale(domain=[160, 240]), title=\"Flipper length (mm)\")?\nAre you setting alt.X(''body_mass_g', scale=alt.Scale(domain=[2500, 6500]), title='Mass (grams)')?\nIn the plot, are you coding alt.Color('species', title='Penguin species', scale=alt.Scale(scheme='desired-set-name'))?\nAre you setting alt.Shape('species')?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#true-or-false-colouring-in-the-blank",
    "href": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#true-or-false-colouring-in-the-blank",
    "title": "5.1. Exercises",
    "section": "True or False: Colouring in the Blank",
    "text": "True or False: Colouring in the Blank",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#colouring-by-number-questions",
    "href": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#colouring-by-number-questions",
    "title": "5.1. Exercises",
    "section": "Colouring by Number Questions",
    "text": "Colouring by Number Questions",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#playing-with-colour",
    "href": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#playing-with-colour",
    "title": "5.1. Exercises",
    "section": "Playing with Colour",
    "text": "Playing with Colour\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThe University of British Columbia is based in Vancouver and we are lucky enough to have a relatively mild climate (mild climate, but rainy) but not all cities and towns in British Columbia have this luck. This made us think of a city further north of BC - Kamloops whose climate is more varied. This question will be using the data obtained from the Governement of Canada. The data we have collected is from 2009-2012.\n\n\n\n\n\n\nLet’s observe and visualize the mean monthly temperature of Kamloops and see if there is any relationship between rainfall, the season and temperature.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named temp_plot, use the data source temps_df to make a scatter plot (mark_circle) with points that are size 50.\nMap the date on the x-axis and the total rainfall levels on the y-axis.\nMap the mean temperature to a colour channel and select an appropriate colour scheme. Is a diverging or sequential scheme more appropriate? What is an appropriate mid-point value?\nMake sure you are giving the channels all proper labels and the plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_circle(size=50)?\nAre you setting alt.X('date', title=\"Date\"))?\nAre you setting alt.Y('total_rain_mm',title='rainfall total for the month (mm)')?\nIn the plot, are you coding alt.Color('mean_temp', title=' Mean Temperature', scale=alt.Scale(scheme='blueorange', domainMid=0))?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCan you think of why this might occur?",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#true-or-false-colouring-in-black-or-white",
    "href": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#true-or-false-colouring-in-black-or-white",
    "title": "6.1. Exercises",
    "section": "True or False: Colouring in Black or White",
    "text": "True or False: Colouring in Black or White",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#texting-and-selecting",
    "href": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#texting-and-selecting",
    "title": "6.1. Exercises",
    "section": "Texting and Selecting",
    "text": "Texting and Selecting",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#precipitation-contemplation",
    "href": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#precipitation-contemplation",
    "title": "6.1. Exercises",
    "section": "Precipitation Contemplation",
    "text": "Precipitation Contemplation\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s take a look again at the Government of Canada data that contains the weather in Kamloops from 2009-2012. We left off seeing that precipitation was higher in the hotter months.\n\n\n\n\n\n\nFor the 4 years of data, Let’s find out the total rainfall in each month. So between the years 2009 and 2012, how much precipitation was there in total during all the Januarys, Februarys, etc? Remember that we will have to aggregate values here.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named rain_plot, use the data source temps_df to make a bar plot.\nMap the month on the y-axis and the sum of all the precipitation for each month on the x-axis. Print your chart first and examine which month has the most precipitation.\nColor rain_plot by designating a different colour bar to the month with the highest rainfall.\nMake sure you are giving the x-axis an appropriate label and the plot a title.\nIn a second plot named text_plot, add text to each bar that shows the aggregate precipitation for each month and format it so it includes integer values only. Make sure it is aligned to the left and located 5 units to the right of the bar (use dx for this). Set the text colour as black.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_bar()?\nAre you setting alt.X('sum(total_precipitate_mm)', title=\"Total precipitate per month (mm)\")?\nAre you setting alt.Y('month', sort=list(month_name), title=None)?\nAre you setting color=alt.condition(alt.datum.month == 'May', alt.value('colour1'), alt.value('colour2')?\nAre you setting a title in .properties()?\nIn the text plot, are you coding mark_text(align='left', dx=5)?\nAre you setting text=alt.Text('sum(total_precipitate_mm)', format='d')?\nAre you setting the colour to black using color = alt.value('black')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M5. Designing Plots for Communication**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "href": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nFollow guidelines for best practices in visualization design.\nAdjust axes extents and formatting.\nModify titles of figure elements.\nChoose appropriate color schemes for your data.\nUse pre-made and custom color schemes.\nSelectively highlight and annotate data with color and text.\nDirectly label data instead of using legends."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#charts-without-titles-are-hard-to-interpret",
    "href": "modules/module5/slides/module5_03.html#charts-without-titles-are-hard-to-interpret",
    "title": "Descriptive titles and labels",
    "section": "Charts without titles are hard to interpret",
    "text": "Charts without titles are hard to interpret\n\n\n\nWhy do we need to add chart titles and labels to our plots?\nLet’s find out by looking at an example. To the left, you can see a poorly labelled chart. The y-axis label is not very descriptive, there is no overall chart title and we have even forgotten to include the legend.\nIt is impossible to tell what this figure is showing!"
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#descriptive-titles-make-charts-more-effective",
    "href": "modules/module5/slides/module5_03.html#descriptive-titles-make-charts-more-effective",
    "title": "Descriptive titles and labels",
    "section": "Descriptive titles make charts more effective",
    "text": "Descriptive titles make charts more effective\n\n\n\nIn this slide, we have a chart with a descriptive title that conveys the main take-home message of our visualization. The y-axis is also clearly titled while its unit ($) is embedded in the axis label.\nThis figure makes it immediately clear why we have made this visualization and what question we are trying to answer.\nThis is a major goal when making visualizations: there should be no supplementary text needed to explain why we made the figure and what its main takeaways are.\nProperly used chart and axis titles are a big help to reach this goal.\nIn this slide deck, we will gradually build up to creating a figure like the one, you can see in this slide."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#chart-titles-should-convey-the-main-take-home-message",
    "href": "modules/module5/slides/module5_03.html#chart-titles-should-convey-the-main-take-home-message",
    "title": "Descriptive titles and labels",
    "section": "Chart titles should convey the main take-home message",
    "text": "Chart titles should convey the main take-home message\n\nimport altair as alt\nfrom vega_datasets import data\n\nstocks = data.stocks()\nstock_title = \"Google's stock experiencing heavier fluctuations than competitors\"\nalt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol').properties(height=275)\n\n\n\n\n\n\n\n\nThe title of the chart should clearly convey the take-home message of the figure to the reader. It should answer the question you posed before making the visualization.\nIf you made a more general visualization or answered multiple questions, it is ok with a more general title. Note however such general visualizations are rarer in communication compared to exploration.\nWe could have had a title targeted to a specific time period, such as “Google’s stock outperforms competitors in 2009”, but then we might want to narrow down the date region at least a bit.\nA less effective title here would be something like “Stock prices over time”, which is too general and not very informative."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#subtitles-can-provide-additional-detail",
    "href": "modules/module5/slides/module5_03.html#subtitles-can-provide-additional-detail",
    "title": "Descriptive titles and labels",
    "section": "Subtitles can provide additional detail",
    "text": "Subtitles can provide additional detail\n\nstock_title = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n     subtitle = \"Prices have been surging since 2009, but have still not reached an all-time high\")\nalt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol')\n\n\n\n\n\n\n\n\nIf you want to add additional details you can create a subtitle. Here we use TitleParams to create the main title text and the subtitle which we then pass to the title parameter in Chart."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#titles-can-be-aligned-according-to-the-presentation-context",
    "href": "modules/module5/slides/module5_03.html#titles-can-be-aligned-according-to-the-presentation-context",
    "title": "Descriptive titles and labels",
    "section": "Titles can be aligned according to the presentation context",
    "text": "Titles can be aligned according to the presentation context\n\nstock_title_left = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n     subtitle = \"Prices have been surging since 2009, but have still not reached an all-time high\",\n     anchor='start')\nalt.Chart(stocks, title=stock_title_left).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol')\n\n\n\n\n\n\n\n\nDepending on the context in which we are presenting the figure, it can look more appealing to left-align the title.\nThis is done via the anchor parameter in Altair."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#breaking-titles-into-multiple-lines-can-improve-readability",
    "href": "modules/module5/slides/module5_03.html#breaking-titles-into-multiple-lines-can-improve-readability",
    "title": "Descriptive titles and labels",
    "section": "Breaking titles into multiple lines can improve readability",
    "text": "Breaking titles into multiple lines can improve readability\n\nstock_title_linebreak = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n     subtitle = [\"Prices have been surging since 2009 but have still\", \"not reached the same levels as in late 2007.\"])\nalt.Chart(stocks, title=stock_title_linebreak).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol')\n\n\n\n\n\n\n\n\nIf we have a really long title, we can improve readability by breaking it into multiple lines. Altair converts lists of strings into multiline titles.\nWhen creating a multiline title, it is advisable to try to keep all lines about the same length. Generally, it also looks better if the lines are ordered by length, for example from the longest to the shortest as in this slide.\nFor this chart, the single line subtitle still looks more appealing due to all the whitespace on the sides of the subtitle in this slide, so we will go back to a single-line subtitle in the next slide."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#axis-titles-should-be-capitalized-regular-words-rather-than-dataframe-column-names",
    "href": "modules/module5/slides/module5_03.html#axis-titles-should-be-capitalized-regular-words-rather-than-dataframe-column-names",
    "title": "Descriptive titles and labels",
    "section": "Axis titles should be capitalized regular words rather than dataframe column names",
    "text": "Axis titles should be capitalized regular words rather than dataframe column names\n\nalt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title='Date'),\n    alt.Y('price', title='Price (USD)'),\n    color='symbol')\n\n\n\n\n\n\n\n\nDuring EDA, axis titles etc don’t matter that much, since you are the primary person interpreting them and it is often clear to you what titles mean as long as you have given your dataframe reasonable column names.\nIn communication, however, your plots need to be interpreted by other people, often on their own without your explanation. Setting descriptive titles adds significantly to this interpretability.\nAxis titles should be regular words that are descriptive, capitalized, and contain spaces instead of underscores. Cryptic lower case column names with underscores are not at all effective for communication figures and look unprofessional.\nAny relevant units of measurement can be included in parenthesis to clarify further for the reader or as part of the axis label as we will see later.\nTo set the title for the axes, we use the title parameter in the axis, similar to how we used it in the Chart for the figure title."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#legend-and-axis-titles-are-often-redundant-for-categorical-and-temporal-variable",
    "href": "modules/module5/slides/module5_03.html#legend-and-axis-titles-are-often-redundant-for-categorical-and-temporal-variable",
    "title": "Descriptive titles and labels",
    "section": "Legend and axis titles are often redundant for categorical and temporal variable",
    "text": "Legend and axis titles are often redundant for categorical and temporal variable\n\n# Assigning to a variable for use in the next slide\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('price', title='Price (USD)'),\n    alt.Color('symbol', title=None))\nlines\n\n\n\n\n\n\n\n\nFor axis titles that encode a temporal variable we rarely need a title as it is clear that the x-axis represents time. Here we remove the title text by setting the parameter to None.\nSimilarly, axis and legend titles that denote a categorical variable are often redundant and it is clear what the categories are.\nThanks to Altair’s consistent grammar, we change the title of the legend in the same way that we change the axis titles."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#direct-labelling-is-often-preferred-over-legend-when-applicable",
    "href": "modules/module5/slides/module5_03.html#direct-labelling-is-often-preferred-over-legend-when-applicable",
    "title": "Descriptive titles and labels",
    "section": "Direct labelling is often preferred over legend when applicable",
    "text": "Direct labelling is often preferred over legend when applicable\n\nstock_max_date = stocks[stocks['date'] == stocks['date'].max()]\ntexts = alt.Chart(stock_max_date).mark_text(align='left', dx=2).encode(\n    x='date',\n    y='price',\n    text='symbol',\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nIn this graph, we could label the lines directly instead of relying on the legend text and additional coloured line marks.\nThis has the advantage that we don’t have to go back and forth between the legend and the plot, and avoids issues from matching up the colours incorrectly.\nWe use align to attach the left part of the label to the data point at the end of the line, and then dx (delta x) to add a little whitespace between the label and the end of the line.\nTo show both the lines and text labels, we layer the chart lines that we created in the last slide with the chart texts that we create here."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#to-solve-overlapping-text-labels-we-have-to-manually-specify-their-position",
    "href": "modules/module5/slides/module5_03.html#to-solve-overlapping-text-labels-we-have-to-manually-specify-their-position",
    "title": "Descriptive titles and labels",
    "section": "To solve overlapping text labels we have to manually specify their position",
    "text": "To solve overlapping text labels we have to manually specify their position\n\nstock_max_date.loc[stock_max_date['symbol'] == \"IBM\", 'price'] = 140\nstock_max_date.loc[stock_max_date['symbol'] == \"AMZN\", 'price'] = 110\ntexts = alt.Chart(stock_max_date).mark_text(align='left', dx=2).encode(\n    x='date',\n    y='price',\n    text='symbol',\n    color=alt.Color('symbol', legend=None))\nlines + texts\n\n\n\n\n\n\n\n\nThere is no way to automatically separate the labels in Altair, so we have to manually specify new y-axis values for the text of the overlapping labels.\nHere we modify the dataframe we created in the last slide by setting the value for the IBM text label to 140 and the value for the AMZN text label to 110 so that they are no longer overlapping."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#units-can-be-incorporated-directly-in-the-axis-labels-instead-of-the-axis-title",
    "href": "modules/module5/slides/module5_03.html#units-can-be-incorporated-directly-in-the-axis-labels-instead-of-the-axis-title",
    "title": "Descriptive titles and labels",
    "section": "Units can be incorporated directly in the axis labels instead of the axis title",
    "text": "Units can be incorporated directly in the axis labels instead of the axis title\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('price', title='Price', axis=alt.Axis(format='$')),\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nInstead of writing measurement units in parenthesis in the axis title, they can be incorporated directly into each axis label by setting the axis format.\nYou can see that the dollar sign was prefixed each numerical label on the y-axis, but because we overwrote the default formatting of the axis, it changed the labels to scientific notation instead of standard international units."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#axis-formatting-labels-can-be-combined",
    "href": "modules/module5/slides/module5_03.html#axis-formatting-labels-can-be-combined",
    "title": "Descriptive titles and labels",
    "section": "Axis formatting labels can be combined",
    "text": "Axis formatting labels can be combined\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('price', title='Closing price', axis=alt.Axis(format='$s')),\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nAll Altair’s label format strings can be found here.\nNotes: To revert back to displaying the full number instead of using scientific formatting, we can combine the dollar sign with the format string s, which stands for SI-units.\nNow that we have the units in the label, the title “Price” appear a bit redundant and we can either remove it or (preferably) improve it.\nHere we add more detail to indicate that this is the closing price of each stock.\nIn addition to being used in the x and y-axis, axis formatting can be applied to any aspect of Altair that uses alt.Axis, including legends for colours and sizes.\nOther useful format strings include % for including a percentage sign, e to force a scientific format, d to force integer format, ~ which removes trailing zeros (e.g. 1.0 becomes 1), and , which adds a comma as the thousands separator. All label format strings can be found here."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#the-number-of-axis-ticks-can-be-reduced-to-make-the-plot-less-noisy",
    "href": "modules/module5/slides/module5_03.html#the-number-of-axis-ticks-can-be-reduced-to-make-the-plot-less-noisy",
    "title": "Descriptive titles and labels",
    "section": "The number of axis ticks can be reduced to make the plot less noisy",
    "text": "The number of axis ticks can be reduced to make the plot less noisy\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None, axis=alt.Axis(tickCount=3)),\n    alt.Y('price', title='Closing price', axis=alt.Axis(format='$s')),\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nAltair usually picks a suitable number of axis ticks, but sometimes we might want to tweak this in order to achieve a specific effect, such as a more clean-looking plot.\nHere we reduce the number of ticks along the x-axis to only show three of the years, by setting tickCount=3 in alt.Axis().\nNote that Altair will round the number of ticks to a number that works well with your data, so you might not always get the exact number you ask for (e.g. it wouldn’t make much sense to have 4 ticks here since that would mean the year “2002.5” and “2007.5”)."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#gridlines-can-be-removed-when-they-are-not-helpful",
    "href": "modules/module5/slides/module5_03.html#gridlines-can-be-removed-when-they-are-not-helpful",
    "title": "Descriptive titles and labels",
    "section": "Gridlines can be removed when they are not helpful",
    "text": "Gridlines can be removed when they are not helpful\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None, axis=alt.Axis(tickCount=3, grid=False)),\n    alt.Y('price', title='Closing price', axis=alt.Axis(format='$s')),\n    color=alt.Color('symbol', legend=None))\n\n(lines + texts).configure_view(strokeWidth=0)\n\n\n\n\n\n\n\n\nGridlines are usually helpful for guiding the eye and making exact comparisons and as long as they are faint they don’t distract from the visual overall.\nThere are still situations where we might want to remove them.\nIn our plot on the last slide, we might not like the appearance of the single gridline in the middle and the one really close to the right axis, so we can turn off the vertical gridlines bypassing grid=False to the axis parameter of alt.X.\nTo remove the gray box outlining the entire figure, we can set the strokeWidth of the layered chart."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#font-sizes-can-be-adjusted-for-different-communication-purposes",
    "href": "modules/module5/slides/module5_03.html#font-sizes-can-be-adjusted-for-different-communication-purposes",
    "title": "Descriptive titles and labels",
    "section": "Font sizes can be adjusted for different communication purposes",
    "text": "Font sizes can be adjusted for different communication purposes\n\nstock_title = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n    subtitle=\"Prices have been surging since 2009 but have still not reached the same levels as in late 2007.\",\n    fontSize=18, subtitleColor='steelblue', subtitleFontWeight='bold')\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None, axis=alt.Axis(tickCount=3, grid=False)),\n    alt.Y('price', title='Closing price', axis=alt.Axis(\n        format='$s', labelFontSize=12, titleFontSize=16)),\n    color=alt.Color('symbol', legend=None)).properties(height=275)\n(lines + texts).configure_view(strokeWidth=0)\n\n\n\n\n\n\n\n\nf you are making a figure for the web, the default font sizes in Altair are generally a good choice. They are maybe a little bit on the smaller side of the ideal range, but it is possible to zoom in if really needed.\nIf you are making a figure for print, it is recommended to increase the font sizes to make sure that your figure is readable for the context, you are presenting it in.\nIt is advisable to err on the side of larger rather than smaller, for those members of the audience that have a hard time discerning small text.\nIn this figure, you can see several examples of how to set font sizes for titles and labels, as well as how to change the font colour and weight.\nThis figure does not necessarily look good as a whole, but serves to demonstrate how to set multiple of these properties at once.\nTo learn more about good guidelines for titles and labels, you can read section 22 - 22.2 in the book Fundamentals of Data Visualization."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#colour-choices-can-have-a-profound-impact-on-the-interpretation-of-the-results",
    "href": "modules/module5/slides/module5_07.html#colour-choices-can-have-a-profound-impact-on-the-interpretation-of-the-results",
    "title": "Effective use of colour for categorical data",
    "section": "Colour choices can have a profound impact on the interpretation of the results",
    "text": "Colour choices can have a profound impact on the interpretation of the results\n\n\nIn module 2 we discussed how changing the colour scheme drastically improved a clinical outcome by almost doubling physician’s detection rate of blood vessels regions indicative of potential future heart disease (from 40% to 70%).\nIn this slide deck, we will discuss some of the consideration that goes into evaluating if a colour scheme (also called a colourmap) is suitable for the data you are visualizing."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#colour-can-be-broken-down-into-hue-lightness-and-saturation",
    "href": "modules/module5/slides/module5_07.html#colour-can-be-broken-down-into-hue-lightness-and-saturation",
    "title": "Effective use of colour for categorical data",
    "section": "Colour can be broken down into hue, lightness, and saturation",
    "text": "Colour can be broken down into hue, lightness, and saturation\n\n\nThere are several different ways to represent colours. You might already have heard of RGB (red, green, blue) or CMYK (cyan, magenta, yellow, black) where different amounts of a set of base colours are combined to create all possible colours.\nWhen discussing colours in the context of data visualization, We will be describing them with the parameters “hue”, “saturation” and “lightness”.\nThe left schematic in this slide is a 2D circular representation including only hue and saturation. When we add lightness, this circle grows into a cylinder with lightness as the height.\nOn the next slide, we will break down exactly what each of these three parameters represents."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#hue-lightness-and-saturation-describes-different-properties-of-colours",
    "href": "modules/module5/slides/module5_07.html#hue-lightness-and-saturation-describes-different-properties-of-colours",
    "title": "Effective use of colour for categorical data",
    "section": "Hue, lightness, and saturation describes different properties of colours",
    "text": "Hue, lightness, and saturation describes different properties of colours\n\n\nWe could verbalize the changes we saw in the previous slide in the following manner:\nHue is what we traditionally think of as the “colour”, is it red, blue, etc?\nEach hue can have a varying saturation, which ranges from a dull, greyish appearance to a vibrant fully saturated hue.\nLightness is how bright the colour is. For every hue, it starts at black (no lightness) and ends at white (full lightness).\nHue and lightness are the most important from a data visualization perspective, and we use them for categorical and quantitative data, respectively.\nSaturation is often used more as a stylistic choice to decide whether the colours we use should be muted/desaturated or vivid/saturated."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#hues-are-used-to-distinguish-categorical-values",
    "href": "modules/module5/slides/module5_07.html#hues-are-used-to-distinguish-categorical-values",
    "title": "Effective use of colour for categorical data",
    "section": "Hues are used to distinguish categorical values",
    "text": "Hues are used to distinguish categorical values\n\n\n\nHue is useful to distinguish between categories because it is often relatively easy for us to say that different hues are distinct. We can see that blue, orange, red, etc are different and don’t easily mix them up.\nThe leftmost plot uses different hues to separate the points belonging to different categories. We can quickly identify that there is a total of three distinct colours being used here even without looking at the legend.\nIn the plot to the right we used lightness within a single hue (blue) to label the different categories. Here it is much harder to say how many different categories there are, and even when we have the legend, it is difficult to tell which points are which shade of blue."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#it-is-often-better-to-use-established-colour-schemes-instead-of-making-your-own",
    "href": "modules/module5/slides/module5_07.html#it-is-often-better-to-use-established-colour-schemes-instead-of-making-your-own",
    "title": "Effective use of colour for categorical data",
    "section": "It is often better to use established colour schemes instead of making your own",
    "text": "It is often better to use established colour schemes instead of making your own\n\n\nThere are many different hues we could use to represent our colours and some might not go as well together as others, so how do we decide which ones to use?\nFortunately, we don’t have to design our own combination of colours to use, but can pick from combinations designed by experts to be easy to tell apart and in most cases also suitable for people with colour vision deficiencies.\nThese colour combinations are referred to as colour schemes in Altair, but you might also hear them being called colourmaps or colour palettes.\nIn this slide, you can see some of the colour schemes for categorical values that are built into Altair.\nThe default one is “tableau10” and it was named this way because it was originally designed by the company Tableau but is now one of the most common categorical colour schemes used in data visualization. All Altair colour schemes can be viewed here."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#specifying-colour-schemes-in-altair",
    "href": "modules/module5/slides/module5_07.html#specifying-colour-schemes-in-altair",
    "title": "Effective use of colour for categorical data",
    "section": "Specifying colour schemes in Altair",
    "text": "Specifying colour schemes in Altair\n\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Origin', title=None, scale=alt.Scale(scheme='set1')))\n\n\n\n\n\n\n\n\nYou can change the colour scheme of a plot by specifying its name as a string to the scheme parameter inside alt.Scale.\nTo more easily see the changes we are making to the colours, we also increase the size of all points via the size parameter of the mark."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#redundant-coding-can-make-charts-easier-to-interpret",
    "href": "modules/module5/slides/module5_07.html#redundant-coding-can-make-charts-easier-to-interpret",
    "title": "Effective use of colour for categorical data",
    "section": "Redundant coding can make charts easier to interpret",
    "text": "Redundant coding can make charts easier to interpret\n\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Origin', title=None, scale=alt.Scale(scheme='set1')),\n    shape='Origin')\n\n\n\n\n\n\n\n\nAlthough many of the colour schemes in Altair are designed according to the guidelines for effective colour uses, they can sometimes be difficult to interpret for people with colour vision deficiencies.\nEspecially colour schemes that mix red and green as the one in the previous slide.\nIn addition to using a more suitable colour scheme (such as the default), we could also change the shape of the points for each category.\nAlthough this is technically redundant since the colour is already used for the categorical groups, it can make your visualization more effective since it makes the points more distinct from each other.\nNote that shape= is only available to use with mark_point, not mark_circle, mark_square, etc.\nFor line plots, we could achieve a similar effect by using the strokeDash encoding instead of shape, which together with direct labelling from the previous slide deck can facilitate interpretation of these plots."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#specifying-custom-colours",
    "href": "modules/module5/slides/module5_07.html#specifying-custom-colours",
    "title": "Effective use of colour for categorical data",
    "section": "Specifying custom colours",
    "text": "Specifying custom colours\n\ncolors = ['coral', '#4682b4', 'rebeccapurple']\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Origin', title=None, scale=alt.Scale(range=colors)),\n    shape='Origin')\n\n\n\n\n\n\n\n\nMost of the time it is a good idea to stick to the predefined colour scheme because of the advantages mentioned in the previous slide.\nHowever, sometimes the categories we are representing might have a colour already associated with them, such as political parties or sports teams.\nIn these cases, it is often better to design a custom colour scheme using the colours naturally associated with each category.\nIn Altair we can create a custom colour scheme by passing a list of colours to the range parameter of alt.Scale.\nYou can specify colours either by their HTML/CSS name (such as ‘coral’) or their hex code (such as ‘#4682b4’). All HTML/CSS colour names can be found in the image in this post.\nHex codes are defines over the range #000000 for black (“zero colour”) to #ffffff for white (“full colour”) and are easiest chosen via colour pickers such as this one."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#dont-use-more-than-5-8-distinct-hues-for-categories",
    "href": "modules/module5/slides/module5_07.html#dont-use-more-than-5-8-distinct-hues-for-categories",
    "title": "Effective use of colour for categorical data",
    "section": "Don’t use more than 5-8 distinct hues for categories",
    "text": "Don’t use more than 5-8 distinct hues for categories\n\n\nAlthough many of the categorical colour schemes contain ten or more hues, if is often not a good idea to use all that many because it becomes near impossible to distinguish the different hues from each other.\nThe guidelines on what is too many hues differ between different sources and also depends on your use case. A good rule of thumb is that when you get to around five different hues, you should really consider if this is the best way to represent your data or if you could split it up into multiple visualizations instead.\nIf the data is neatly organized in well-separated clusters, it is possible that you could visualize more than five colours (maybe even ten) effectively, but in data where the datapoints are more mixed, you will rarely if ever, be able to go this high."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#too-many-hues-are-impossible-to-distinguish",
    "href": "modules/module5/slides/module5_07.html#too-many-hues-are-impossible-to-distinguish",
    "title": "Effective use of colour for categorical data",
    "section": "Too many hues are impossible to distinguish",
    "text": "Too many hues are impossible to distinguish\n\n\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Name', title=None))\n\n\n\n\n\n\n\n\nThis is an example of what happens when too many categorical hues are used. In this plot, we can not separate the colours even if we spent a considerable amount of effort studying the chart.\nAs we saw on the last slide, categorical colour schemes have a limited amount of hues so in addition to it being hard to differentiate this many hues in general, it becomes practically impossible in cases where there are more categories than colour hues, since the colour scheme starts repeating as in the chart.\nA better approach here would have been to label specific points of interest directly and keeping the rest as either a single colour or using a categorical variable with fewer values, e.g. by grouping the cars into brands rather than their full model name.\nSince Altair allows for interactive elements, we could also have used the tooltip here as we saw in a previous module."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#redundant-coding-of-bar-charts-can-be-disorienting",
    "href": "modules/module5/slides/module5_07.html#redundant-coding-of-bar-charts-can-be-disorienting",
    "title": "Effective use of colour for categorical data",
    "section": "Redundant coding of bar charts can be disorienting",
    "text": "Redundant coding of bar charts can be disorienting\n\ncars['Brand'] = cars['Name'].str.split().str[0]  # Extract brand from the name column\nchart = alt.Chart(cars).mark_bar().encode(\n    alt.Y('Brand', title=None, sort='x'),\n    alt.X('mean(Horsepower)')).properties(width=200, height=350)\nchart | chart.encode(alt.Color('Brand', legend=None, scale=alt.Scale(scheme='tableau20')))\n\n\n\n\n\n\n\n\nA few slides ago we saw how encoding the same variable as both shape and colour could make our figures more effective although it is technically redundant.\nSimilarly, you might come across bar charts where the author of the visualization has added a distinct colour for each bar.\nThis can work when there are relatively few bars, but it usually does not add anything and can become directly disorienting when there are many bars as in this slide.\nIt is usually preferable to colour all the bars in the same colour (or after another categorical variable, such as “Origin” in this data), and let the axis labels alone identify which category the bar belongs to.\nOne exception to this is if each axis label is broken down into subcategories where each location has multiple bars based on another categorical variable, then colour can help.\nYou can also see that the car brands are not systematically named and we would need to clean this data to unify e.g. ‘vw’, ‘vokswagen’, and ‘volkswagen’. The reason we’re setting the height is just to fit the plot on the slide."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#use-consistent-colouring-between-subplots-even-when-it-is-redundant",
    "href": "modules/module5/slides/module5_07.html#use-consistent-colouring-between-subplots-even-when-it-is-redundant",
    "title": "Effective use of colour for categorical data",
    "section": "Use consistent colouring between subplots even when it is redundant",
    "text": "Use consistent colouring between subplots even when it is redundant\n\nchart = alt.Chart(cars).mark_bar().encode(\n    alt.X('Origin', title=None),\n    alt.Y('mean(Horsepower)'),\n    alt.Color('Origin', title=None))\n(chart | chart.mark_line().encode(alt.X('Year', title=None), alt.StrokeDash('Origin', title=None)))\n\n\n\n\n\n\n\n\nWhen creating a figure that contains several subplots, it is important to be consistent in the colouring between these even if the colouring is redundant in one of the subplots.\nHere we have coloured the bars to match the lines although we could tell the categories only from reading the axis labels.\nIt is important to not use different colours for the same categories between subplots. For example, if we made an additional subplot that only contained Japan and the USA, then we should make sure that these are still coloured in orange and red. Since the default Altair colour scheme will always start with blue, we would need to manually specify the colours in this case."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#understanding-the-periodic-variations-in-the-wikipedia-donations",
    "href": "modules/module5/slides/module5_11.html#understanding-the-periodic-variations-in-the-wikipedia-donations",
    "title": "Annotating with text and colour",
    "section": "Understanding the periodic variations in the Wikipedia donations",
    "text": "Understanding the periodic variations in the Wikipedia donations\n\nimport pandas as pd\nimport altair as alt\n\ndonations = pd.read_csv(\"../../data/donations.csv\", parse_dates=[\"date\"])\nalt.Chart(\n    donations, title=\"Wikipedia donations peak during Christmas\"\n).mark_line().encode(\n    alt.X(\"date\", title=None),\n    alt.Y(\"sum\", axis=alt.Axis(format=\"$s\"), title=\"Amount donated per day\"),\n)\n\n\n\n\n\n\n\n\nRecall this plot of Wikipedia donations from a previous slide deck in this module. We noted that the oscillating pattern might indicate a dependency on a periodic date feature, such as weekday or day of the month."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#most-contributions-are-donated-in-the-middle-of-the-week",
    "href": "modules/module5/slides/module5_11.html#most-contributions-are-donated-in-the-middle-of-the-week",
    "title": "Annotating with text and colour",
    "section": "Most contributions are donated in the middle of the week",
    "text": "Most contributions are donated in the middle of the week\n\nfrom calendar import day_abbr\n\nalt.Chart(donations).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=alt.Axis(format='$s'), title='Total donated amount'))\n\n\n\n\n\n\n\n\nHere we are using the built-in calendar module to get a sorted list of the weekday abbreviations, but we could also have written it out by hand.\nWe can see that most contributions seem to be donated in the middle of the week and the Wed stands out as the day where the highest amount of money is donated.\nTo draw additional attention to this bar, we could use colour to highlight it."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#colour-can-be-used-to-highlight-specific-features-of-a-visualization",
    "href": "modules/module5/slides/module5_11.html#colour-can-be-used-to-highlight-specific-features-of-a-visualization",
    "title": "Annotating with text and colour",
    "section": "Colour can be used to highlight specific features of a visualization",
    "text": "Colour can be used to highlight specific features of a visualization\n\ntop_day = donations.groupby('week_day')['sum'].sum().idxmax()\nalt.Chart(donations).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=alt.Axis(format='$s'), title='Total donated amount'),\n    color=alt.condition(alt.datum.week_day == top_day,\n                          alt.value('coral'),\n                          alt.value('steelblue')))\n\n\n\n\n\n\n\n\nTo add a highlight colour, we could create a new column in our dataframe that has a unique value for the bars we want to highlight and the same value for everything else.\nThen we could use this as a categorical column to colour by via the color encoding.\nThe downside of this is that we need to modify the dataframe, which might not always be desired. It is also clunky when we are computing an aggregation in Altair, such as using this sum here, and we would need to recompute this in pandas.\nBecause of these inconveniences, it is often preferred to use the built-in Altair approach for highlighting by passing a conditional encoding to the color parameter of the chart as we do in this slide.\nConceptually, you can think of alt.condition like this: alt.condition(IF this is true, DO this, ELSE DO this).\nSo here we are checking if the week_day column has the value 'Wed', and if it does we use the 'coral' colour, otherwise, we use the default 'steelblue' colour.\nInstead of typing out 'Wed' each time we calculate the day with the highest sum of donations using pandas and extract it using the idxmax() method, which returns the index of the row with the max value. This way, we can reuse our code in the future even if the top donation day is no long Wednesday.\nWe need to alt.value to tell Altair that we want to use this specific colour name, rather than looking for a column in the dataframe with this name.\nalt.datum is a way to unambiguously access a column name in conditional statements and other Altair computations, so that it is not confused for just that string of letters."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#text-labels-can-be-added-with-custom-annotations",
    "href": "modules/module5/slides/module5_11.html#text-labels-can-be-added-with-custom-annotations",
    "title": "Annotating with text and colour",
    "section": "Text labels can be added with custom annotations",
    "text": "Text labels can be added with custom annotations\n\nchart = alt.Chart(donations).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=alt.Axis(format='$s'), title='Total donated amount'),\n    color=alt.condition(alt.datum.week_day == top_day,\n                          alt.value('coral'),\n                          alt.value('steelblue')))\n(chart\n + chart\n .mark_text(align='left', dx=-125, dy=-15)\n .encode(text=alt.condition(alt.datum.week_day == top_day,\n                            alt.value('Salaries are paid on Wed'),\n                            alt.value(''))))\n\n\n\n\n\n\n\n\nWe can add a custom text annotation to the plot in the same way that we added a custom colour. This annotation could be an explanatory label, for example when an event happened on a time axis, or as the label that we made up for this chart.\nTo add this annotation we use a mark_text in the same way as when we used direct labelling for line graphs a few slide decks ago. We add the text encoding and use dx and dy to position the label relative to the top of the bar."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#text-labels-of-the-values-can-be-added-to-each-bar-to-facilitate-reading-the-exact-value",
    "href": "modules/module5/slides/module5_11.html#text-labels-of-the-values-can-be-added-to-each-bar-to-facilitate-reading-the-exact-value",
    "title": "Annotating with text and colour",
    "section": "Text labels of the values can be added to each bar to facilitate reading the exact value",
    "text": "Text labels of the values can be added to each bar to facilitate reading the exact value\n\nchart + chart.mark_text(align='left').encode(text='sum(sum)')\n\n\n\n\n\n\n\n\nAs we saw in a previous slide deck, it is possible to add text annotations directly to the plots.\nThis is beneficial when we want to communicate the exact value to our audience, and can give the plot a different look and feel.\nThe default formatting is not very easy to read, so let’s use what we learned previously to reformat the label and make this chart more effective."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#text-marks-can-be-formatted-in-the-same-manner-as-axes-labels",
    "href": "modules/module5/slides/module5_11.html#text-marks-can-be-formatted-in-the-same-manner-as-axes-labels",
    "title": "Annotating with text and colour",
    "section": "Text marks can be formatted in the same manner as axes labels",
    "text": "Text marks can be formatted in the same manner as axes labels\n\nchart + chart.mark_text(align='left', dx=2).encode(text=alt.Text('sum(sum)', format='$,d'))\n\n\n\n\n\n\n\n\nalt.Text uses the format parameter directly instead of within alt.Axis. Here we add a thousand separator (,) and round the values to integers (d) to remove the decimals.\nWe also use dx to introduce some whitespace between the bar and the label.\nThis makes the labels easier to read, but since we have thousands of thousands, we could simplify further by using the millions suffix."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#standard-international-units-can-shorten-labels-of-large-values",
    "href": "modules/module5/slides/module5_11.html#standard-international-units-can-shorten-labels-of-large-values",
    "title": "Annotating with text and colour",
    "section": "Standard international units can shorten labels of large values",
    "text": "Standard international units can shorten labels of large values\n\nchart + chart.mark_text(align='left', dx=2).encode(text=alt.Text('sum(sum)', format='$.3~s'))\n\n\n\n\n\n\n\n\nThe s format string changes the values to millions as per the standard international units convention that we discussed earlier.\nWe use .3 to indicate that we want three significant digits for each label, otherwise, they would all be printed with six decimals or so, which is hard to read.\nWe also specify ~, which removes trailing zero, e.g. the top bar says 15 instead of 15.0."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#the-redundant-x-axis-can-be-removed",
    "href": "modules/module5/slides/module5_11.html#the-redundant-x-axis-can-be-removed",
    "title": "Annotating with text and colour",
    "section": "The redundant x-axis can be removed",
    "text": "The redundant x-axis can be removed\n\ntitle = alt.TitleParams(\n    text='Wikipedia receives most donations on Wednesdays',\n    subtitle='Values represent the total amount donated in 2020',\n    anchor='start', dx=26, dy=-5)\nchart = alt.Chart(donations, title=title).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=None),\n    color=alt.condition(alt.datum.week_day == top_day,\n                          alt.value('coral'),\n                          alt.value('steelblue')))\n(chart + chart.mark_text(align='left', dx=2).encode(text=alt.Text('sum(sum)', format='$.3s'))).configure_view(strokeWidth=0)\n\n\n\n\n\n\n\n\nWe can make our chart stand out by styling it further. Here we remove the x-axis, which is now redundant as we have included its information directly in the text annotations.\nWe add a title to the plot with the take-home message and explain what the values are in the subtitle. We anchor the title to the start (left) of the plot and use dx to align it with the bottom of the bars since this often looks more visually appealing for horizontal bar charts.\nWe use dy to add additional whitespace between the subtitle and the topmost bar and remove the grey outline by setting the strokeWidth to 0."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#themes-can-be-used-to-change-the-overall-styling-of-the-chart",
    "href": "modules/module5/slides/module5_11.html#themes-can-be-used-to-change-the-overall-styling-of-the-chart",
    "title": "Annotating with text and colour",
    "section": "Themes can be used to change the overall styling of the chart",
    "text": "Themes can be used to change the overall styling of the chart\n\nalt.themes.enable('dark');\n((chart\n + chart\n  .mark_text(align='left', dx=2)\n  .encode(text=alt.Text('sum(sum)', format='$.3s')))\n .configure_view(strokeWidth=0)\n .configure_title(subtitleColor='white'))\n\n\n\n\n\n\n\nView samples of all themes here.\n\nTo style multiple visual components of our charts in the same command, we can use the built-in themes in Altair. Here we set the theme to dark, which automatically changes the colour of the y-axis labels and chart title.\nUnfortunately, the subtitle colour does not yet change automatically, so we need to change this manually.\nWe could have rewritten the entire plot from the last slide and added subtitleColor to alt.TitleParams, but here we use configure_title instead.\nThe configure_* chart methods are useful when we want to make a modification to an already existing chart without copying and pasting all the code, but in general, it is preferred to change these parameters directly in the main chart code instead you can read this section of the docs to find out more.\nAll the available themes can be shown with alt.themes.names(), and currently, they are ['dark', 'default', 'fivethirtyeight', 'ggplot2', 'latimes', 'none', 'opaque', 'quartz', 'urbaninstitute', 'vox']. You can see samples of what these themes look like here."
  }
]