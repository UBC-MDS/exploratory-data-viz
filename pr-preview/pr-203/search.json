[
  {
    "objectID": "modules/module6/slides/module6_end.html#module-learning-outcomes",
    "href": "modules/module6/slides/module6_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 6",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCraft engaging narratives for your visualizations\nVisualize geographical data\nLink geographical data to dataframes\nLayout plots in panels of a figure grid\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#geographical-file-formats",
    "href": "modules/module6/slides/module6_03.html#geographical-file-formats",
    "title": "Visualizing Geographic Data",
    "section": "Geographical file formats",
    "text": "Geographical file formats\n// This truncated example does not contain all border coordinates for Colorado\n{\n  \"type\": \"Feature\",\n  \"id\": 8,\n  \"properties\": {\"name\": \"Colorado\"},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      [[-106.32056285448942,40.998675790862656],[-106.19134826714341,40.99813863734313],\n       [-105.27607827344248,40.99813863734313],[-104.9422739227986,40.99813863734313],\n       [-104.05212898774828,41.00136155846029],[-103.57475287338661,41.00189871197981],\n       [-106.32056285448942,40.998675790862656]]\n    ]\n  }\n}\n\nSo far, we have sourced all of the data we have visualized using Altair from spreadsheet-like .csv files. We have then worked with the data in Python as tidy data frames.\nTo easily visualize data on maps we will learn about and use new file formats that are designed specifically for geographic data.\nThese are called GeoJSON and TopoJSON. Like .csv’s, they and are saved as plain text files, however, they are formatted differently, and they have specific rules for how store geographic data such as positional coordinates, like latitude and longitude.\nYou can see an example of one here in this slide."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#creating-a-map-in-altair",
    "href": "modules/module6/slides/module6_03.html#creating-a-map-in-altair",
    "title": "Visualizing Geographic Data",
    "section": "Creating a map in Altair",
    "text": "Creating a map in Altair\n\nimport altair as alt\nfrom vega_datasets import data\n\nworld_map = alt.topo_feature(data.world_110m.url, 'countries')\nalt.Chart(world_map).mark_geoshape()\n\n\n\n\n\n\n\n\nThe vega sample data sets contains data sets we can use to create maps for the world and the US. There are stored in the TopoJSON format. We will now demonstrate how we can use such data with Altair.\nTo use the TopoJSON data, we need the alt.topo_feature helper function to allow Altair to correctly parse the TopoJSON file. We then use mark_geoshape to visualize this geographic TopoJSON data in the form of a map.\nBecause, the data contains the border coordinates of each country, we can see these drawn as white lines in the chart on this slide.\nLooking at this map however, you might wonder why Antarctica looks so much bigger than the rest of the world?"
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#changing-the-projection-gives-a-more-accurate-representation-of-areas",
    "href": "modules/module6/slides/module6_03.html#changing-the-projection-gives-a-more-accurate-representation-of-areas",
    "title": "Visualizing Geographic Data",
    "section": "Changing the projection gives a more accurate representation of areas",
    "text": "Changing the projection gives a more accurate representation of areas\n\nalt.Chart(world_map).mark_geoshape().project(type='equalEarth')\n\n\n\n\n\n\n\n\nGiven that the Earth is a sphere it is not entirely straightforward how to represent the areas of the different parts of the world on a two dimensional visualization.\nThe reason that Antarctica looked so big in the previous slide is because of how the sphere is being stretched when it is projected onto a two dimensional visualization surface.\nmercator is often used as the default projection method for maps. However, it causes heavy distortion of the relative areas of land masses, and in particular, this distortion gets much worse closer to the poles.\nFortunately, many people are moving away from using this projection because it gives a distorted impression of what the world looks like. A commonly used alternative is the equalEarth projection. This projection focuses on correctly representing the relative areas of all landmasses.\nSome of the most noticeable differences in this projection are that Africa appears much bigger and Greenland, Antarctica as well as Russia appear notably smaller.\nAfrica is in fact 15x the area of Greenland, this is far far from how the mercator projection draws this - it draws them as roughly the same size."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#the-fill-and-border-colours-of-countries-can-be-changed",
    "href": "modules/module6/slides/module6_03.html#the-fill-and-border-colours-of-countries-can-be-changed",
    "title": "Visualizing Geographic Data",
    "section": "The fill and border colours of countries can be changed",
    "text": "The fill and border colours of countries can be changed\n\nalt.Chart(world_map).mark_geoshape(\n    color='black', stroke='#706545', strokeWidth=1\n).project(type='equalEarth')\n\n\n\n\n\n\n\n\nWe can change the colour of both the filled maps areas and the geographical borders.\nAnd similar to other colour mappings in Altair, we can use either a named colour or and exact hex-code.\nHere we use the named colour black, with the color argument to fill the map areas black, and a hexcode with the stroke argument to change the geographical borders to a grey colour. We also set strokeWidth to 1, so that it is easier to see the country borders."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#we-can-zoom-and-pan-the-map",
    "href": "modules/module6/slides/module6_03.html#we-can-zoom-and-pan-the-map",
    "title": "Visualizing Geographic Data",
    "section": "We can zoom and pan the map",
    "text": "We can zoom and pan the map\n\nalt.Chart(world_map).mark_geoshape(\n    color='#2a1d0c', stroke='#706545', strokeWidth=0.5\n).project(type='equalEarth', scale=500, translate=[140, 610])\n\n\n\n\n\n\n\n\nBy default Altair automatically adjusts the projection so that all the data fits within the width and height of the chart.\nWe can change this by setting custom values for the projections parameters scale, which sets the zoom level, and translate, which sets where to pan to.\nHere we adjust these so that we can zoom in and centre the map on Europe.\nHave patience with yourself and Altair while doing this, as getting the panning and zooming just right can take a bit of fiddling."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#working-with-individual-countries-can-show-regional-details",
    "href": "modules/module6/slides/module6_03.html#working-with-individual-countries-can-show-regional-details",
    "title": "Visualizing Geographic Data",
    "section": "Working with individual countries can show regional details",
    "text": "Working with individual countries can show regional details\n\nstate_map = alt.topo_feature(data.us_10m.url, 'states')\nalt.Chart(state_map).mark_geoshape().project(type='equalEarth')\n\n\n\n\n\n\n\n\nIf we want information on regions within a country, we have to use a geoJSON or topoJSON file that contains this information. The vega demo datasets has such a file for the United States, so we use that to demonstrate how to do this here.\nWe load the data in the same way as before, however, you can see that the equalEarth projection doesn’t seem to work well here.\nUsing it leads to the country being quite small, and not centred. Furthermore, it leads to both Alaska and Hawaii being spaced quite far from the rest of the country."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#there-are-special-projections-for-some-countries-such-as-the-us",
    "href": "modules/module6/slides/module6_03.html#there-are-special-projections-for-some-countries-such-as-the-us",
    "title": "Visualizing Geographic Data",
    "section": "There are special projections for some countries such as the US",
    "text": "There are special projections for some countries such as the US\n\nalt.Chart(state_map).mark_geoshape().project(type='albersUsa')\n\n\n\n\n\n\n\n\nTo fix this, we can use a special projection albersUsa that was created to visualize maps of the United States. It is a much preferred projection when only showing this country.\nYou might recognize the projection from maps that you have seen outside of this course, such as on the news. Of note, is the characteristic placement of Alaska and Hawaii close to the rest of the country."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#colouring-individual-regions-differently",
    "href": "modules/module6/slides/module6_03.html#colouring-individual-regions-differently",
    "title": "Visualizing Geographic Data",
    "section": "Colouring individual regions differently",
    "text": "Colouring individual regions differently\n\n(alt.Chart(state_map).mark_geoshape().encode(\n    color='id:Q')\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nSo far we have seen how to visualize regions with a uniform colour, but often we want to use colour to map values or summary statistics from our data to different geographic regions. How can we do this in Altair?\nAs you can see in this slide, we can use encode together with mark_geojson, the same way we have used it with the other marks. This type of visualization can be thought of as a geographical heatmap and is often referred to as a “choropleth map”.\nTo introduce how we can do this - we will map the states identification number from our topoJSON file we loaded, to the corresponding geographic region for each state. Normally, we would not do this, but instead map some other data to each geographic region. We will do that in the following slides.\nThe 'id' field here comes from the sample topoJSON file. If we opened up and looked at this file, we would find that it contains a field called 'id', which is a numerical identifier for each state in alphabetical order.\nBecause we are not using a pandas dataframe, we mush specify the type of data in the column. Here we are specifying it as a quantitative for demonstration purposes because the legend would become very long if we specified it as ordinal or nominal."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#visualizing-data-from-another-dataframe-on-a-map",
    "href": "modules/module6/slides/module6_03.html#visualizing-data-from-another-dataframe-on-a-map",
    "title": "Visualizing Geographic Data",
    "section": "Visualizing data from another dataframe on a map",
    "text": "Visualizing data from another dataframe on a map\n\nimport pandas as pd\n\nstate_pop = pd.read_csv(\"../../data/us_population_coordinates_asthma-cases.csv\")\nstate_pop[:5]\n\n\n\n\n\n\n\n\nstate\nid\npopulation\nlatitude\nlongitude\nnumber_of_asthma_cases\n\n\n\n\n0\nAlabama\n1\n4863300\n32.7794\n-86.8287\n394634\n\n\n1\nAlaska\n2\n741894\n64.0685\n-152.2782\n50685\n\n\n2\nArizona\n4\n6931071\n34.2744\n-111.6602\n545104\n\n\n3\nArkansas\n5\n2988248\n34.8938\n-92.4426\n225853\n\n\n4\nCalifornia\n6\n39250017\n37.1841\n-119.4696\n2607598\n\n\n\n\n\n\n\n\nSo far we have learned how to visualize maps, but we haven’t really been able to ask and answer any interesting questions.\nAlthough any arbitrary information could be put in a topoJSON, or geoJSON file, they often only contain spatial coordinates. Thus, we often need to link our variables of interest from another data set with the data in the topoJSON, or geoJSON file.\nFor example, we might have a table like this, with the population for each state and wish to visualize it on a map? So how do we link these two tables together?"
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#linking-datasets-together-via-lookups",
    "href": "modules/module6/slides/module6_03.html#linking-datasets-together-via-lookups",
    "title": "Visualizing Geographic Data",
    "section": "Linking datasets together via lookups",
    "text": "Linking datasets together via lookups\n\n(alt.Chart(state_map).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(state_pop, 'id', ['population']))\n.encode(color='population:Q')\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nWe could perform the linkage manually, by adding the relevant fields to the json file, but this would be a tedious and error-prone process.\nThere are some libraries, such as geopandas which can ameliorate this situation, but we could also use Altair directly to save time.\nTo link two datasets together, Altair uses the transform_lookup method to look up the data column we want to use from the dataframe via a shared key column. And then adds it to the plotted data. This process is similar to using merge in pandas.\nYou could see in the previous slide that there exists an ID column and this contains the state IDs in alphabetical order, just like the topoJSON file - and so we can use that for the lookup.\nThe columns we want to fetch from the data frame are passed in a list, and here we have specified only the population, We will use that to colour the states accordingly to how many people live in each state."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#choropleths-can-be-misleading-since-the-area-of-each-region-matters",
    "href": "modules/module6/slides/module6_03.html#choropleths-can-be-misleading-since-the-area-of-each-region-matters",
    "title": "Visualizing Geographic Data",
    "section": "Choropleths can be misleading since the area of each region matters",
    "text": "Choropleths can be misleading since the area of each region matters\n\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size='population')\n(us_map + points).configure_view(stroke=None)\n\n\n\n\n\n\n\n\nOne drawback with choropleth maps is that they rely on the area of each region, even if it is unrelated to the measure we are studying.\nFor example, just because the states in the midwest of the US have a large area, they are very prominent in the choropleth map we made on the last slide although their population is actually quite small.\nOn the other hand, if there was a state that had a small area, but a large population, we might not even see it on the choropleth map. These issues are often discussed around the US election, where different approach are used to illustrate that the weight of each states’ vote is not tied to the geographical area of the state.\nOne effective way to convey this message is to use a map as a background and plot points on top that are scaled according to the measure of interest.\nTo achieve this in Altair, we need one pair of coordinates to plot for each state. For this we can use the columns latitude and longitude which represent the geometric centre of each state).\nWe then plot these coordinates on top of a map using the special longitude and latitude parameters and set the size of the points to be relative the population.\nFinally, we remove the square grey outline by setting the stroke to None.\nNow it is much easier to see that many of the states in Eastern USA have a population several times that of the states in the Midwest, although their area is smaller."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#some-measures-can-be-influenced-by-the-population-size",
    "href": "modules/module6/slides/module6_03.html#some-measures-can-be-influenced-by-the-population-size",
    "title": "Visualizing Geographic Data",
    "section": "Some measures can be influenced by the population size",
    "text": "Some measures can be influenced by the population size\n\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size=alt.Size('number_of_asthma_cases', title='Asthma cases'))\n(us_map + points).configure_view(stroke=None)\n\n\n\n\n\n\n\n\nWhether we are using a choropleth or a map with circular markers, we need to be careful when plotting variables that depend on the population size.\nIn this plot we have plotted the number of people suffering from asthma in each of the states.\nAs you can see, this looks almost identical to the map in the last slide showing the population per state. The reason is that for any condition, a state with more people is likely to show more cases, unless there is a strong dependence on another factor that differs between the states.\nIt would be more interesting to see how many people get asthma per capita, which means dividing the number of asthma cases with the population in each state.\nLet’s do that next!"
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#for-these-measures-it-is-important-to-control-for-the-size-of-population",
    "href": "modules/module6/slides/module6_03.html#for-these-measures-it-is-important-to-control-for-the-size-of-population",
    "title": "Visualizing Geographic Data",
    "section": "For these measures it is important to control for the size of population",
    "text": "For these measures it is important to control for the size of population\n\nstate_pop['asthma_cases_per_capita'] = state_pop['number_of_asthma_cases'] / state_pop['population']\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size=alt.Size('asthma_cases_per_capita', title='Asthma cases'))\n(us_map + points).configure_view(stroke=None)\n\n\n\n\n\n\n\n\nWhen we control for the size of the population in each state, we can see that the appearance of the map is quite different.\nMost state has a rather similar number of asthma cases per capita, differing at most with around 1.5 - 2x.\nIt a bit hard to see the exact with the size of the circles since the scale starts from zero.\nIf these small differences are important, we could set the domain of the size scale in the same way we saw in previous modules how we could adjust the domain for the x and y scales.\nHowever, there is a bigger issue with this visualization. Look at the circles in the Eastern US, many of them are overlapping which makes the chart hard to read.\nWe make all points smaller by setting the range of the size scale, but there would still be a lot of overlap.\nIn these cases, a choropleth map would be a better choice since there won’t be any overlap."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#a-choropleth-map-avoids-overlap-for-large-values-close-to-each-other",
    "href": "modules/module6/slides/module6_03.html#a-choropleth-map-avoids-overlap-for-large-values-close-to-each-other",
    "title": "Visualizing Geographic Data",
    "section": "A choropleth map avoids overlap for large values close to each other",
    "text": "A choropleth map avoids overlap for large values close to each other\n\n(alt.Chart(state_map).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(state_pop, 'id', ['asthma_cases_per_capita']))\n.encode(color='asthma_cases_per_capita:Q')\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nIn this choropleth we can see the values of the states in Eastern US are no longer overlapping so it is easier to see the value of each state.\nWe still have the issue of some states being really small or hard to distinguish, so ideally when using either a choropleth or dots to show values like this, it would be a good idea to complement them with a bar chart in the same figure, which we will see how to do in the next slide deck.\nNote that the colorscale does not start at 0. Remember that this is good for highlighting small important differences, but can also give a misleading impression since difference often appear larger than they really are."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#explicitly-setting-the-colour-scale-to-start-from-zero-is-less-misleading",
    "href": "modules/module6/slides/module6_03.html#explicitly-setting-the-colour-scale-to-start-from-zero-is-less-misleading",
    "title": "Visualizing Geographic Data",
    "section": "Explicitly setting the colour scale to start from zero is less misleading",
    "text": "Explicitly setting the colour scale to start from zero is less misleading\n\n(alt.Chart(state_map).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(state_pop, 'id', ['asthma_cases_per_capita']))\n.encode(color=alt.Color('asthma_cases_per_capita:Q', scale=alt.Scale(zero=True)))\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nA cut of scale is often less of an issue with color than with an axis, since we need to look at the colorbar anyways in order to interpret the different colors.\nHowever, it can still be a good idea to set the scale to explicitly start from zero to more truly represent the data and the relative differences between states.\nWe can do this using alt.Scale(zero=True) as shown in this slide."
  },
  {
    "objectID": "modules/module6/slides/module6_00.html#module-learning-outcomes",
    "href": "modules/module6/slides/module6_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCraft engaging narratives for your visualizations\nVisualize geographical data\nLink geographical data to dataframes\nLayout plots in panels of a figure grid"
  },
  {
    "objectID": "modules/module6/module6-06-true_or_false_concatenating_plots.html#true-or-false-concatenating-plots",
    "href": "modules/module6/module6-06-true_or_false_concatenating_plots.html#true-or-false-concatenating-plots",
    "title": "3.1. Exercises",
    "section": "True or False: Concatenating Plots",
    "text": "True or False: Concatenating Plots",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-true_or_false_concatenating_plots.html#lay-it-all-out",
    "href": "modules/module6/module6-06-true_or_false_concatenating_plots.html#lay-it-all-out",
    "title": "3.1. Exercises",
    "section": "Lay it All Out!",
    "text": "Lay it All Out!\nBringing back the hotel data that we saw from exercise 4, We’ve made a couple of different layouts with 3 visualizations.\n(Attribution: These plots were created using a Kaggle dataset where the data was originally obtained from the article Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-true_or_false_concatenating_plots.html#placing-penguins-properly",
    "href": "modules/module6/module6-06-true_or_false_concatenating_plots.html#placing-penguins-properly",
    "title": "3.1. Exercises",
    "section": "Placing Penguins Properly",
    "text": "Placing Penguins Properly\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe’ve worked with the penguin dataset quite a lot in this course and it only makes sense now to combine some of the plots we’ve made already into one combined presentation.\n\n\n\n\n\n\nHere we have 4 plots that we have made in the previous modules (or similar to these) that we want to combine together so that the first plots lies at the top of the presentation followed by a second row that contains 2 plots side by side and end with a bottom row with the last plot. It should appear something like this:\n\n\n\n\n\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nFrom the given plots mass_density_plot, masss_boxplot, penguin_heatmap and culmen_facet_plot, arrange them so they look like the image above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you specifying culmen_facet_plot first and combining mass_boxplot and penguin_heatmap together with brackets followed by mass_density_plot?\nAre you using the & operator to stack charts vertically and | to align them side by side?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#true-or-false-getting-geo-with-it",
    "href": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#true-or-false-getting-geo-with-it",
    "title": "2.1. Exercises",
    "section": "True or False: Getting Geo With It!",
    "text": "True or False: Getting Geo With It!",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#where-are-we-with-geography",
    "href": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#where-are-we-with-geography",
    "title": "2.1. Exercises",
    "section": "Where Are We, With Geography?",
    "text": "Where Are We, With Geography?\n\n\n\n\n\n\nAttribution",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#geography-with-gapminder",
    "href": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#geography-with-gapminder",
    "title": "2.1. Exercises",
    "section": "Geography with Gapminder",
    "text": "Geography with Gapminder\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe were introduced to the Gapminder dataset in previous modules as well as the assignments as although we have data about the world, we have yet to actually plot it as a map!\nWe have altered this dataset a bit to only include data from 2018 (there should only be 1 row for each country now) and we also added a new id column which contains the ISO 3166-1 numeric code for each country.\n\n\n\n\n\n\nBefore we start plotting the data from the gapminder_df, let’s first make sure we know how to make a map of the world without any statistics.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nLoad the countries TopoJSON file from the vega_datasets library and save it as an object named world_df respectively.\nIn a plot named world_plot, use the data source world_df to make a .geo_shape() visualization with a projection type of equalEarth. Make sure the plot has the height and width dimensions of 580 and 400 respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the method .topo_feature() to load in the lada and selecting countries?\nIn the plot, are you using .mark_geoshape()?\nAre you setting type=\"equalEarth\" within .project()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat we have a map! What if we want to add some statistics though? We have looked at various statistics in the past, but for this question, let’s look at each country’s population density. We want to visualize all the countries and if they are above or below the global median of life expectancy of 72 years (in 2018). This might help us see clearly if there are any particular geographical locations that are higher or lower than the global average.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nLoad 2 sources of data; the gapminder_codes.csv data that contains all the global statistics, and the countries TopoJSON file from the vega_datasets library. Name each data source gapminder_dfand world_df respectively.\nIn a plot named pop_dense_plot, use the data source world_df to make a .geo_shape() visualization that maps the pop_density of each country to a colour channel. Use a colour scheme you find appropriate (we recommend a diverging scheme) with the domain midpoint at the global median (81).\nIn order to combine the two sources, you will need to use transform_lookup() to lookup the two columns pop_density from the gapminder_df data using id as the connecting column.\nFinally, make sure that you are zooming in with a scale of 80 and panning to , respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nIn the plot, are you using .mark_geoshape()?\nIn the plot, are you specifying alt.Color('pop_density:Q', scale=alt.Scale(scheme='blueorange', domainMid=81))?\nAre you setting lookup='id' and from_=alt.LookupData(gapminder_df, \"id\", ['pop_density']) within .transform_lookup()?\nAre you setting scale=80 within .project()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-true_or_false_once_upon_a_time.html",
    "href": "modules/module6/module6-02-true_or_false_once_upon_a_time.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "(Attribution: These plots were created using a Kaggle dataset where the data was originally obtained from the article Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-true_or_false_once_upon_a_time.html#analysis-narrative---short-stories",
    "href": "modules/module6/module6-02-true_or_false_once_upon_a_time.html#analysis-narrative---short-stories",
    "title": "1.1. Exercises",
    "section": "",
    "text": "(Attribution: These plots were created using a Kaggle dataset where the data was originally obtained from the article Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-00-module_learning_outcomes.html",
    "href": "modules/module6/module6-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "href": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "title": "Aggregations, lines, and layers",
    "section": "Including all the data can hinder visualization of general trends",
    "text": "Including all the data can hinder visualization of general trends\n\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars()\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nThroughout this course we will explore many different datasets, but for now, we will stick to the cars dataset to keep it simple and focus on introducing additional Altair functionality.\nLet’s refresh our memory with this plot from the previous module.\nWe noted that it appears that cars differ in their weight and mileage based on their country of origin. At least the American cars appear to stand out, but it is difficult to see any differences between Europe and Japan.\nVisualizing all data points as in this slide is helpful to detect patterns in the data.\nBut when showing all observations, it can be hard to pick up on general trends in the data, e.g. if there are any differences in the mean weight of cars made in either Japan or Europe.\nTo more effectively visualize such general trends in the data, we can create plots of statistical summaries, such as means and medians.\nIn Altair (and pandas) these are referred to as data aggregations."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "href": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "title": "Aggregations, lines, and layers",
    "section": "Data aggregations are built into Altair",
    "text": "Data aggregations are built into Altair\n\nalt.Chart(cars).mark_point().encode(\n    x='mean(Weight_in_lbs)',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nTo plot the means of weight and mileage, we could use pandas to first calculate the mean values, and then plot the resulting dataframe in Altair.\nThis is powerful since we can access all aggregations built into pandas, but it is a bit verbose for simple common operations, such as the mean.\nFortunately, Altair has shortcuts for plotting simple aggregations where you provide the name of the aggregation together with the name of the column inside a string as in the example in this slide.\nThe Altair documentation includes a table with all available aggregations.\nIn this visualization, we can detect small differences between the means of the Japanese and Europeans cars, which was not discernible when we plotted all the points.\nWhether this difference is big enough to reach a different conclusion than when inspecting the previous plots depends on our application and the purpose of the data exploration."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time",
    "text": "Plotting aggregations to visualize trends over time\n\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n130.0\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n165.0\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n150.0\n3436\n11.0\n1970-01-01\nUSA\n\n\n3\namc rebel sst\n16.0\n8\n304.0\n150.0\n3433\n12.0\n1970-01-01\nUSA\n\n\n4\nford torino\n17.0\n8\n302.0\n140.0\n3449\n10.5\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n401\nford mustang gl\n27.0\n4\n140.0\n86.0\n2790\n15.6\n1982-01-01\nUSA\n\n\n402\nvw pickup\n44.0\n4\n97.0\n52.0\n2130\n24.6\n1982-01-01\nEurope\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n84.0\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n79.0\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n82.0\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nAggregations are often helpful when comparing trends over time, especially when there are multiple groups in the data. In the cars dataset, there is a Year column, indicating when the car was made.\nOften when there is a notion of time in the data, it is interesting to see how values in the dataframe change over time.\nIn this case, we might be interested in knowing whether newer cars are more fuel-efficient than older ones.\nPresumably, they should be, but does it differ depending on where the car was made?\nLet’s find out!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time works well",
    "text": "Plotting aggregations to visualize trends over time works well\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\n\n\n\n\n\n\n\nTo visualize the mean mileage for each year of all cars, we want to perform the aggregation on the Miles_per_Gallon column while leaving the Year column intact.\nAs you can see this plot one value (the mean) for each year in the dataframe.\nHere we can see that the observations in this dataframe span the years 1970-1982 and it does indeed look like the mileage is getting better over time as we expected!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "href": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting all data to visualize trends over time is not effective",
    "text": "Plotting all data to visualize trends over time is not effective\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nAs a comparison with the previous slide, if we instead of the mean would plot all the data points for each year, it would be much more difficult to see the pattern over time as you can see here."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting points to visualize trends over time is not ideal",
    "text": "Plotting points to visualize trends over time is not ideal\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nIf we try to explore the mileage over time while grouping the cars according to their origin, it is a bit difficult to immediately recognize which points belong to which group.\nIn fact, using points for visualizing trends is not ideal, and lines are often preferred as we will see in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting lines to visualize trends over time is ideal",
    "text": "Plotting lines to visualize trends over time is ideal\n\nalt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nOne key advantage of line plots is that they connect all the observations that belong to the same group presenting them as one unified graphical object (one line), which is easy for us to distinguish when looking at the plot instead of trying to connect the dots mentally.\nAnother advantage is that the slope of the line makes it easier to see if the value from one year to another is increasing or decreasing.\nAltair grammar lets us switch from a point plot to a line plot, by only changing mark_point() to mark_line(), and keeping the rest of the code as-is.\nIn this plot, we can clearly compare the mileage trends over time to conclude that cars from all origins improved their mileage, and that the trajectory and mileage values are the most similar between Europe and Japan."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "href": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "title": "Aggregations, lines, and layers",
    "section": "Combining a line with a set of points via layers",
    "text": "Combining a line with a set of points via layers\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\npoint = alt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + point\n\n\n\n\n\n\n\n\nTo augment a line plot, it is sometimes helpful to add point marks for each data point along the line, to emphasize where the observations fall.\nThis is helpful since the line drawn between points could be misleading if we have very few points.\nFor example, if you see a straight line, does that mean there are just two points, one in each corner of the line?\nOr are there ten points spread out all along the line?\nTo combine two different types of graphical marks (line and point in this case), we will use Altair’s layering grammar.\nIn this slide, we start by defining each chart separately:\nfirst a line plot,  then a point plot.\nWe can then use the + (plus) operator to combine the two into a layered chart."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "href": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "title": "Aggregations, lines, and layers",
    "section": "Building upon previous plots can save time when combining charts",
    "text": "Building upon previous plots can save time when combining charts\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point()\n\n\n\n\n\n\n\n\nWe can also create a layered plot by reusing a previous chart definition.\nRather than creating the point plot from scratch, we can start with the line plot, and then invoke the mark_point method.\nWe could also have typed mark_line(point=True), which is a special case for getting points on a line since it is such a common operation, but the layering grammar extends to other plots, so it is more helpful to focus on learning that."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "href": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "title": "Aggregations, lines, and layers",
    "section": "Showing raw values together with the mean is often helpful",
    "text": "Showing raw values together with the mean is often helpful\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWhen we are combing plots in layers, we can not only change the mark, but also the encodings.\nThis way, we can create a layer with one point per observations, and with a line for the average values.\nFor this, we need to use encode again after creating the first plot, to instruct Altair to use the raw values instead of the mean for the points.\n(note that the axis now has two labels, we will see how to change that in a future lecture).\nThis type of visualization is helpful when we want to show both the underlying data and a statistical summary, which is often helpful for elucidating what the data tells us.\nIt is also a good check to make sure nothing unexpected is going on with the raw values as we saw in the introductory example with Anscombe’s quartet."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "href": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "title": "Aggregations, lines, and layers",
    "section": "All encodings of the base chart are propagated unless they are overwritten",
    "text": "All encodings of the base chart are propagated unless they are overwritten\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWe have already seen that the x and y encoding remain the same in any subsequently created plots.\nHere, we’re showing that this also applies to the colour encoding to illustrate that any encoding will be propagated to all layers unless they are specifically overwritten.\nIf we would only have added colour to the point chart, there would still have been a single line instead of three."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "href": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "title": "What is Data Visualization?",
    "section": "What is the purpose of visualizing data?",
    "text": "What is the purpose of visualizing data?\nVisualizing data can be used to\n\nAnswer a specific question\nExplore data more generally to generate new questions\n\nTo create an effective visualization, start by\n\nLooking at the data\nThinking about what you want to achieve by making the visualization\nDrawing it out with pen and paper\n\n\nWe often visualize data in order to help us answer a specific question we have about our dataset, but it can also help us generate new questions.\nBefore creating a visualization, it is important that you think about why you are making it, and what you want to achieve from creating this plot.\nIs there a specific question you are trying to answer, like comparing the relationship between two dataframe columns? Or are you creating a plot to help you understand the structure of your data more in general, such as plotting the distribution of each dataframe column?\nIn either case, it can be extremely helpful to draw out your plot with pen and paper first. This helps you think about if the plot you are creating makes sense or if there is another plot better suited for the task at hand.\nDrawing with pen and paper also makes it easier to write the code afterwards, since you clearly know what you are expecting the visualization to look like."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "href": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "title": "What is Data Visualization?",
    "section": "Why bother visualizing data instead of showing raw numbers?",
    "text": "Why bother visualizing data instead of showing raw numbers?\nCan you see any differences in the general trends of these four sets of numbers?\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n10\n\n\n\n8.04\n\n\n\n\n\n\n\n\n\n10\n\n\n\n9.14\n\n\n\n\n\n\n\n\n\n10\n\n\n\n7.46\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.58\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n8\n\n\n\n6.95\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.14\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.77\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.76\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n13\n\n\n\n7.58\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.74\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.50\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.71\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n9\n\n\n\n8.81\n\n\n\n\n\n\n\n\n\n9\n\n\n\n8.77\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n11\n\n\n\n8.33\n\n\n\n\n\n\n\n\n\n11\n\n\n\n9.26\n\n\n\n\n\n\n\n\n\n11\n\n\n\n7.81\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.47\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n14\n\n\n\n9.96\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.10\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.04\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6\n\n\n\n7.24\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.13\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.08\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.25\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n4\n\n\n\n4.26\n\n\n\n\n\n\n\n\n\n4\n\n\n\n3.10\n\n\n\n\n\n\n\n\n\n4\n\n\n\n5.39\n\n\n\n\n\n\n\n\n\n19\n\n\n\n12.50\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n12\n\n\n\n10.84\n\n\n\n\n\n\n\n\n\n12\n\n\n\n9.13\n\n\n\n\n\n\n\n\n\n12\n\n\n\n8.15\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.56\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7\n\n\n\n4.81\n\n\n\n\n\n\n\n\n\n7\n\n\n\n7.26\n\n\n\n\n\n\n\n\n\n7\n\n\n\n6.42\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.91\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n\n5\n\n\n\n5.68\n\n\n\n\n\n\n\n\n\n5\n\n\n\n4.74\n\n\n\n\n\n\n\n\n\n5\n\n\n\n5.73\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy do we need visualizations to help answer our questions?\nIs it not enough to look at numbers in tables?\nTo understand why visualizations are so powerful, it is helpful to remember that to answer a question, we often have to put the data in a format that is easy for us humans to interpret.\nBecause our number systems have only been around for about 5,000 years, we need to assert effort and train ourselves to recognize structure in numerical data.\nVisual systems, on the other hand, have undergone refinement during 500,000,000 years of evolution, so we can instinctively recognize visual patterns and accurately estimate visual properties such as colours and distances.\nPractically, this means that we can arrive at correct conclusions faster from studying visual rather than numerical representations of the same data.\nFor example, have a look at the four sets of numbers in the table on the slide. Can you see the differences in the general trends between these four sets of numbers? This is a slightly modified version of the original, which was put together by statistician Francis Anscombe in the 70s."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "href": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "title": "What is Data Visualization?",
    "section": "Although summary statistics are often useful, they don’t tell the whole story",
    "text": "Although summary statistics are often useful, they don’t tell the whole story\nC is the only set with a different mean and standard deviation\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n\n\n\n\nstd\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n1.15\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummaries, such as the mean and standard deviation, are helpful statistical tools that are often useful for detecting the differences between datasets.\nHowever, since they collapse the data into just a few numbers, statistical summaries can’t tell the whole story about the data and there can be important differences between datasets that summaries fail to reveal.\nHere, the mean and standard deviation indicate that set C is slightly different from the other sets of data in terms of the centre of the sample distribution and the spread of that distribution, while the remaining three sets of data have a similar centre and spread."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "href": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "title": "What is Data Visualization?",
    "section": "Plotting the data immediately reveals patterns in the data",
    "text": "Plotting the data immediately reveals patterns in the data\nWe could not detect these patterns from only looking at the raw numbers or summary statistics\n\n\n\n\n\n\n\n\n\nHumans are not good at detecting patterns in raw numbers, and we don’t have good intuition about how different distributions of data can contribute to identical statistical summaries.\nBut guess what we excel at?\nDetecting visual patterns!\nIt is immediately clear to us how these sets of numbers differ once they are shown as graphical elements instead of textual objects.\nThis is one of the main reasons why data visualization is such a powerful tool for data exploration and communication.\nIn our example here, we would come to widely different conclusions about the behaviour of the data for the four different data sets.\nSets A and C are roughly linearly increasing at similar rates, whereas set B reaches a plateau and starts to drop, and set D has a constant X-value for all numbers except one big outlier."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "href": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "title": "What is Data Visualization?",
    "section": "More examples of plotting versus statistical summaries",
    "text": "More examples of plotting versus statistical summaries\n\nSource: Matejka and Fitzmaurice, 2017\n\nA more recent and dynamic illustration of how graphical representations are much easier for us to interpret compared to statistical summaries, is the Datasaurus GIF from Autodesk’s research team in this slide.\nIt displays several different datasets, all with the same mean, standard deviation and correlation between X and Y, but looking at the data graphically shows us how different these datasets actually are."
  },
  {
    "objectID": "modules/module1/module1-11-what_did_we_just_learn.html",
    "href": "modules/module1/module1-11-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "href": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "title": "3. Aggregations, Lines, and Layers",
    "section": "",
    "text": "3. Aggregations, Lines, and Layers\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "3. Aggregations, Lines, and Layers"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "href": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "title": "2. How can we visualize data?",
    "section": "",
    "text": "2. How can we visualize data?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "2. How can we visualize data?"
    ]
  },
  {
    "objectID": "modules/module1/module1-01-what_is_data_visualization.html",
    "href": "modules/module1/module1-01-what_is_data_visualization.html",
    "title": "1. What is Data Visualization?",
    "section": "",
    "text": "1. What is Data Visualization?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "1. What is Data Visualization?"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\nBy the end of the course, students are expected to be able to:\n\nUse the Altair grammar of graphics to create data visualizations.\nSelect an appropriate visualization for the data.\nPerform exploratory data analysis on a dataset.\nEffectively communicate findings with figures.\nInterpret data visualizations to answer questions and formulate follow-up questions.\n\n\nIn this module, you will learn how to use Altair to create data visualizations, choose the right visualizations for your data, explore datasets, and effectively communicate your analytical findings."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#prerequisites",
    "href": "modules/module0/slides/module0_00.html#prerequisites",
    "title": "Welcome!",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we proceed to Module 1, it is important to make sure you have a solid foundation of coding in Python."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "href": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "title": "Welcome!",
    "section": "Have you taken Programming in Python for Data Science?",
    "text": "Have you taken Programming in Python for Data Science?\nMake sure you are familiar with basic Python programming concepts as they are essential for this course."
  },
  {
    "objectID": "modules/module0/module0-01-data_visualization.html",
    "href": "modules/module0/module0-01-data_visualization.html",
    "title": "1. Data Visualization",
    "section": "",
    "text": "1. Data Visualization\n\nVideoSlides",
    "crumbs": [
      "**M0. Visualization Intro**",
      "1. Data Visualization"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Data Visualization!",
    "section": "",
    "text": "Welcome to Data Visualization!\nThis course is part of the Key Capabilities for Data Science program and covers topics related to data visualization.\nIn this course we will learn how to (and how not to) visualize data. We will learn about the grammar of visualization and how it’s implemented in the “Altair” package to create our figures. In addition to common statistical visualizations, we will learn how to tell stories with data, create geographical visualizations, and bring out plots to life by adding interactive elements. Together, these skills will allow us to create effective data visualizations that strengthen our own exploratory data analysis skills and our ability to communicate insights to others. Select the first module in the sidebar to the left to get started.\nCourse prerequisites: Programming in Python for Data Science"
  },
  {
    "objectID": "modules/module0/module0-02-prerequisite_confirmation.html",
    "href": "modules/module0/module0-02-prerequisite_confirmation.html",
    "title": "1.1. Prerequisite Confirmation",
    "section": "",
    "text": "1.1. Prerequisite Confirmation",
    "crumbs": [
      "**M0. Visualization Intro**",
      "&nbsp;&nbsp; 1.1. Prerequisite confirmation"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module-learning-outcomes.html",
    "href": "modules/module1/module1-00-module-learning-outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "href": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "title": "1.1. Exercises",
    "section": "True or False: Data Visualization",
    "text": "True or False: Data Visualization",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "True or False: Visualization Libraries",
    "text": "True or False: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "title": "2.1. Exercises",
    "section": "Your First Plot",
    "text": "Your First Plot\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s use the same vehicle dataset we saw in the lecture, but visualize the relationship between two different columns.\nThe data has already been imported for you in this exercise.\nHere is what it looks like:\n\n\n\n\n\n\nTasks:\n\nFill out the missing fields in the Altair plot in order to create a scatter plot.\nThe cars’ Horsepower should be on the y-axis and their Weight_in_lbs on the x-axis.\nColor the points by the Origin of the cars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nAre the column names expressed in quotes, e.g. y='Horsepower'?\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "title": "3.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse Altair’s grammar of graphics.\nCreate point and line visualizations in Altair.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "href": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "title": "How Can We Visualize Data?",
    "section": "There are two types of visualization approaches",
    "text": "There are two types of visualization approaches\nWhen learning about data visualization, it is helpful to distinguish between the following two approaches to visualization:\n\nImperative\nDeclarative\n\n\nThere are a plethora of visualization packages in Python.\nThis rich selection can be beneficial but it is also confusing, especially when starting out and trying to decide which package to choose.\nWhen learning about data visualization, it is helpful to distinguish between plotting packages that follow either an imperative or a declarative visualization philosophy."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "href": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "title": "How Can We Visualize Data?",
    "section": "Imperative (low level) plotting focuses on plot mechanics",
    "text": "Imperative (low level) plotting focuses on plot mechanics\n\nFocus on plot construction details.\n\nOften includes loops, low-level drawing commands, etc.\n\nSpecify how something should be done\n\n“Draw a red point for every observation that has value X in column A, a blue point for every observation that has value Y in column A, etc.”\n\nMinute control over plotting details, but laborious for complex visualization.\n\n\nImperative (or low level) plotting packages focus on plot construction details such as how to implement the visualization in terms of for-loops, low-level drawing commands, etc.\nThis approach gives us minute control over what is plotted, but it becomes quite laborious when we need to plot larger dataframes, or create more complex visualizations."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "href": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "title": "How Can We Visualize Data?",
    "section": "The data we will be plotting",
    "text": "The data we will be plotting\n\n\n\n\nCountry\n\n\nArea\n\n\nPopulation\n\n\n\n\n\n\nRussia\n\n\n17098246\n\n\n144386830\n\n\n\n\nCanada\n\n\n9984670\n\n\n38008005\n\n\n\n\nChina\n\n\n9596961\n\n\n1400050000\n\n\n\n\n\nIn the example in the next slide, we will plot the area and the population for the three largest countries in the world to see how they compare. This is the table we are plotting."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of imperative plotting",
    "text": "Example of imperative plotting\n# Pseudocode\ncolors = ['blue', 'red', 'yellow']\nplot = create_plot()\nfor row_number, row_data in enumerate(dataframe):\n    plot.add_point(x=row_data['Area'], y=row_data['Population'], color=colors[row_number])\n\n\n\n\n\n\n\n\n\nFor this example, we will use Python-inspired pseudocode, which is code that is made up and designed so that it is less complex and easier to read than real programming languages.\nThis helps us focus on understanding the concepts of plotting instead of getting hung up on the code syntax details of a particular package.\nYou can see that an imperative approach to plotting this data would be to first create the plot and then loop through the dataframe to add a point for each country one by one.\nTo colour the points, we need to manually create a sequence of colours that we can access inside the loop.\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou can see that one of the countries is bigger than the others, and one of the countries has a much larger population, but without seeing the code, it is not possible to know which colour represents which country.\nWe could add a legend by creating it explicitly and adding one coloured dot per iteration in the loop."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "href": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "title": "How Can We Visualize Data?",
    "section": "Declarative (high level) plotting focuses on the data",
    "text": "Declarative (high level) plotting focuses on the data\n\nFocus on data and relationships.\n\nOften includes linking columns to visual channels.\n\nSpecify what should be done\n\n“Assign colors based on the values in column A”\n\nSmart defaults give us what we want without complete control over minor plotting details.\n\n\nDeclarative (or high level) plotting packages declare links between dataframe columns and visual channels, such as the x-axis, y-axis, colour, etc.\nThis means that you can provide a high-level specification of what you want the visualization to include, and the plot details are handled automatically.\nIn summary, declarative visualization tools let you think about data and relationships, while imperative visualization tools focus on plot construction details."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of declarative plotting",
    "text": "Example of declarative plotting\n# Pseudocode\npoint_plot(data=dataframe, x='Area', y='Population', color='Country')\n\n\n\n\n\n\n\n\n\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou will notice that this time the plot also includes a legend without us having to create it explicitly, which is a common convenience in declarative plotting packages."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "href": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "title": "How Can We Visualize Data?",
    "section": "A high-level grammar of graphics helps us compose plots effectively",
    "text": "A high-level grammar of graphics helps us compose plots effectively\n\nSimple grammatical components combine to create visualizations.\nVisualization grammars often consist of three main components:\n\nCreate a chart linked to a dataframe.\nAdd graphical elements (such as points, lines, etc).\nEncode dataframe columns as visual channels (such as x, etc).\n\n\n# Pseudocode\nchart(dataframe).add_points().encode_columns(x='Area', y='Population', color='Country')\n\nThe declarative plotting concept can be implemented in different ways.\nIn the previous slide, we had a dedicated function for creating the pointplot, and there would be a separate function for creating a lineplot, barplot, etc.\nWith this approach, it is often not easy to combine plots together, unless there is a specific function for that purpose and the three bullets points on this slide are all executed by this single function.\nAnother way to use declarative plotting is via a visualization grammar.\nGenerally, a grammar governs how individual parts come together to compose more complex constructs.\nFor example, a linguistic grammar decides how words and phrases can be combined into coherent sentences. A data visualization grammar determines how to combine individual parts of the plotting syntax to create complete visualization.\nIn the example on this slide, you can see that the three bullet points are now broken down into one main function to create the chart linked to the data, and then we build upon this by adding the graphical elements (add_points()) and the encoding of the columns to properties of this chart (encode_columns()).\nBy combining these three grammatical components in different ways, we can build a wide range of visualizations, without memorizing a unique function for each plot type.\nThanks to this grammatical visualization approach, we also only require minimal changes to our code to change the type of plot."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "href": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "title": "How Can We Visualize Data?",
    "section": "The Python plotting landscape",
    "text": "The Python plotting landscape\n\n\nNow that we know the basic concepts of how data can be visualized, let’s select a Python package and get coding!\nIn this image, you can see the most commonly used Python plotting packages.\nThere are many more, but these are the ones you are the most likely to hear about, so it is good to know that they exist.\nThe text to the left in the image is a legend to explain the colours used for the different Python packages (blue for high level, declarative packages and orange for low-level, imperative packages).\nAs you can see there are several high and low-level language, so how do we chose?\nIn this course we will use Altair, because it is a powerful declarative visualization tool with a clear and consistent grammar that also allows us to add interactive components to our plots, such as tooltips and selections.\nWe have also included some of the most common visualization packages for the web which are built-in Javascript and coloured in white.\nThe reason we mention these is that the Altair library is a little bit of Python code connected to an already existing powerful JavaScript package called VegaLite, which in turns builds on D3, the most dominant visualization package on the web today.\nBy leveraging these well-established JavaScript visualization packages Altair can create plots that work natively on the web and includes interactive features without reinventing the wheel.\nSince Altair and VegaLite are relatively new visualization libraries, they don’t yet support every single plot type out there, but they more than make up for it with their ease of use and support for powerful interactive visualizations, as we will see later."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "href": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "title": "How Can We Visualize Data?",
    "section": "Sample data can be found in Altair’s companion package vega_datasets",
    "text": "Sample data can be found in Altair’s companion package vega_datasets\n\nfrom vega_datasets import data\n\ncars = data.cars()\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\nHorsepower\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n130.0\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n165.0\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n150.0\n3436\n11.0\n1970-01-01\nUSA\n\n\n3\namc rebel sst\n16.0\n8\n304.0\n150.0\n3433\n12.0\n1970-01-01\nUSA\n\n\n4\nford torino\n17.0\n8\n302.0\n140.0\n3449\n10.5\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n401\nford mustang gl\n27.0\n4\n140.0\n86.0\n2790\n15.6\n1982-01-01\nUSA\n\n\n402\nvw pickup\n44.0\n4\n97.0\n52.0\n2130\n24.6\n1982-01-01\nEurope\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n84.0\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n79.0\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n82.0\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nBefore we start visualizing data, we need to select a dataset and often also a question we want to answer.\nAltair works with dataframes in the “tidy” format (which we talked about in the Programming in Python for Data Science course), which means that they should consist of rows with one observation each and a set of named data columns with one feature each (you might also have heard these called fields or variables, but we will stick to columns for clarity).\nIn this course, we will often use data from the vega-datasets package, which has many plot-friendly practice datasets available as Pandas dataframes and can be loaded as demonstrated in this slide. We can use these datasets by importing the data module from the vega_datasets packages as in this slide. Here, our data contains the name of different cars and some attributes relating to each car. There are many interesting questions we could ask from this data set! For our first plot, let’s explore the relationship between how heavy a car is (the Weight_in_lbs column) and how good gas mileage it has (theMiles_per_gallon column).\nBefore starting to code the visualization, take a few seconds and think about what you would expect the relationship between these two columns to look like when you plot it."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "href": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "title": "How Can We Visualize Data?",
    "section": "Adding graphical elements via marks",
    "text": "Adding graphical elements via marks\n\nimport altair as alt\n\nalt.Chart(cars).mark_point()\n\n\n\n\n\n\n\n\nHere we assigned a shorter name (alt) to the Altair library when importing it to save us some typing later. The Altair syntax is similar to the grammar of graphics pseudocode we saw a few slides ago. The fundamental object in Altair is the Chart, which takes a data frame as a single argument, e.g. alt.Chart(cars).\nAfter the chart object has been created, we can specify how the graphical element should look that we use to visualize the data. This is called a graphical mark in Altair, and in this slide, we have used mark_point() to show the data as points.\nSince we have not specified which columns should be used for the x and y axes, we appear to only see one point in this plot since all the data is plotted on top of each other in the same location.\nTo the right of the chart, there is a button with three dots on it. don’t worry about it right now, we will explain what this is for at the end of the chapter."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "href": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "title": "How Can We Visualize Data?",
    "section": "Encoding columns as visual channels",
    "text": "Encoding columns as visual channels\nMapping a dataframe column to the x-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs')\n\n\n\n\n\n\n\n\nTo visually separate the points, we can encode columns in the dataframe as visual channels, such as the axes or colours of the plot.\nHere, we encode the column Miles_per_Gallon as the x-axis. For Pandas data frames, Altair automatically determines an appropriate data type for the mapped column, which in this case is quantitative (or numerical) and shows the numbers under the axis.\nYou can see that there are several short black lines spread out evenly on the x-axis. These are called axis ticks and help us see where the values of this dataframe column lie along the axis.\nThe faint gray lines are called grid lines and extend the locations of the axis ticks so that it is easy to compare their position to the points.\nThis is particularly useful when the points might be further away from the axis ticks, such as in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the y-scale",
    "text": "Mapping a dataframe column to the y-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nBy spreading out the data along both the x and y-axis, we can answer our initial question about the relationship between car weight and gas mileage. as it appears that the heavier cars are the ones that have the poorest mileage.\nAlthough we might have expected this to be the case, visualizing all the data points also provides information on the nature of the relationship between weight and mileage.\nIt appears that the x-y points don’t simply follow a straight line, but rather a curved line that where the mileage drop quickly when moving away from the lightest cars, but then decreases more slowly throughout the remainder of the data.\nThis rich, easily interpretable display of information is one of the main advantages of visualizing data and later in the course, we will talk more about the different type of relationships, such as linear, exponential, etc."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a numerical dataframe column to the colour scale",
    "text": "Mapping a numerical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Horsepower')\n\n\n\n\n\n\n\n\nIs there a relationship between horsepower and car weight, or fuel-efficiency?\nTo enrich this display of information further, we can colour the points according to a column in the dataframe. When we encode a column as the colour channel Altair will automatically figure out an appropriate colour scale to use, depending on whether the data is numerical, categorical, etc. Here we have indicated that we want to colour the points according to the car’s horsepower, which indicated how powerful its engine is.\nWe can see that the heavier cars have more powerful engines, than the lighter ones, but when using colour for a numerical comparison like this, makes it is harder to tell whether the relationship follows a straight line or is of another nature, so this encoding is mostly useful as an approximate indication of the horsepower.\nWe can also observe a relationship between the horsepower of a vehicle and the fuel efficiency. It appears that cars with greater horsepower (the points with a darker shade of blue) are less efficient with their fuel since miles per Gallon is much lower.\nIn the next module, we will learn more in detail about which encodings are most suitable for different comparisons."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a categorical dataframe column to the colour scale",
    "text": "Mapping a categorical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nIn the previous slide, a continuous, gradually increasing colour scale was used to visualize the gradual increase in the numerical column Horsepower. In this slide, we instead chose to colour the points per the categorical column Origin (where the car was made).\nAs you can see, Altair detects that this column contains categorical data (with the help of pandas) and picks a different colour scale to facilitate distinction between the categories. As in the previous slide,\nAltair automatically adds a helpful legend, and we can see that the heavier, more powerful cars are primarily manufactured in the US, while the lighter more fuel-efficient ones are manufactured in Europe and Japan (remember that this is true for this particular dataset, and not necessarily all cars)."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the shape scale",
    "text": "Mapping a dataframe column to the shape scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin')\n\n\n\n\n\n\n\n\nAlthough Altair’s colour scales are designed to be effective and easy to interpret, we can make the categories in our plot even more distinct by encoding the same categorical column as both colour and shape.\nThis also makes visualizations much easier to interpret and understand for anyone with visual colour deficiency (about 10% of the population). We will talk more in-depth about colour theory in a later module."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the size scale",
    "text": "Mapping a dataframe column to the size scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nSometimes a visualization tries to do too much. In this example, we have added the size channel to indicate the engine power.\nAlthough Altair elegantly handles the dual legends, it is difficult for us to discern useful information from this plot. If you go back to the plot where we encoded weight in the colour channel, you can see that the plot is much clearer.\nLater we will learn more about how to efficiently load a visualization with an appropriate amount of information, and what the research indicates regarding which visual channels are the most efficient for communicating information visually."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "href": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "title": "How Can We Visualize Data?",
    "section": "The action button can be used to save the plot",
    "text": "The action button can be used to save the plot\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nThis is the same visualization as from the last slide, and we will just use it as an example.\nThe button to the right of the chart with three dots on it is called the “action button”. and clicking it will bring up a menu.\nThe first two items in ’s menu can be used to save the chart, either in an image-based PNG-format or a text-based SVG-format.\nWe will also be learning about programmatic ways to save our charts later in the course.\nThe last three menu items relate to the library VegaLite, which is what we mentioned Altair is built upon, but we will not be using these in this course."
  },
  {
    "objectID": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 1",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse the grammar of graphics presented here.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module6/module6-01-telling_stories_with_visualization.html",
    "href": "modules/module6/module6-01-telling_stories_with_visualization.html",
    "title": "1. Telling Stories with Visualization",
    "section": "",
    "text": "1. Telling Stories with Visualization\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "1. Telling Stories with Visualization"
    ]
  },
  {
    "objectID": "modules/module6/module6-03-visualizing_geographical_data.html",
    "href": "modules/module6/module6-03-visualizing_geographical_data.html",
    "title": "2. Visualizing geographical data",
    "section": "",
    "text": "2. Visualizing geographical data\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "2. Visualizing geographical data"
    ]
  },
  {
    "objectID": "modules/module6/module6-05-figure_layouts.html",
    "href": "modules/module6/module6-05-figure_layouts.html",
    "title": "3. Figure Layouts",
    "section": "",
    "text": "3. Figure Layouts\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "3. Figure Layouts"
    ]
  },
  {
    "objectID": "modules/module6/module6-07-what_did_we_just_learn.html",
    "href": "modules/module6/module6-07-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#how-to-tell-a-data-story",
    "href": "modules/module6/slides/module6_01.html#how-to-tell-a-data-story",
    "title": "Telling stories with visualizations",
    "section": "How to tell a data story",
    "text": "How to tell a data story\n\nPeak your audience’s interest\nMake the reader curious about the next figure\nPresent facts in an engaging way without hyperbole\nTailor it to the audience you have in mind\n\n\nAn effective story often peaks the readers’ interest up front, and makes them want to learn more. To do this, we could start with a striking figure, an important problem that begs for a solution, or reveal data that challenges the reader’s previous knowledge.\nWhen making a data story exciting it is important that is remains based in fact. We do not want our story to resemble headlines of a clickbait article.\nWhen telling a story, it is also important to tailor it to the audience and context. This ensures that it is of the right technical difficulty and detail.\nTo practice storytelling, we will explore an example based on articles on deforestation from Our World in Data."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#a-tail-of-global-deforestation",
    "href": "modules/module6/slides/module6_01.html#a-tail-of-global-deforestation",
    "title": "Telling stories with visualizations",
    "section": "A tail of global deforestation",
    "text": "A tail of global deforestation\n\nimport pandas as pd\nimport altair as alt\n\nforest_loss = pd.read_csv('../../data/global-forest-loss.csv', parse_dates=['decade'])\ntitle = 'Forest loss is still increasing rapidly world wide'\nalt.Chart(forest_loss, title=title).mark_line().encode(\n    alt.X('decade', title=''),\n    alt.Y('cumulative_hectar_lost_millions',\n            title='Cumulative lost forest area (million ha)'))\n\n\n\n\n\n\n\n\nAs we can see in this slide, the total global forest loss during the last 300 years is about 1.5 billion hectares. That’s almost twice the area of Australia!\nTo put this into a historical perspective the world has lost 1/6 of its forest in the last 100 years, which is as much as in the previous 9000 years combined.\nAlthough we can see that global deforestation has been slowing down since the 1980s, it is still progressing at an unsustainable rate.\n95% of the deforestation today occurs in tropical regions. This is particularly alarming given that trees in the tropical rain forests are not easily replaced after they are cut down."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#half-of-the-tropical-deforestation-is-localized-to-only-two-countries",
    "href": "modules/module6/slides/module6_01.html#half-of-the-tropical-deforestation-is-localized-to-only-two-countries",
    "title": "Telling stories with visualizations",
    "section": "Half of the tropical deforestation is localized to only two countries",
    "text": "Half of the tropical deforestation is localized to only two countries\n\ntop_deforestation_regions = pd.read_csv('../../data/region-share-tropical-deforestation.csv')\ntitle = 'Brazil and Indonesia account for almost half of global deforestation'\nalt.Chart(top_deforestation_regions, title=title).mark_bar().encode(\n    x='Share of commodity-driven deforestation (%)',\n    y=alt.Y('Region', title='', sort='x'))\n\n\n\n\n\n\n\n\nPermanent loss of forest (or “deforestation”) is a big problem that leads to species extinction, land erosion, and accelerates climate change.\nAlthough the consequences of deforestation are of global impact, we can see in this chart that forest loss is not evenly distributed across the world.\nIn particular, Brazil and Indonesia stand. These the two countries account for roughly half of the commodity-driven deforestation around the world.\nNotably, this chart only shows deforestation that is driven by commodities, such as the need for new pastures for cattle or fields to grow crops, but this accounts for most of the tropical deforestation.\nIt would be easy to jump to conclusions upon seeing a chart like this and only blame the countries with high local deforestation rates, but it that really fair?\nHow much of this deforestation is really driven by local needs? And how much is due to exports to other countries?"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#a-large-part-of-deforestation-is-driven-by-exported-commodities",
    "href": "modules/module6/slides/module6_01.html#a-large-part-of-deforestation-is-driven-by-exported-commodities",
    "title": "Telling stories with visualizations",
    "section": "A large part of deforestation is driven by exported commodities",
    "text": "A large part of deforestation is driven by exported commodities\n\ndeforestation_exported = pd.read_csv('../../data/share-deforestation-exported.csv', parse_dates=['Year'])\ntitle = 'Exported commodities contribute heavily to deforestation'\nalt.Chart(deforestation_exported, title=title).mark_line().encode(\n    alt.X('Year', title=''),\n    alt.Y('share_deforestation_exported', title='Exported deforestation (%)'),\n    color='Region')\n\n\n\n\n\n\n\n\nThis chart shows the percentage share of deforestation that is due to exported goods from 2005 to 2013 for Brazil and Indonesia.\nAs we can see, a large part of the deforestation in both countries is driven by the demand from other countries. This is most striking in Indonesia, where the materials from around half the country’s deforestation ends up in exported goods.\nSo far, this story has shown us that global forest areas are at an all time low and likely still shrinking. Much of the deforestation appears to be localized to just a few countries, yet it is driven by global demands for forest products.\nThis could be the end of our story if the main narrative we want to communicate is that deforestation is truly a global problem that needs to be solved through international collaborations.\nHowever, our story seems to leave some questions unanswered that our audience will likely be asking, such as which are the commodities that drive most of the deforestation? Given that we have data to answer this question, let’s not end our story here!"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#demand-for-beef-is-the-biggest-reason-for-deforestation-in-brazil",
    "href": "modules/module6/slides/module6_01.html#demand-for-beef-is-the-biggest-reason-for-deforestation-in-brazil",
    "title": "Telling stories with visualizations",
    "section": "Demand for beef is the biggest reason for deforestation in Brazil",
    "text": "Demand for beef is the biggest reason for deforestation in Brazil\n\nbrazil_drivers = pd.read_csv(\"../../data/drivers-deforestation_2003-2013_brazil.csv\")\ntitle = \"Cattle pasture was the biggest deforestation driver in Brazil 2003-2013\"\nalt.Chart(brazil_drivers, title=title).mark_bar().encode(\n    alt.X(\"deforestation_hectares\", title=\"Deforested area (ha)\"),\n    alt.Y(\"driver\", title=\"\", sort=\"x\"),\n)\n\n\n\n\n\n\n\n\nThis slide shows the biggest drivers of deforestation in Brazil between the years 2003 and 2013.\nWe can see that loss of forest is dominated by the demand for beef, which leads to permanent clearing of forest to create pastures for cattle grazing.\nThere is also a smaller contributions from small scale clearings, fires, and commercial crops. Small scale clearings results in land used for combination of purposes such as residencies, orchards, croplands, and pastures.\nImportantly, our data does not contain information about how much of each commodity is due to demand outside Brazil, so we should refrain from drawing conclusions about this. However, export data for each commodity would be useful data to collect next if we were aiming to explore our story in this direction.\nAlthough beef is the major contributor to rain forest deforestation, it could be the case that our demand for more food has simply increased and cattle herds are an effective use of land to create food for human consumption. Let’s flip to the next slide to find out!"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#beef-is-highly-inefficient-use-of-land-to-generate-calories",
    "href": "modules/module6/slides/module6_01.html#beef-is-highly-inefficient-use-of-land-to-generate-calories",
    "title": "Telling stories with visualizations",
    "section": "Beef is highly inefficient use of land to generate calories",
    "text": "Beef is highly inefficient use of land to generate calories\n\nland_use = pd.read_csv('../../data/land-use-per-kcal.csv')\ntitle = 'Beef require the most land per 1000 kcal of food generated'\nalt.Chart(land_use, title=title).mark_bar().encode(\n    alt.X('Land use per 1000kcal (m2)'),\n    alt.Y('Commodity', sort='x', title=''))\n\n\n\n\n\n\n\n\nThe plot in this slide reveals that raising cattle for the purpose of beef production is one of the most inefficient ways to produce food for human consumption.\nArmed with this knowledge (and the data to back it up), we could suggest that one way to decrease deforestation in Brazil may be to decrease the global demand for beef, while increasing the demand for other protein-rich foods that can be grown in Brazil in a more efficient way.\nTogether with the large demand for beef products this inefficient use of land creates an unfortunate situation in Brazil where a lot of tropical forest is being cut down to make room for new pastures.\nWhen telling a story, it is important to not jump to conclusions or suggest that solutions to problems are simpler than what they might really be.\nSo far we have seen that beef is a major contributing factor to deforestation in Brazil, but there are many more aspect of the food production chain that we have not considered.\nChanging beef for other products could be highly beneficial, but it could also be challenging and costly up front to implement. In telling this story, it would be important to also include these uncertainties and potential challenges.\nLet’s continue our story by looking at the same breakdown for Indonesia, is beef production the biggest issue there as well?"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#palm-oil-is-the-biggest-contributor-to-deforestation-in-indonesia",
    "href": "modules/module6/slides/module6_01.html#palm-oil-is-the-biggest-contributor-to-deforestation-in-indonesia",
    "title": "Telling stories with visualizations",
    "section": "Palm oil is the biggest contributor to deforestation in Indonesia",
    "text": "Palm oil is the biggest contributor to deforestation in Indonesia\n\nindonesia_drivers = pd.read_csv('../../data/drivers-deforestation_2003-2013_indonesia.csv')\ntitle = 'Palm oil was the biggest contribtutor in Indonesia 2003-2013' \nalt.Chart(indonesia_drivers, title=title).mark_bar().encode(\n    alt.X('deforestation_hectares', title='Deforested area (ha)'),\n    alt.Y('driver', title='', sort='x'))\n\n\n\n\n\n\n\n\nThis slide shows the biggest drivers of deforestation in Indonesia between the years 2003 and 2013.\nHere, we see that most of the deforested land in Indonesia is used for palm oil plantations. Much of deforested land is also used for small scale clearings, timber plantations, and grasslands.\nAgain, it is important to remember that we don’t have the data for how much of each commodity is exported, so we cannot make any claims about this.\nPerhaps you have have read or heard negative things about palm oil in the past? It has been of focus of late in the media, due to its link to tropical deforestation.\nFrom this chart alone, we might want to recommend that decreasing palm oil production might be a good intervention to reduce deforestation in Indonesia.\nHowever, if this were to be done, we would need another oil crop would need to take its place to keep up with the world’s demand for vegetable oils.\nLet’s explore how efficient palm oil and its alternatives are when it comes to land use versus yield."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#palm-oil-is-the-most-efficient-use-of-land-for-vegetable-oil-production",
    "href": "modules/module6/slides/module6_01.html#palm-oil-is-the-most-efficient-use-of-land-for-vegetable-oil-production",
    "title": "Telling stories with visualizations",
    "section": "Palm oil is the most efficient use of land for vegetable oil production",
    "text": "Palm oil is the most efficient use of land for vegetable oil production\n\noil_land_use = pd.read_csv('../../data/area-land-needed-to-global-oil.csv')\ntitle = 'Palm trees are a the most efficient oil crop'\nalt.Chart(oil_land_use, title=title).mark_bar().encode(\n    alt.Y('Commodity', title='', sort='x'),\n    alt.X('Area needed to meet global vegetable oil demand (ha)'))\n\n\n\n\n\n\n\n\nThis chart shows how many hectares would be needed for the crops of common vegetable oils to meet the entire world’s oil demands.\nIt turns out that palm oil is the most efficient use of land for the amount of oil produced! For example, if we wanted to replace it with olive oil, we would need almost 10x the land to do so!\nSo does it make sense for Indonesia to keep clearing forests and creating more palm plantations because they are the most efficient oil crop?\nNo, our conclusions cannot stop here. Things are not so simple. The type of land where the oil crop grows also matters.\nReplacing tropical forests containing rich biodiversity with palm oil plantations has a more severe, negative impact on the environment compared to changing the type of oil crops being grown on land that has already been deforested and used for agriculture elsewhere in the world.\nTherefore it is important that palm oil plantages are grown in a sustainable way that is compatible with preserving the tropical forests in Indonesia.\nJust as with Brazil and it’s use of pasture from deforested land to raise cattle for beef, the story of palm oil is more complex then we can illustrate in a single visualization."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#summary-and-recap",
    "href": "modules/module6/slides/module6_01.html#summary-and-recap",
    "title": "Telling stories with visualizations",
    "section": "Summary and recap",
    "text": "Summary and recap\n\nPeak your audience’s interest\nMake the reader curious about the next figure\nPresent facts in an engaging way without hyperbole\nTailor it to the audience you have in mind\n\n\nThis slide recaps the main points about how to tell an effective story.\nWhen writing a data narrative, it can be effective to summarize what you have said in the end. This doesn’t have to involve showing the plots again, and you could choose to highlight some of the key messages in text.\nOur story of deforestation drivers in Indonesia and Brazil has informed our audience about the main reasons why tropical forests are being cut down today.\nWe tried peaking the reader’s interest by illustrating the scale of the problem in the beginning and then delved deeper into both areas that have been completely new to them and topics they might have read about previously.\nWe also made sure to state any caveats where our visualizations did not intend to reveal the full complexity of the situation, but highlight a few main findings.\nIf we evoked your curiosity and you want to learn more about this topic, you can visit this article about deforestation drivers from Our World in Data, which also reviews the latest research in this topic."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#recreating-the-chart-from-last-slide-deck",
    "href": "modules/module6/slides/module6_05.html#recreating-the-chart-from-last-slide-deck",
    "title": "Figure Composition",
    "section": "Recreating the chart from last slide deck",
    "text": "Recreating the chart from last slide deck\n\nimport altair as alt\nimport pandas as pd\nfrom vega_datasets import data\n\nstate_map = alt.topo_feature(data.us_10m.url, \"states\")\nstate_pop = pd.read_csv(\"../../data/us_population_coordinates_asthma-cases.csv\")\nstate_pop[\"asthma_cases_per_capita\"] = (\n    state_pop[\"number_of_asthma_cases\"] / state_pop[\"population\"]\n)\nchoropleth = (\n    alt.Chart(state_map)\n    .mark_geoshape()\n    .transform_lookup(\n        lookup=\"id\", from_=alt.LookupData(state_pop, \"id\", [\"asthma_cases_per_capita\"])\n    )\n    .encode(\n        color=alt.Color(\"asthma_cases_per_capita:Q\", title=\"Asthma cases per capita\")\n    )\n    .project(type=\"albersUsa\")\n    .properties(width=500, height=150)\n)\nchoropleth\n\n\n\n\n\n\n\n\nOn this slide we are recreating the choropleth pointplot map from the end of the last slide deck. We are saving it as an object so that we can use it to practice laying out plots together in a panel on the following slides.\nWe set the width of this map because we will be combining it with other figures later and we want them all to be of the same width for the figure panel to look aesthetically pleasing."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#a-barchart-is-able-to-represent-relative-differences-more-precisely",
    "href": "modules/module6/slides/module6_05.html#a-barchart-is-able-to-represent-relative-differences-more-precisely",
    "title": "Figure Composition",
    "section": "A barchart is able to represent relative differences more precisely",
    "text": "A barchart is able to represent relative differences more precisely\n\nbars = (alt.Chart(state_pop).mark_bar().encode(\n    alt.X('state', sort='-y', title=''),\n    alt.Y('asthma_cases_per_capita', title='Asthma cases per capita'))\n    .properties(width=500, height=75))\nbars\n\n\n\n\n\n\n\n\nAt the end of the last slide deck we mentioned that it would good to couple our map with a bar char since this would make it easier to compare the relative differences between the states more precisely.\nHere we create that bar chart and as you can see, we can now tell apart small differences between the states and we are able to clearly see the values also for states with small areas, such as Rhode Island which is barely visible on the map.\nWhile having the labels on the x-axis makes them harder to read it will make our bar plot fit in better with the map in the figure layout, which is why we have opted for this encoding here.\nWe’re setting a pretty low height so that this chart will work well in the multi-panel figures we are creating in later on in this slide deck."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#placing-plots-next-to-each-other-allows-us-to-make-direct-comparisons",
    "href": "modules/module6/slides/module6_05.html#placing-plots-next-to-each-other-allows-us-to-make-direct-comparisons",
    "title": "Figure Composition",
    "section": "Placing plots next to each other allows us to make direct comparisons",
    "text": "Placing plots next to each other allows us to make direct comparisons\n\n# alt.vconcat(choropleth, bars)\nchoropleth & bars\n\n\n\n\n\n\n\n\nTo place these two plots in a vertical layout we can use the ampersand (&) operator. You may have already seen us using this operator occasionally in previous modules.\nWe could also accomplish the same thing by using the alt.vconcat(choropleth, points_on_map) syntax. Here, we chose however to opt for the pipe operator as it is more efficient (keystroke-wise).\nNow we can study both figures in the same view, instead of flipping back and fourth between slides.\nThese figures also complement each other in the sense that the choropleth highlights small differences due to the colorscale not starting at zero and the bar chart shows the actual size of the differences since each bar starts from zero."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#plots-can-also-be-concatenated-horizontally",
    "href": "modules/module6/slides/module6_05.html#plots-can-also-be-concatenated-horizontally",
    "title": "Figure Composition",
    "section": "Plots can also be concatenated horizontally",
    "text": "Plots can also be concatenated horizontally\n\n# alt.hconcat(choropleth, bars)\nchoropleth.properties(width=250) | bars.properties(width=400)\n\n\n\n\n\n\n\n\nTo place plots in a panel stacked horizontally instead of vertically, we can use the pipe (|) operator.\nWe could also have used the alt.hconcat(choropleth, points_on_map), but again, using the operator is a bit more efficient.\nWe have to shrink the plot widths a bit to fit them on this slide. This makes it hard to read the bar chart x-labels so a horizontal layout is not as good as a vertical layout for this particular figure.\nIn general, whether to choose a horizontal or vertical layout depends on the available space you have for the figure. For example, in this lecture material we’re limited by the size of the slides and have to adjust our figure layouts to work well within this space.\nNote where the color legend for the plots get placed when we do this; it is placed to the right of both plots."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#vertical-and-horizontal-concatenation-can-be-combined",
    "href": "modules/module6/slides/module6_05.html#vertical-and-horizontal-concatenation-can-be-combined",
    "title": "Figure Composition",
    "section": "Vertical and horizontal concatenation can be combined",
    "text": "Vertical and horizontal concatenation can be combined\n\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = (alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size=alt.Size('number_of_asthma_cases', title='Total asthma case', scale=alt.Scale(range=(2,100))))\n    .properties(width=240, height=100))\n\nchoropleth_small = choropleth.properties(width=240, height=100)\nchoropleth_small | us_map + points & bars\n\n\n\n\n\n\n\n\nOften we want to create more complex figure layouts where visualizations are stacked both horizontally and vertically. Such layouts allow us to present connected, or related information near to one another, and can be useful if there is a key comparison we want to make between multiple visualizations.\nYes, we could always place each visualization on its own slide or page (when sharing figures on paper), however, our working memories are only so good. We often forget key details about visualizations we just saw when it is removed and we are presented with a new one.\nIn Altair, we can create the figure layout by combining the vertical and the horizontal concatenation operators.\nIn this slide, we create a pointmap to indicate the total amount of asthma cases in each state, and adjust the size range of the circles to avoid them overlapping on the map.\nNow we would like to place the barplot under the two maps by using the & operator, but as we can see in this slide, this places the barplot under only the rightmost map. Why is that?"
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#parentheses-can-be-used-to-indicate-groupings-in-complex-layouts",
    "href": "modules/module6/slides/module6_05.html#parentheses-can-be-used-to-indicate-groupings-in-complex-layouts",
    "title": "Figure Composition",
    "section": "Parentheses can be used to indicate groupings in complex layouts",
    "text": "Parentheses can be used to indicate groupings in complex layouts\n\n(choropleth_small | (us_map + points)) & bars\n\n\n\n\n\n\n\n\nThe reason that the plot in the previous slide did not look like we wanted it to, was that the & operator has higher priority than | operator.\nThe resulted in the choropleth and barplot being vertically concatenated before the point map was horizontally concatenated.\nWhat we really want is the horizontal concatenation between the maps to occur first, followed by the vertical concatenation of the barplot.\nJust as we use parentheses in mathematics to change the default order of mathematical operations, we can use parentheses to change the default order of concatenation operations.\nYou can see an example of that in this slide, where we place the parentheses around different parts of the expression to force the horizontal concatenation between the maps to occur first, and that leads us to get the barplot to show up below both the maps as desired.\nWe also add a parenthesis around the two charts that we are layering together, to make it clear which objects the + operator is operating on."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#redundant-colouring-can-make-it-clearer-which-charts-represent-the-same-values",
    "href": "modules/module6/slides/module6_05.html#redundant-colouring-can-make-it-clearer-which-charts-represent-the-same-values",
    "title": "Figure Composition",
    "section": "Redundant colouring can make it clearer which charts represent the same values",
    "text": "Redundant colouring can make it clearer which charts represent the same values\n\n(choropleth_small | (us_map + points)) & bars.encode(color='asthma_cases_per_capita')\n\n\n\n\n\n\n\n\nTo make it clearer that the bars and the choropleth map both represent the asthma cases, we could add redundant colouring to the bars.\nNow it is clear that the bars are the same as the choropleth and separate from the pointmap, whereas they has the same blue colour as the pointmap in the previous slide which could be confusing.\nWe still had the y-axis label correctly indicating what the bars represented in the previous slide so this redundant colouring is not strictly necessary, but it can help to remove ambiguity from your figures, particularly as they get more complex."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#titles-can-be-added-to-each-chart-in-the-layout-to-clarify-what-they-represent",
    "href": "modules/module6/slides/module6_05.html#titles-can-be-added-to-each-chart-in-the-layout-to-clarify-what-they-represent",
    "title": "Figure Composition",
    "section": "Titles can be added to each chart in the layout to clarify what they represent",
    "text": "Titles can be added to each chart in the layout to clarify what they represent\n\nchoropleth_with_title = choropleth_small.properties(title='Asthma cases per capita')\npointmap_with_title = (us_map + points).properties(title='Total ashtma cases')\nbars_with_title = (bars.encode(color='asthma_cases_per_capita').properties(title='Asthma cases per capita'))\nfigure_panel = (choropleth_with_title | pointmap_with_title) & bars_with_title\nfigure_panel_title = alt.TitleParams(text='Asthma cases among US states', dx=200)\nfigure_panel.properties(title=figure_panel_title)\n\n\n\n\n\n\n\n\nTo make our visualization easier to interpret, we can add descriptive titles. These are often particularly important when we create more complex figures since there are now several panels within each figure to keep track of.\nIf we have already taken steps to reduce the ambiguity of the charts in our figure (as we did in the previous slides), we might not need a title for each chart in the figure, but when in doubt it is better to add one title too many than one too few.\nWe should at least add an overall title to the figure as we learned in previous modules. Here we use dx to center this figure over the charts in the figure, rather than having it to the left or centered over the entire charts + legends.\nWe here make the overall title more general, but could also have highlighted a specific take home message, such as that there is no clear geographical distribution of asthma cases or that the relative differences between most states is rather small. Which title we chose would depend on the narrative we are building with the figure."
  }
]