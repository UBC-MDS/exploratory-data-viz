[
  {
    "objectID": "modules/module8/slides/module8_00.html#you-did-it",
    "href": "modules/module8/slides/module8_00.html#you-did-it",
    "title": "Congratulations on completing Data Visualization!",
    "section": "You did it!",
    "text": "You did it!\nWe covered a lot of ground but you managed to finished all 7 Modules. It’s important to celebrate this success."
  },
  {
    "objectID": "modules/module8/slides/module8_00.html#attribution",
    "href": "modules/module8/slides/module8_00.html#attribution",
    "title": "Congratulations on completing Data Visualization!",
    "section": "Attribution",
    "text": "Attribution\n\nMaterial from UBC’s DSCI 531: Data Visualization I by Joel Ostblom\nMaterial from UBC’s DSCI 532: Data Visualization II by Joel Ostblom."
  },
  {
    "objectID": "modules/module8/slides/module8_00.html#special-thanks",
    "href": "modules/module8/slides/module8_00.html#special-thanks",
    "title": "Congratulations on completing Data Visualization!",
    "section": "Special Thanks",
    "text": "Special Thanks\nNot only did you put in a lot of work by completing this course, but many people did too by helping make this course possible.\nSpecial thanks must be attributed to the following individuals and organizations (in alphabetical order):\n\n Tom Beuzen\nTim Head\n\nJunghoo Kim\nInes Montani\n Tiffany Timbers\nElijah Willie\nThe Master of Data Science Program at UBC\nOur friends, family and colleagues for supporting us and cheering us on!"
  },
  {
    "objectID": "modules/module8/slides/module8_00.html#about-us",
    "href": "modules/module8/slides/module8_00.html#about-us",
    "title": "Congratulations on completing Data Visualization!",
    "section": "About Us",
    "text": "About Us\n\nTiffany Timbers\n\nWebsite: www.tiffanytimbers.com\nTwitter: @TiffanyTimbers  \n\nJoel Ostblom\n\nWebsite: https://joelostblom.com/\nTwitter: @joelostblom  \n\nHayley Boyce\n\nWebsite: www.hayleyfboyce.com\nTwitter: @HayleyFBoyce"
  },
  {
    "objectID": "modules/module7/slides/module7_end.html#module-learning-outcomes",
    "href": "modules/module7/slides/module7_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 7",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCreate selections within a chart.\nLink selections between chart to highlight and filter data.\nUse widgets to drive chart selections.\nShare interactive visualizations without running a full Python dashboard.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#reading-in-the-movies-dataset",
    "href": "modules/module7/slides/module7_05.html#reading-in-the-movies-dataset",
    "title": "Using Widgets to Control Selections",
    "section": "Reading in the movies dataset",
    "text": "Reading in the movies dataset\n\nimport altair as alt\nimport pandas as pd\n\nmovies = pd.read_csv(\"data/movies_rating.csv\", parse_dates=[\"Release_Year\"])\nmovies\n\n\n\n\n\n\n\n\nWorldwide_Gross\nRelease_Year\nIMDB_Rating\nRotten_Tomatoes_Rating\nMajor_Genre\nMPAA_Rating\n\n\n\n\n0\n148345997.0\n1996-01-01\n5.8\n55.0\nAction\nR\n\n\n1\n9929135.0\n1985-01-01\n8.0\n98.0\nBlack Comedy\nR\n\n\n2\n102825796.0\n1996-01-01\n5.8\n52.0\nComedy\nPG-13\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n975\n36851125.0\n2008-01-01\n7.0\n65.0\nComedy\nR\n\n\n976\n141475336.0\n2005-01-01\n5.7\n26.0\nAdventure\nPG\n\n\n977\n233700000.0\n1998-01-01\n6.7\n82.0\nAdventure\nPG-13\n\n\n\n\n978 rows × 6 columns\n\n\n\n\nTo demonstrate how we can use widgets in Altair we will be using an abbreviated version of the movies dataset which you can see in this slide.\nThis data contains how much each movie made, when it was released, its genre, maturity rating, and user ratings on two online sites: IMDB and Rotten Tomatoes."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#interactive-selections-can-make-charts-with-many-categories-more-effective",
    "href": "modules/module7/slides/module7_05.html#interactive-selections-can-make-charts-with-many-categories-more-effective",
    "title": "Using Widgets to Control Selections",
    "section": "Interactive selections can make charts with many categories more effective",
    "text": "Interactive selections can make charts with many categories more effective\n\nselect_genre = alt.selection_point(fields=['Major_Genre'], bind='legend')\n\npoints = alt.Chart(movies).mark_circle().encode(\n    alt.X('Rotten_Tomatoes_Rating', title='Rotten Tomatoes rating'),\n    alt.Y('IMDB_Rating', title='IMDB rating'),\n    alt.Color('Major_Genre', title='Major genre'),\n    opacity=alt.condition(select_genre, alt.value(0.7), alt.value(0.05))).properties(height=200)\npoints.add_selection(select_genre)\n\n\n\n\n\n\n\n\nWe saw in the previous slide deck how we could use the bind parameter of a selection to link it to the legend of the plot and highlight points by clicking on categories in the legend.\nHere we create that same type of plot using the movie data set that we just saw in the last slide.\nAt first glance, this chart does not look very effective, as the many genre categories are mapped to more colours than we can easily distinguish between. However, the chart we created is not static!\nWe used alt.selection_point and alt.condition to make it interactive, so that we can click the legend to show the points from only a specific genre. This alleviates the problem of having too many colour encodings that we cannot distinguish between."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#binding-selections-to-dropdowns-instead-of-legends",
    "href": "modules/module7/slides/module7_05.html#binding-selections-to-dropdowns-instead-of-legends",
    "title": "Using Widgets to Control Selections",
    "section": "Binding selections to dropdowns instead of legends",
    "text": "Binding selections to dropdowns instead of legends\n\ngenres = sorted(movies['Major_Genre'].unique())\ndropdown = alt.binding_select(name='Genre ', options=genres)\nselect_genre = alt.selection_point(fields=['Major_Genre'], bind=dropdown)\n\npoints.add_selection(select_genre).encode(\n    opacity=alt.condition(select_genre, alt.value(0.7), alt.value(0.05)))\n\n\n\n\n\n\n\n\nDriving our interactions via a dropdown instead of a legend could be useful if we have too many categories to show in the legend, or if we wanted to have a different dataframe column in the dropdown from what we use in the legend.\nHere we use the same column for both, so that you can clearly see how the interaction works.\nIn this slide, We create a dropdown selection widget via alt.binding_select. Then, instead of binding alt.selection_point to the legend we can pass the dropdown to the bind parameter.\nThe dropdown requires an array to be passed to the options parameter; here we sort the genres alphabetically before passing them to the dropdown.\nSince we recreated the select_genre variable, we need to also redefine the opacity encoding and add this new variable to overwrite the old one.\nNow you can use the dropdown to select movies of different genres!\nNote that the location of the dropdown is fixed and there is no way change its location."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#setting-the-default-value-in-a-widget",
    "href": "modules/module7/slides/module7_05.html#setting-the-default-value-in-a-widget",
    "title": "Using Widgets to Control Selections",
    "section": "Setting the default value in a widget",
    "text": "Setting the default value in a widget\n\nselect_genre = alt.selection_point(\n    fields=[\"Major_Genre\"], bind=dropdown, value=\"Comedy\"\n)\n\npoints.add_selection(select_genre).encode(\n    opacity=alt.condition(select_genre, alt.value(0.7), alt.value(0.05))\n)\n\n\n\n\n\n\n\n\nIf we don’t specify a default value in a widget, the first value in select_genre will be shown in the widget, but it is not used to select points until we click the dropdown.\nIf we wanted to set a specific default value and immediately use it to highlight the data, we could specify which column and value to use via the value parameter as we have done in this slide.\nBecause we did this, the chart initially displays only the comedy genre, instead of all the points."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#adding-multiple-widgets-to-the-same-charts",
    "href": "modules/module7/slides/module7_05.html#adding-multiple-widgets-to-the-same-charts",
    "title": "Using Widgets to Control Selections",
    "section": "Adding multiple widgets to the same charts",
    "text": "Adding multiple widgets to the same charts\n\nmpaa_rating = sorted(movies['MPAA_Rating'].unique())\nradiobuttons_mpaa = alt.binding_radio(name='MPAA Rating ', options=mpaa_rating)\ndropdown_genre = alt.binding_select(name='Genre ', options=genres)\nselect_genre_and_mpaa = alt.selection_point(\n    fields=['Major_Genre', 'MPAA_Rating'],\n    bind={'Major_Genre': dropdown_genre, 'MPAA_Rating': radiobuttons_mpaa})\n\npoints.add_selection(select_genre_and_mpaa).encode(\n    opacity=alt.condition(select_genre_and_mpaa, alt.value(0.7), alt.value(0.05)))\n\n\n\n\n\n\n\n\nSometimes we want to highlight our data based on more than a single criteria. For example, we might want to show only comedies that are rated as suitable for children to watch.\nWe have already seen how to perform such breakdowns via faceting, but we could also do it by combining multiple interactive widgets.\nHere we’re adding a set of radio buttons for the maturity rating of the movies and a dropdown button for the genre selection.\nFirst we create the radio buttons and the dropdown as two separate widgets. We then use both these widgets to the selection_point object, so that the dropdown is bound to the 'Major_Genre' dataframe column and the radio buttons are bound to 'MPAA_Rating.\nTo trigger a selection, we now need to both click a radio button and make a selection in the dropdown."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#adding-sliders-allows-us-to-highlight-points-based-on-quantitative-value-comparisons",
    "href": "modules/module7/slides/module7_05.html#adding-sliders-allows-us-to-highlight-points-based-on-quantitative-value-comparisons",
    "title": "Using Widgets to Control Selections",
    "section": "Adding sliders allows us to highlight points based on quantitative value comparisons",
    "text": "Adding sliders allows us to highlight points based on quantitative value comparisons\n\nslider = alt.binding_range(name='Tomatometer ')\nselect_rating = alt.selection_point(\n    fields=['Rotten_Tomatoes_Rating'],\n    bind=slider)\n\npoints.encode(\n    opacity=alt.condition(select_rating, alt.value(0.7), alt.value(0.05))\n).add_selection(select_rating)\n\n\n\n\n\n\n\n\nSo far we have seen how to select categorical values from dropdown menus and radio buttons. To instead highlight based on quantitative values, we can use a slider.\nAdding a slider is similar to adding a dropdown or set of radio buttons, and we do it via binding_range(). Here we link the slider to the same column that is mapped to the x-axis, so that you can see how it works.\nIf you drag the slider around, you can see that the default behaviour is to only highlight points that exactly match the value of the slider.\nNow that we understand how we can create a slider, let’s next see how to use it in a slightly more realistic setting, such as highlighting values above or below a threshold."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#highlighting-points-smaller-or-bigger-than-a-slider-value",
    "href": "modules/module7/slides/module7_05.html#highlighting-points-smaller-or-bigger-than-a-slider-value",
    "title": "Using Widgets to Control Selections",
    "section": "Highlighting points smaller or bigger than a slider value",
    "text": "Highlighting points smaller or bigger than a slider value\n\npoints.encode(\n    opacity=alt.condition(\n        alt.datum.Rotten_Tomatoes_Rating &lt; select_rating.Rotten_Tomatoes_Rating,\n        alt.value(0.7), alt.value(0.05))\n).add_selection(select_rating)\n\n\n\n\n\n\n\n\nLet’s say that we want to create a chart where we highlight values which are smaller than the value specified by the slider. To do this we need to compare the current value of the slider with the observations’ values in the column we are filtering on.\nThe current value of the slider can be accessed via select_rating.Rotten_Tomatoes_Rating, and Altair has a special datum object to access values from different columns in the dataframe. To compare against the column with the Rotten Tomatoes Ratings, we use alt.datum.Rotten_Tomatoes_Rating.\nThis might seem cumbersome at first, but it is necessary to avoid ambiguity with only writing \"Rotten_Tomatoes_Rating\", which in comparison expressions means just the string and is not a reference to a column in the dataframe.\nNow that we drag the slider you can see that all the points are highlighted that have a value less than the slider value."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#customizing-a-slider-widget",
    "href": "modules/module7/slides/module7_05.html#customizing-a-slider-widget",
    "title": "Using Widgets to Control Selections",
    "section": "Customizing a slider widget",
    "text": "Customizing a slider widget\n\nslider = alt.binding_range(name=\"IMDB rating \", min=1, max=10, step=0.5)\nselect_rating = alt.selection_point(fields=[\"IMDB_Rating\"], bind=slider, value=4)\n\npoints.encode(\n    opacity=alt.condition(\n        alt.datum.IMDB_Rating &lt; select_rating.IMDB_Rating,\n        alt.value(0.7),\n        alt.value(0.05),\n    )\n).add_selection(select_rating)\n\n\n\n\n\n\n\n\nBy default the range for the slider is from 0 to 100. This happens to work well for the ratings from Rotten Tomatoes, but what if we wanted to use it for the IMDB ratings instead?\nSince the slider does not automatically adjust to the range of the data, we need to define the range manually. Here we set the minimum to be 1 (there is no 0 rating for IMDB), the maximum to be 10.\nWe also demonstrate how to change the step size. Now that we drag the slider handle it jumps half a step at a time, instead of the default step size of 1, which gives us increased precision in which movies we are selecting.\nJust as with dropdowns we could set an explicit start value to have an active selection when the chart first appears.\nHere we have specified the slider to be set at 4 when the chart first loads via setting value=4 in alt.selection_point."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#it-is-more-useful-to-bind-a-slider-to-a-dataframe-column-not-displayed-on-the-chart-axes",
    "href": "modules/module7/slides/module7_05.html#it-is-more-useful-to-bind-a-slider-to-a-dataframe-column-not-displayed-on-the-chart-axes",
    "title": "Using Widgets to Control Selections",
    "section": "It is more useful to bind a slider to a dataframe column not displayed on the chart axes",
    "text": "It is more useful to bind a slider to a dataframe column not displayed on the chart axes\n\nslider = alt.binding_range(name='Worldwide Gross ', max=100_000_000, step=1_000_000)\nselect_rating = alt.selection_point(fields=['Worldwide_Gross'], bind=slider)\n\npoints.encode(\n    opacity=alt.condition(\n        alt.datum.Worldwide_Gross &lt; select_rating.Worldwide_Gross,\n        alt.value(0.7), alt.value(0.05))\n).add_selection(select_rating)\n\n\n\n\n\n\n\n\nSo far we have used the same column for the slider as we have on the x-axis to clearly see the effect from changing the slider behavior.\nHowever, when creating an interactive visualization it is often the most useful to bind the slider to a dataframe column that is not already included on one of the axes.\nIn this slide, we instead filter on the worldwide gross. Since the range for this is outside 0 - 100, we explicitly set the max to a higher value, and adjust the stepsize to something more meaningful.\nNow we can use the slider to filter movies on the amount they grossed. However, since we cannot select a range on the slider, we’re limited to selecting all movies either bigger than or smaller than the slider value."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#sliders-only-work-with-numerical-data",
    "href": "modules/module7/slides/module7_05.html#sliders-only-work-with-numerical-data",
    "title": "Using Widgets to Control Selections",
    "section": "Sliders only work with numerical data",
    "text": "Sliders only work with numerical data\n\nslider = alt.binding_range(name='Year')\nselect_rating = alt.selection_point(fields=['Release_Year'], bind=slider)\n\npoints.encode(\n    opacity=alt.condition(select_rating, alt.value(0.7), alt.value(0.05))\n).add_selection(select_rating)\n\n\n\n\n\n\n\n\nIn this slide we try to use the slider widget to highlight movies based on the year they were produced, so that we can effectively explore movies from different time periods separately.\nHowever, as you can see it doesn’t work as we expected and nothing happens when we drag the slider handle back and fourth. The reason for this is that sliders only work with numerical data and support for temporal data is not yet implemented. in Altair.\nAs an alternative to the slider, we can use another plot to to select data, which has several other advantages as you will see in the next slide."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#driving-range-selections-from-another-plot-is-more-effective",
    "href": "modules/module7/slides/module7_05.html#driving-range-selections-from-another-plot-is-more-effective",
    "title": "Using Widgets to Control Selections",
    "section": "Driving range selections from another plot is more effective",
    "text": "Driving range selections from another plot is more effective\n\nselect_year = alt.selection_interval()\nbar_slider = (alt.Chart(movies).mark_bar().encode(\n    alt.X('Release_Year', title='Release Year'),\n    alt.Y('count()'),\n    opacity=alt.condition(select_year, alt.value(0.7), alt.value(0.05)))\n.properties(height=50).add_selection(select_year))\n\npoints.encode(opacity=alt.condition(select_year, alt.value(0.7), alt.value(0.05))) & bar_slider\n\n\n\n\n\n\n\n\nWith range selection in general, and especially for temporal data, it is more effective to use a histogram instead of a slider. This is because the histogram gives us information about how many movies we have data for each year and it also lets us select a range of years.\nWe can use what we learned in the last slide deck to link the selection between the two plots. The biggest difference here is that instead of a single or multi selection, we will use the selection_interval function to create a range selection.\nIn this histogram we can see that there are just a few movies from the 1980s in the data and only one in 2040, which must be an error in the dataset.\nIn addition to showing the distribution of the data this also allows us to select a range of values, which is not possible with sliders in Altair. We can then drag the selection with the mouse, just as when we were selecting in the scatter plots in the first slide deck of this module.\nIf we wanted to we could also style the histogram chart to look more like a widget, and remove the incorrect data point, but we won’t do that here."
  },
  {
    "objectID": "modules/module7/slides/module7_05.html#interval-selection-can-also-be-used-to-create-a-minimap-for-chart-navigation",
    "href": "modules/module7/slides/module7_05.html#interval-selection-can-also-be-used-to-create-a-minimap-for-chart-navigation",
    "title": "Using Widgets to Control Selections",
    "section": "Interval selection can also be used to create a “minimap” for chart navigation",
    "text": "Interval selection can also be used to create a “minimap” for chart navigation\n\nmovies_1995_2010 = movies.loc[movies['Release_Year'].between('1995', '2010')]\nbase = alt.Chart(movies_1995_2010).mark_area().encode(\n    alt.X('Release_Year', title=None),\n    alt.Y('mean(Worldwide_Gross)', title='Gross worldwide'))\n\nselect_year = alt.selection_interval()\nlower = base.properties(height=50).add_selection(select_year)\nupper = base.encode(alt.X('Release_Year', title=None, scale=alt.Scale(domain=select_year))).properties(height=200)\nupper & lower\n\n\n\n\n\n\n\n\nParticularly when visualizing data over long time periods, it can be useful to both have and overview of the data and be able to zoom in on specific event.\nOne way to achieve this is with the interactive method we used earlier. However, we could also use the approach with an additional chart as in the previous slide to create a so called “minimap” for navigation of another chart.\nThe key to making this interaction work is to let the interval selection control the axis extent (the domain) of the main chart, while only adding it as a selection on the “minimap” chart.\nThe syntax for this is consistent with what we have learned earlier, but instead of having a condition that checks if an observation falls within the selection, we’re directly using the range of the selection to set the domain in the main chart."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#the-return-of-the-cars-dataset",
    "href": "modules/module7/slides/module7_01.html#the-return-of-the-cars-dataset",
    "title": "Tooltips, Zoom, and Selections",
    "section": "The return of the cars dataset",
    "text": "The return of the cars dataset\n\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars()\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\n...\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n...\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n...\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n...\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n...\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n...\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n...\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nFor this slide deck we will be using the cars data set again, since it lends itself well to demonstrate the interactive elements that we will cover here.\nYou already saw this dataset in previous modules, but as a reminder it contains data on individual car brands from three different regions over time."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#tooltips-can-provide-additional-information-about-data-points",
    "href": "modules/module7/slides/module7_01.html#tooltips-can-provide-additional-information-about-data-points",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Tooltips can provide additional information about data points",
    "text": "Tooltips can provide additional information about data points\n\nalt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    tooltip='Name')\n\n\n\n\n\n\n\n\nWe have seen in previous modules how adding a tooltip can provide us with information that is not captured on the axes.\nIn this plot, we have used a tooltip to view the names of each vehicle when hovering our cursor over the respective point.\nTooltips are particularly useful when we have dataframe columns that contain many unique values; so many that it would not be possible to visualize them effectively using different colours and a legend."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#tooltips-can-also-add-more-precise-values-for-dataframe-columns-on-the-chart-axes",
    "href": "modules/module7/slides/module7_01.html#tooltips-can-also-add-more-precise-values-for-dataframe-columns-on-the-chart-axes",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Tooltips can also add more precise values for dataframe columns on the chart axes",
    "text": "Tooltips can also add more precise values for dataframe columns on the chart axes\n\nalt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    tooltip=['Name', 'Horsepower'])\n\n\n\n\n\n\n\n\nWe can also use tooltips to add more than just one piece of information when we hover over individual points.\nFor example, in addition to the car type for each observation, we have also added the exact value for horsepower (which is mapped to the x-axis) to make it easier to look them up on the chart.\nWe were able to do this by specifying the Name and the Horsepower columns as a list that we passed to the tooltip argument.\nWhen you hover the cursor over a point, you can also see that specifying column names in a list to the tooltip parameter, leads Altair to automatically add the name of the dataframe column as grey text so that we know what the two values in the tooltip represent."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#points-can-be-linked-to-an-url-to-provide-more-information-about-the-data",
    "href": "modules/module7/slides/module7_01.html#points-can-be-linked-to-an-url-to-provide-more-information-about-the-data",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Points can be linked to an URL to provide more information about the data",
    "text": "Points can be linked to an URL to provide more information about the data\n\ncars['URL'] = 'https://duckduckgo.com/?q=' + cars['Name']\n\nalt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    href='URL',\n    tooltip=['Name', 'URL'])\n\n\n\n\n\n\n\n\nWhile a tooltip that shows each cars name when hovering over it adds some information, it might not be that meaningful to those of us that are not familiar with car model names.\nTo facilitate finding more information about each cars, we could add an interaction so that clicking the point would search for the name of the car online.\nIn this specific case, we have crafted the URL such that clicking the point would search for the name of the car online using the DuckDuckGo privacy-focused search engine.\nWe accomplished this by creating a new column in the dataframe called 'URL' which holds the full URL search address for each car.\nThe href encoding in Altair can be used to define a link action when a chart element is clicked and here we set it to the URL field so that when we click a point, we will open a browser at that web address. href is what links are called in HTML code."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#zooming-and-panning-helps-the-audience-explore-the-data",
    "href": "modules/module7/slides/module7_01.html#zooming-and-panning-helps-the-audience-explore-the-data",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Zooming and panning helps the audience explore the data",
    "text": "Zooming and panning helps the audience explore the data\n\nalt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    href='URL',\n    tooltip=['Name', 'URL']).interactive()\n\n\n\n\n\n\n\n\nIn all our previous charts, it has been difficult to resolve exactly which point a tooltip refers to in the more dense regions of the charts where points overlap.\nOne approach to deal with this would be to make the points smaller or to make the visualization larger. However, in some cases this might make individual points harder to see or take up more space than we have available for our visualizations.\nInstead, we could enable zooming and panning on the chart with the interactive() method. This works on all visualizations except maps and allows us to zoom in by using the scrolling feature of our mouse or touchpad, and pan by clicking and dragging the chart. Double clicking resets the zoom and pan to the default view.\nIn addition to resolving tooltip ambiguity, adding the zooming and panning feature allows your audience to decide which regions of the chart they want to look closer at, which would not be possible with a static visualization."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#adding-selections-allows-us-to-highlight-data-points",
    "href": "modules/module7/slides/module7_01.html#adding-selections-allows-us-to-highlight-data-points",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Adding selections allows us to highlight data points",
    "text": "Adding selections allows us to highlight data points\n\nbrush = alt.selection_interval()\n \n(alt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'))\n.add_selection(brush))\n\n\n\n\n\n\n\n\nSelections are useful to highlight certain points in a chart. This is particularly helpful when highlighting the same points in multiple linked charts.\nIn a few slides, we will see a concrete example of how this can be used to answer a specific question, but first, let’s walk through the syntax for adding selections to a single chart.\nTo add a selection to a chart, we first need to create the selection object. In this slide we create and interval selection by specifying alt.selection_interval() and then giving this the name brush.\nThe reason for this name is that selecting points with an interval is often referred to as “brushing” in data visualization terminology. You would commonly see this when reading online resources on interactive selections in data visualization.\nAfter creating the selection object, we add it to our chart using add_selection(), which means that we can use our cursor in the chart to create a grey selection rectangle by clicking and dragging with our mouse or touchpad.\nYou can click to drag the selection around and to clear it you can either double click the selection or click once outside the selected region.\nBut it doesn’t look like any of the points are highlighted yet, why not?"
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#highlighting-points-with-selections-requires-a-conditional-statement",
    "href": "modules/module7/slides/module7_01.html#highlighting-points-with-selections-requires-a-conditional-statement",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Highlighting points with selections requires a conditional statement",
    "text": "Highlighting points with selections requires a conditional statement\n\nbrush = alt.selection_interval()\n \n(alt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    color=alt.condition(brush, 'Origin', alt.value('lightgray')))\n.add_selection(brush))\n\n\n\n\n\n\n\n\nTo highlight the selected in a different colour than the rest of the data, we can use a conditional statement.\nAltair has a built in if/else function called condition that checks if an event is present (such as selection) and then lets us define what to do if it is True, and what to do if it is False. You can think of it like this:\nalt.condition(check-this, if-true-do-this, if-false-do-this)\nIn the chart on this slide we check if our interval range selection brush contains any data points. If that is true, we use the Origin dataframe column to colour the points, otherwise we use the value 'lightgray'.\nalt.value is a helper function for when we want to map a single value to the data points, rather than mapping the values from a column in the dataframe."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#linking-selections-between-charts-helps-exploring-observations-across-more-columns",
    "href": "modules/module7/slides/module7_01.html#linking-selections-between-charts-helps-exploring-observations-across-more-columns",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Linking selections between charts helps exploring observations across more columns",
    "text": "Linking selections between charts helps exploring observations across more columns\n\nbrush = alt.selection_interval()\n \npoints = (alt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    color=alt.condition(brush, 'Origin', alt.value('lightgray')))\n.add_selection(brush)).properties(height=225, width=300)\n\npoints | points.encode(x='Acceleration', y=alt.Y('Weight_in_lbs', title='Weight'))\n\n\n\n\n\n\n\n\nIn this slide we have created two charts from the same dataframe. In the first we have plotted Horsepower against Miles_per_Gallon and in the second we have plotted Acceleration against Weight_in_lbs.\nWe can use this to see patterns or relationship between two variables within each chart, but we don’t know how the points are related between the two charts.\nFor example, we might wonder if the cars with really powerful engines and low mileage are the ones with low or high acceleration and weight. There is not way to tell this from just looking at these two charts.\nHowever, if we could highlight points of interest in one chart, and then see the same observations highlighted in the other chart - we would be able to answer such a question!\nAs you can see in this slide selections are automatically linked between the two charts. The reason this worked was because both these charts have one point for each observation in the data, so that we selected a point in one of the scatterplots the corresponding point for that same observation could automatically be highlighted in the other scatterplot.\nNow we can answer our question! Highlighting the observations where the cars have high engine power and low mileage shows that they are mostly heavy cars with slow acceleration. Importantly, the relationships of other observations can also be explored in the plot without us having to change anything."
  },
  {
    "objectID": "modules/module7/slides/module7_01.html#multiple-selections-can-be-used-to-highlight-points",
    "href": "modules/module7/slides/module7_01.html#multiple-selections-can-be-used-to-highlight-points",
    "title": "Tooltips, Zoom, and Selections",
    "section": "Multiple selections can be used to highlight points",
    "text": "Multiple selections can be used to highlight points\n\nbrush = alt.selection_interval(resolve='intersect')\n \npoints = (alt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    color=alt.condition(brush, 'Origin', alt.value('lightgray')))\n.add_selection(brush)).properties(height=225, width=300)\n\npoints | points.encode(x='Acceleration', y=alt.Y('Weight_in_lbs', title='Weight'))\n\n\n\n\n\n\n\n\nIn the previous slide we only had one selection possible at a time. For example, if we started to first select observations in the chart on the left, and then started to make another selection in the chart on the right hand side, the chart to the left would clear its selection.\nWe could modify this behavior so that there are separate selections in the the two charts and only points that fall within the intersection or union of both the selections are highlighted as in this slide.\nThis can be useful if you want to narrow down your data further select observations that meet multiple conditions."
  },
  {
    "objectID": "modules/module7/module7-09-what_did_we_just_learn.html",
    "href": "modules/module7/module7-09-what_did_we_just_learn.html",
    "title": "5. What did we just learn?",
    "section": "",
    "text": "5. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "5. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module7/module7-07-sharing_altair_visualizations.html",
    "href": "modules/module7/module7-07-sharing_altair_visualizations.html",
    "title": "4. Sharing Altair Visualizations",
    "section": "",
    "text": "4. Sharing Altair Visualizations\n\nVideoSlides",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "4. Sharing Altair Visualizations"
    ]
  },
  {
    "objectID": "modules/module7/module7-05-using_widgets_to_control_selections.html",
    "href": "modules/module7/module7-05-using_widgets_to_control_selections.html",
    "title": "3. Using Widgets to Control Selections",
    "section": "",
    "text": "3. Using Widgets to Control Selections\n\nVideoSlides",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "3. Using Widgets to Control Selections"
    ]
  },
  {
    "objectID": "modules/module7/module7-03-advanced_selections.html",
    "href": "modules/module7/module7-03-advanced_selections.html",
    "title": "2. Advanced Selections",
    "section": "",
    "text": "2. Advanced Selections\n\nVideoSlides",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "2. Advanced Selections"
    ]
  },
  {
    "objectID": "modules/module7/module7-01-tooltips_zoom_and_selections.html",
    "href": "modules/module7/module7-01-tooltips_zoom_and_selections.html",
    "title": "1. Tooltips, Zoom, and Selections",
    "section": "",
    "text": "1. Tooltips, Zoom, and Selections\n\nVideoSlides",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "1. Tooltips, Zoom, and Selections"
    ]
  },
  {
    "objectID": "modules/module6/slides/module6_end.html#module-learning-outcomes",
    "href": "modules/module6/slides/module6_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 6",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCraft engaging narratives for your visualizations\nVisualize geographical data\nLink geographical data to dataframes\nLayout plots in panels of a figure grid\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#geographical-file-formats",
    "href": "modules/module6/slides/module6_03.html#geographical-file-formats",
    "title": "Visualizing Geographic Data",
    "section": "Geographical file formats",
    "text": "Geographical file formats\n// This truncated example does not contain all border coordinates for Colorado\n{\n  \"type\": \"Feature\",\n  \"id\": 8,\n  \"properties\": {\"name\": \"Colorado\"},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n      [[-106.32056285448942,40.998675790862656],[-106.19134826714341,40.99813863734313],\n       [-105.27607827344248,40.99813863734313],[-104.9422739227986,40.99813863734313],\n       [-104.05212898774828,41.00136155846029],[-103.57475287338661,41.00189871197981],\n       [-106.32056285448942,40.998675790862656]]\n    ]\n  }\n}\n\nSo far, we have sourced all of the data we have visualized using Altair from spreadsheet-like .csv files. We have then worked with the data in Python as tidy data frames.\nTo easily visualize data on maps we will learn about and use new file formats that are designed specifically for geographic data.\nThese are called GeoJSON and TopoJSON. Like .csv’s, they and are saved as plain text files, however, they are formatted differently, and they have specific rules for how store geographic data such as positional coordinates, like latitude and longitude.\nYou can see an example of one here in this slide."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#creating-a-map-in-altair",
    "href": "modules/module6/slides/module6_03.html#creating-a-map-in-altair",
    "title": "Visualizing Geographic Data",
    "section": "Creating a map in Altair",
    "text": "Creating a map in Altair\n\nimport altair as alt\nfrom vega_datasets import data\n\nworld_map = alt.topo_feature(data.world_110m.url, 'countries')\nalt.Chart(world_map).mark_geoshape()\n\n\n\n\n\n\n\n\nThe vega sample data sets contains data sets we can use to create maps for the world and the US. There are stored in the TopoJSON format. We will now demonstrate how we can use such data with Altair.\nTo use the TopoJSON data, we need the alt.topo_feature helper function to allow Altair to correctly parse the TopoJSON file. We then use mark_geoshape to visualize this geographic TopoJSON data in the form of a map.\nBecause, the data contains the border coordinates of each country, we can see these drawn as white lines in the chart on this slide.\nLooking at this map however, you might wonder why Antarctica looks so much bigger than the rest of the world?"
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#changing-the-projection-gives-a-more-accurate-representation-of-areas",
    "href": "modules/module6/slides/module6_03.html#changing-the-projection-gives-a-more-accurate-representation-of-areas",
    "title": "Visualizing Geographic Data",
    "section": "Changing the projection gives a more accurate representation of areas",
    "text": "Changing the projection gives a more accurate representation of areas\n\nalt.Chart(world_map).mark_geoshape().project(type='equalEarth')\n\n\n\n\n\n\n\n\nGiven that the Earth is a sphere it is not entirely straightforward how to represent the areas of the different parts of the world on a two dimensional visualization.\nThe reason that Antarctica looked so big in the previous slide is because of how the sphere is being stretched when it is projected onto a two dimensional visualization surface.\nmercator is often used as the default projection method for maps. However, it causes heavy distortion of the relative areas of land masses, and in particular, this distortion gets much worse closer to the poles.\nFortunately, many people are moving away from using this projection because it gives a distorted impression of what the world looks like. A commonly used alternative is the equalEarth projection. This projection focuses on correctly representing the relative areas of all landmasses.\nSome of the most noticeable differences in this projection are that Africa appears much bigger and Greenland, Antarctica as well as Russia appear notably smaller.\nAfrica is in fact 15x the area of Greenland, this is far far from how the mercator projection draws this - it draws them as roughly the same size."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#the-fill-and-border-colours-of-countries-can-be-changed",
    "href": "modules/module6/slides/module6_03.html#the-fill-and-border-colours-of-countries-can-be-changed",
    "title": "Visualizing Geographic Data",
    "section": "The fill and border colours of countries can be changed",
    "text": "The fill and border colours of countries can be changed\n\nalt.Chart(world_map).mark_geoshape(\n    color='black', stroke='#706545', strokeWidth=1\n).project(type='equalEarth')\n\n\n\n\n\n\n\n\nWe can change the colour of both the filled maps areas and the geographical borders.\nAnd similar to other colour mappings in Altair, we can use either a named colour or and exact hex-code.\nHere we use the named colour black, with the color argument to fill the map areas black, and a hexcode with the stroke argument to change the geographical borders to a grey colour. We also set strokeWidth to 1, so that it is easier to see the country borders."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#we-can-zoom-and-pan-the-map",
    "href": "modules/module6/slides/module6_03.html#we-can-zoom-and-pan-the-map",
    "title": "Visualizing Geographic Data",
    "section": "We can zoom and pan the map",
    "text": "We can zoom and pan the map\n\nalt.Chart(world_map).mark_geoshape(\n    color='#2a1d0c', stroke='#706545', strokeWidth=0.5\n).project(type='equalEarth', scale=500, translate=[140, 610])\n\n\n\n\n\n\n\n\nBy default Altair automatically adjusts the projection so that all the data fits within the width and height of the chart.\nWe can change this by setting custom values for the projections parameters scale, which sets the zoom level, and translate, which sets where to pan to.\nHere we adjust these so that we can zoom in and centre the map on Europe.\nHave patience with yourself and Altair while doing this, as getting the panning and zooming just right can take a bit of fiddling."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#working-with-individual-countries-can-show-regional-details",
    "href": "modules/module6/slides/module6_03.html#working-with-individual-countries-can-show-regional-details",
    "title": "Visualizing Geographic Data",
    "section": "Working with individual countries can show regional details",
    "text": "Working with individual countries can show regional details\n\nstate_map = alt.topo_feature(data.us_10m.url, 'states')\nalt.Chart(state_map).mark_geoshape().project(type='equalEarth')\n\n\n\n\n\n\n\n\nIf we want information on regions within a country, we have to use a geoJSON or topoJSON file that contains this information. The vega demo datasets has such a file for the United States, so we use that to demonstrate how to do this here.\nWe load the data in the same way as before, however, you can see that the equalEarth projection doesn’t seem to work well here.\nUsing it leads to the country being quite small, and not centred. Furthermore, it leads to both Alaska and Hawaii being spaced quite far from the rest of the country."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#there-are-special-projections-for-some-countries-such-as-the-us",
    "href": "modules/module6/slides/module6_03.html#there-are-special-projections-for-some-countries-such-as-the-us",
    "title": "Visualizing Geographic Data",
    "section": "There are special projections for some countries such as the US",
    "text": "There are special projections for some countries such as the US\n\nalt.Chart(state_map).mark_geoshape().project(type='albersUsa')\n\n\n\n\n\n\n\n\nTo fix this, we can use a special projection albersUsa that was created to visualize maps of the United States. It is a much preferred projection when only showing this country.\nYou might recognize the projection from maps that you have seen outside of this course, such as on the news. Of note, is the characteristic placement of Alaska and Hawaii close to the rest of the country."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#colouring-individual-regions-differently",
    "href": "modules/module6/slides/module6_03.html#colouring-individual-regions-differently",
    "title": "Visualizing Geographic Data",
    "section": "Colouring individual regions differently",
    "text": "Colouring individual regions differently\n\n(alt.Chart(state_map).mark_geoshape().encode(\n    color='id:Q')\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nSo far we have seen how to visualize regions with a uniform colour, but often we want to use colour to map values or summary statistics from our data to different geographic regions. How can we do this in Altair?\nAs you can see in this slide, we can use encode together with mark_geojson, the same way we have used it with the other marks. This type of visualization can be thought of as a geographical heatmap and is often referred to as a “choropleth map”.\nTo introduce how we can do this - we will map the states identification number from our topoJSON file we loaded, to the corresponding geographic region for each state. Normally, we would not do this, but instead map some other data to each geographic region. We will do that in the following slides.\nThe 'id' field here comes from the sample topoJSON file. If we opened up and looked at this file, we would find that it contains a field called 'id', which is a numerical identifier for each state in alphabetical order.\nBecause we are not using a pandas dataframe, we mush specify the type of data in the column. Here we are specifying it as a quantitative for demonstration purposes because the legend would become very long if we specified it as ordinal or nominal."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#visualizing-data-from-another-dataframe-on-a-map",
    "href": "modules/module6/slides/module6_03.html#visualizing-data-from-another-dataframe-on-a-map",
    "title": "Visualizing Geographic Data",
    "section": "Visualizing data from another dataframe on a map",
    "text": "Visualizing data from another dataframe on a map\n\nimport pandas as pd\n\nstate_pop = pd.read_csv(\"data/us_population_coordinates_asthma-cases.csv\")\nstate_pop[:5]\n\n\n\n\n\n\n\n\nstate\nid\npopulation\nlatitude\nlongitude\nnumber_of_asthma_cases\n\n\n\n\n0\nAlabama\n1\n4863300\n32.7794\n-86.8287\n394634\n\n\n1\nAlaska\n2\n741894\n64.0685\n-152.2782\n50685\n\n\n2\nArizona\n4\n6931071\n34.2744\n-111.6602\n545104\n\n\n3\nArkansas\n5\n2988248\n34.8938\n-92.4426\n225853\n\n\n4\nCalifornia\n6\n39250017\n37.1841\n-119.4696\n2607598\n\n\n\n\n\n\n\n\nSo far we have learned how to visualize maps, but we haven’t really been able to ask and answer any interesting questions.\nAlthough any arbitrary information could be put in a topoJSON, or geoJSON file, they often only contain spatial coordinates. Thus, we often need to link our variables of interest from another data set with the data in the topoJSON, or geoJSON file.\nFor example, we might have a table like this, with the population for each state and wish to visualize it on a map? So how do we link these two tables together?"
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#linking-datasets-together-via-lookups",
    "href": "modules/module6/slides/module6_03.html#linking-datasets-together-via-lookups",
    "title": "Visualizing Geographic Data",
    "section": "Linking datasets together via lookups",
    "text": "Linking datasets together via lookups\n\n(alt.Chart(state_map).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(state_pop, 'id', ['population']))\n.encode(color='population:Q')\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nWe could perform the linkage manually, by adding the relevant fields to the json file, but this would be a tedious and error-prone process.\nThere are some libraries, such as geopandas which can ameliorate this situation, but we could also use Altair directly to save time.\nTo link two datasets together, Altair uses the transform_lookup method to look up the data column we want to use from the dataframe via a shared key column. And then adds it to the plotted data. This process is similar to using merge in pandas.\nYou could see in the previous slide that there exists an ID column and this contains the state IDs in alphabetical order, just like the topoJSON file - and so we can use that for the lookup.\nThe columns we want to fetch from the data frame are passed in a list, and here we have specified only the population, We will use that to colour the states accordingly to how many people live in each state."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#choropleths-can-be-misleading-since-the-area-of-each-region-matters",
    "href": "modules/module6/slides/module6_03.html#choropleths-can-be-misleading-since-the-area-of-each-region-matters",
    "title": "Visualizing Geographic Data",
    "section": "Choropleths can be misleading since the area of each region matters",
    "text": "Choropleths can be misleading since the area of each region matters\n\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size='population')\n(us_map + points).configure_view(stroke=None)\n\n\n\n\n\n\n\n\nOne drawback with choropleth maps is that they rely on the area of each region, even if it is unrelated to the measure we are studying.\nFor example, just because the states in the midwest of the US have a large area, they are very prominent in the choropleth map we made on the last slide although their population is actually quite small.\nOn the other hand, if there was a state that had a small area, but a large population, we might not even see it on the choropleth map. These issues are often discussed around the US election, where different approach are used to illustrate that the weight of each states’ vote is not tied to the geographical area of the state.\nOne effective way to convey this message is to use a map as a background and plot points on top that are scaled according to the measure of interest.\nTo achieve this in Altair, we need one pair of coordinates to plot for each state. For this we can use the columns latitude and longitude which represent the geometric centre of each state).\nWe then plot these coordinates on top of a map using the special longitude and latitude parameters and set the size of the points to be relative the population.\nFinally, we remove the square grey outline by setting the stroke to None.\nNow it is much easier to see that many of the states in Eastern USA have a population several times that of the states in the Midwest, although their area is smaller."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#some-measures-can-be-influenced-by-the-population-size",
    "href": "modules/module6/slides/module6_03.html#some-measures-can-be-influenced-by-the-population-size",
    "title": "Visualizing Geographic Data",
    "section": "Some measures can be influenced by the population size",
    "text": "Some measures can be influenced by the population size\n\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size=alt.Size('number_of_asthma_cases', title='Asthma cases'))\n(us_map + points).configure_view(stroke=None)\n\n\n\n\n\n\n\n\nWhether we are using a choropleth or a map with circular markers, we need to be careful when plotting variables that depend on the population size.\nIn this plot we have plotted the number of people suffering from asthma in each of the states.\nAs you can see, this looks almost identical to the map in the last slide showing the population per state. The reason is that for any condition, a state with more people is likely to show more cases, unless there is a strong dependence on another factor that differs between the states.\nIt would be more interesting to see how many people get asthma per capita, which means dividing the number of asthma cases with the population in each state.\nLet’s do that next!"
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#for-these-measures-it-is-important-to-control-for-the-size-of-population",
    "href": "modules/module6/slides/module6_03.html#for-these-measures-it-is-important-to-control-for-the-size-of-population",
    "title": "Visualizing Geographic Data",
    "section": "For these measures it is important to control for the size of population",
    "text": "For these measures it is important to control for the size of population\n\nstate_pop['asthma_cases_per_capita'] = state_pop['number_of_asthma_cases'] / state_pop['population']\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size=alt.Size('asthma_cases_per_capita', title='Asthma cases'))\n(us_map + points).configure_view(stroke=None)\n\n\n\n\n\n\n\n\nWhen we control for the size of the population in each state, we can see that the appearance of the map is quite different.\nMost state has a rather similar number of asthma cases per capita, differing at most with around 1.5 - 2x.\nIt a bit hard to see the exact with the size of the circles since the scale starts from zero.\nIf these small differences are important, we could set the domain of the size scale in the same way we saw in previous modules how we could adjust the domain for the x and y scales.\nHowever, there is a bigger issue with this visualization. Look at the circles in the Eastern US, many of them are overlapping which makes the chart hard to read.\nWe make all points smaller by setting the range of the size scale, but there would still be a lot of overlap.\nIn these cases, a choropleth map would be a better choice since there won’t be any overlap."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#a-choropleth-map-avoids-overlap-for-large-values-close-to-each-other",
    "href": "modules/module6/slides/module6_03.html#a-choropleth-map-avoids-overlap-for-large-values-close-to-each-other",
    "title": "Visualizing Geographic Data",
    "section": "A choropleth map avoids overlap for large values close to each other",
    "text": "A choropleth map avoids overlap for large values close to each other\n\n(alt.Chart(state_map).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(state_pop, 'id', ['asthma_cases_per_capita']))\n.encode(color='asthma_cases_per_capita:Q')\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nIn this choropleth we can see the values of the states in Eastern US are no longer overlapping so it is easier to see the value of each state.\nWe still have the issue of some states being really small or hard to distinguish, so ideally when using either a choropleth or dots to show values like this, it would be a good idea to complement them with a bar chart in the same figure, which we will see how to do in the next slide deck.\nNote that the colorscale does not start at 0. Remember that this is good for highlighting small important differences, but can also give a misleading impression since difference often appear larger than they really are."
  },
  {
    "objectID": "modules/module6/slides/module6_03.html#explicitly-setting-the-colour-scale-to-start-from-zero-is-less-misleading",
    "href": "modules/module6/slides/module6_03.html#explicitly-setting-the-colour-scale-to-start-from-zero-is-less-misleading",
    "title": "Visualizing Geographic Data",
    "section": "Explicitly setting the colour scale to start from zero is less misleading",
    "text": "Explicitly setting the colour scale to start from zero is less misleading\n\n(alt.Chart(state_map).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(state_pop, 'id', ['asthma_cases_per_capita']))\n.encode(color=alt.Color('asthma_cases_per_capita:Q', scale=alt.Scale(zero=True)))\n.project(type='albersUsa'))\n\n\n\n\n\n\n\n\nA cut of scale is often less of an issue with color than with an axis, since we need to look at the colorbar anyways in order to interpret the different colors.\nHowever, it can still be a good idea to set the scale to explicitly start from zero to more truly represent the data and the relative differences between states.\nWe can do this using alt.Scale(zero=True) as shown in this slide."
  },
  {
    "objectID": "modules/module6/slides/module6_00.html#module-learning-outcomes",
    "href": "modules/module6/slides/module6_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCraft engaging narratives for your visualizations\nVisualize geographical data\nLink geographical data to dataframes\nLayout plots in panels of a figure grid"
  },
  {
    "objectID": "modules/module6/module6-06-true_or_false_concatenating_plots.html#true-or-false-concatenating-plots",
    "href": "modules/module6/module6-06-true_or_false_concatenating_plots.html#true-or-false-concatenating-plots",
    "title": "3.1. Exercises",
    "section": "True or False: Concatenating Plots",
    "text": "True or False: Concatenating Plots",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-true_or_false_concatenating_plots.html#lay-it-all-out",
    "href": "modules/module6/module6-06-true_or_false_concatenating_plots.html#lay-it-all-out",
    "title": "3.1. Exercises",
    "section": "Lay it All Out!",
    "text": "Lay it All Out!\nBringing back the hotel data that we saw from exercise 4, We’ve made a couple of different layouts with 3 visualizations.\n(Attribution: These plots were created using a Kaggle dataset where the data was originally obtained from the article Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-true_or_false_concatenating_plots.html#placing-penguins-properly",
    "href": "modules/module6/module6-06-true_or_false_concatenating_plots.html#placing-penguins-properly",
    "title": "3.1. Exercises",
    "section": "Placing Penguins Properly",
    "text": "Placing Penguins Properly\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe’ve worked with the penguin dataset quite a lot in this course and it only makes sense now to combine some of the plots we’ve made already into one combined presentation.\n\n\n\n\n\n\nHere we have 4 plots that we have made in the previous modules (or similar to these) that we want to combine together so that the first plots lies at the top of the presentation followed by a second row that contains 2 plots side by side and end with a bottom row with the last plot. It should appear something like this:\n\n\n\n\n\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nFrom the given plots mass_density_plot, masss_boxplot, penguin_heatmap and culmen_facet_plot, arrange them so they look like the image above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you specifying culmen_facet_plot first and combining mass_boxplot and penguin_heatmap together with brackets followed by mass_density_plot?\nAre you using the & operator to stack charts vertically and | to align them side by side?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#true-or-false-getting-geo-with-it",
    "href": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#true-or-false-getting-geo-with-it",
    "title": "2.1. Exercises",
    "section": "True or False: Getting Geo With It!",
    "text": "True or False: Getting Geo With It!",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#where-are-we-with-geography",
    "href": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#where-are-we-with-geography",
    "title": "2.1. Exercises",
    "section": "Where Are We, With Geography?",
    "text": "Where Are We, With Geography?",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#geography-with-gapminder",
    "href": "modules/module6/module6-04-true_or_false_getting_geo_with_it.html#geography-with-gapminder",
    "title": "2.1. Exercises",
    "section": "Geography with Gapminder",
    "text": "Geography with Gapminder\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe were introduced to the Gapminder dataset in previous modules as well as the assignments as although we have data about the world, we have yet to actually plot it as a map!\nWe have altered this dataset a bit to only include data from 2018 (there should only be 1 row for each country now) and we also added a new id column which contains the ISO 3166-1 numeric code for each country.\n\n\n\n\n\n\nBefore we start plotting the data from the gapminder_df, let’s first make sure we know how to make a map of the world without any statistics.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nLoad the countries TopoJSON file from the vega_datasets library and save it as an object named world_df respectively.\nIn a plot named world_plot, use the data source world_df to make a .geo_shape() visualization with a projection type of equalEarth. Make sure the plot has the height and width dimensions of 580 and 400 respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the method .topo_feature() to load in the lada and selecting countries?\nIn the plot, are you using .mark_geoshape()?\nAre you setting type=\"equalEarth\" within .project()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat we have a map! What if we want to add some statistics though? We have looked at various statistics in the past, but for this question, let’s look at each country’s population density. We want to visualize all the countries and if they are above or below the global median of life expectancy of 72 years (in 2018). This might help us see clearly if there are any particular geographical locations that are higher or lower than the global average.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nLoad 2 sources of data; the gapminder_codes.csv data that contains all the global statistics, and the countries TopoJSON file from the vega_datasets library. Name each data source gapminder_dfand world_df respectively.\nIn a plot named pop_dense_plot, use the data source world_df to make a .geo_shape() visualization that maps the pop_density of each country to a colour channel. Use a colour scheme you find appropriate (we recommend a diverging scheme) with the domain midpoint at the global median (81).\nIn order to combine the two sources, you will need to use transform_lookup() to lookup the two columns pop_density from the gapminder_df data using id as the connecting column.\nFinally, make sure that you are zooming in with a scale of 80 and panning to , respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nIn the plot, are you using .mark_geoshape()?\nIn the plot, are you specifying alt.Color('pop_density:Q', scale=alt.Scale(scheme='blueorange', domainMid=81))?\nAre you setting lookup='id' and from_=alt.LookupData(gapminder_df, \"id\", ['pop_density']) within .transform_lookup()?\nAre you setting scale=80 within .project()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-true_or_false_once_upon_a_time.html",
    "href": "modules/module6/module6-02-true_or_false_once_upon_a_time.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "(Attribution: These plots were created using a Kaggle dataset where the data was originally obtained from the article Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-true_or_false_once_upon_a_time.html#analysis-narrative---short-stories",
    "href": "modules/module6/module6-02-true_or_false_once_upon_a_time.html#analysis-narrative---short-stories",
    "title": "1.1. Exercises",
    "section": "",
    "text": "(Attribution: These plots were created using a Kaggle dataset where the data was originally obtained from the article Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-00-module_learning_outcomes.html",
    "href": "modules/module6/module6-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#understanding-the-periodic-variations-in-the-wikipedia-donations",
    "href": "modules/module5/slides/module5_11.html#understanding-the-periodic-variations-in-the-wikipedia-donations",
    "title": "Annotating with text and colour",
    "section": "Understanding the periodic variations in the Wikipedia donations",
    "text": "Understanding the periodic variations in the Wikipedia donations\n\nimport pandas as pd\nimport altair as alt\n\ndonations = pd.read_csv(\"data/donations.csv\", parse_dates=[\"date\"])\nalt.Chart(\n    donations, title=\"Wikipedia donations peak during Christmas\"\n).mark_line().encode(\n    alt.X(\"date\", title=None),\n    alt.Y(\"sum\", axis=alt.Axis(format=\"$s\"), title=\"Amount donated per day\"),\n)\n\n\n\n\n\n\n\n\nRecall this plot of Wikipedia donations from a previous slide deck in this module. We noted that the oscillating pattern might indicate a dependency on a periodic date feature, such as weekday or day of the month."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#most-contributions-are-donated-in-the-middle-of-the-week",
    "href": "modules/module5/slides/module5_11.html#most-contributions-are-donated-in-the-middle-of-the-week",
    "title": "Annotating with text and colour",
    "section": "Most contributions are donated in the middle of the week",
    "text": "Most contributions are donated in the middle of the week\n\nfrom calendar import day_abbr\n\nalt.Chart(donations).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=alt.Axis(format='$s'), title='Total donated amount'))\n\n\n\n\n\n\n\n\nHere we are using the built-in calendar module to get a sorted list of the weekday abbreviations, but we could also have written it out by hand.\nWe can see that most contributions seem to be donated in the middle of the week and the Wed stands out as the day where the highest amount of money is donated.\nTo draw additional attention to this bar, we could use colour to highlight it."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#colour-can-be-used-to-highlight-specific-features-of-a-visualization",
    "href": "modules/module5/slides/module5_11.html#colour-can-be-used-to-highlight-specific-features-of-a-visualization",
    "title": "Annotating with text and colour",
    "section": "Colour can be used to highlight specific features of a visualization",
    "text": "Colour can be used to highlight specific features of a visualization\n\ntop_day = donations.groupby('week_day')['sum'].sum().idxmax()\nalt.Chart(donations).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=alt.Axis(format='$s'), title='Total donated amount'),\n    color=alt.condition(alt.datum.week_day == top_day,\n                          alt.value('coral'),\n                          alt.value('steelblue')))\n\n\n\n\n\n\n\n\nTo add a highlight colour, we could create a new column in our dataframe that has a unique value for the bars we want to highlight and the same value for everything else.\nThen we could use this as a categorical column to colour by via the color encoding.\nThe downside of this is that we need to modify the dataframe, which might not always be desired. It is also clunky when we are computing an aggregation in Altair, such as using this sum here, and we would need to recompute this in pandas.\nBecause of these inconveniences, it is often preferred to use the built-in Altair approach for highlighting by passing a conditional encoding to the color parameter of the chart as we do in this slide.\nConceptually, you can think of alt.condition like this: alt.condition(IF this is true, DO this, ELSE DO this).\nSo here we are checking if the week_day column has the value 'Wed', and if it does we use the 'coral' colour, otherwise, we use the default 'steelblue' colour.\nInstead of typing out 'Wed' each time we calculate the day with the highest sum of donations using pandas and extract it using the idxmax() method, which returns the index of the row with the max value. This way, we can reuse our code in the future even if the top donation day is no long Wednesday.\nWe need to alt.value to tell Altair that we want to use this specific colour name, rather than looking for a column in the dataframe with this name.\nalt.datum is a way to unambiguously access a column name in conditional statements and other Altair computations, so that it is not confused for just that string of letters."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#text-labels-can-be-added-with-custom-annotations",
    "href": "modules/module5/slides/module5_11.html#text-labels-can-be-added-with-custom-annotations",
    "title": "Annotating with text and colour",
    "section": "Text labels can be added with custom annotations",
    "text": "Text labels can be added with custom annotations\n\nchart = alt.Chart(donations).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=alt.Axis(format='$s'), title='Total donated amount'),\n    color=alt.condition(alt.datum.week_day == top_day,\n                          alt.value('coral'),\n                          alt.value('steelblue')))\n(chart\n + chart\n .mark_text(align='left', dx=-125, dy=-15)\n .encode(text=alt.condition(alt.datum.week_day == top_day,\n                            alt.value('Salaries are paid on Wed'),\n                            alt.value(''))))\n\n\n\n\n\n\n\n\nWe can add a custom text annotation to the plot in the same way that we added a custom colour. This annotation could be an explanatory label, for example when an event happened on a time axis, or as the label that we made up for this chart.\nTo add this annotation we use a mark_text in the same way as when we used direct labelling for line graphs a few slide decks ago. We add the text encoding and use dx and dy to position the label relative to the top of the bar."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#text-labels-of-the-values-can-be-added-to-each-bar-to-facilitate-reading-the-exact-value",
    "href": "modules/module5/slides/module5_11.html#text-labels-of-the-values-can-be-added-to-each-bar-to-facilitate-reading-the-exact-value",
    "title": "Annotating with text and colour",
    "section": "Text labels of the values can be added to each bar to facilitate reading the exact value",
    "text": "Text labels of the values can be added to each bar to facilitate reading the exact value\n\nchart + chart.mark_text(align='left').encode(text='sum(sum)')\n\n\n\n\n\n\n\n\nAs we saw in a previous slide deck, it is possible to add text annotations directly to the plots.\nThis is beneficial when we want to communicate the exact value to our audience, and can give the plot a different look and feel.\nThe default formatting is not very easy to read, so let’s use what we learned previously to reformat the label and make this chart more effective."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#text-marks-can-be-formatted-in-the-same-manner-as-axes-labels",
    "href": "modules/module5/slides/module5_11.html#text-marks-can-be-formatted-in-the-same-manner-as-axes-labels",
    "title": "Annotating with text and colour",
    "section": "Text marks can be formatted in the same manner as axes labels",
    "text": "Text marks can be formatted in the same manner as axes labels\n\nchart + chart.mark_text(align='left', dx=2).encode(text=alt.Text('sum(sum)', format='$,d'))\n\n\n\n\n\n\n\n\nalt.Text uses the format parameter directly instead of within alt.Axis. Here we add a thousand separator (,) and round the values to integers (d) to remove the decimals.\nWe also use dx to introduce some whitespace between the bar and the label.\nThis makes the labels easier to read, but since we have thousands of thousands, we could simplify further by using the millions suffix."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#standard-international-units-can-shorten-labels-of-large-values",
    "href": "modules/module5/slides/module5_11.html#standard-international-units-can-shorten-labels-of-large-values",
    "title": "Annotating with text and colour",
    "section": "Standard international units can shorten labels of large values",
    "text": "Standard international units can shorten labels of large values\n\nchart + chart.mark_text(align='left', dx=2).encode(text=alt.Text('sum(sum)', format='$.3~s'))\n\n\n\n\n\n\n\n\nThe s format string changes the values to millions as per the standard international units convention that we discussed earlier.\nWe use .3 to indicate that we want three significant digits for each label, otherwise, they would all be printed with six decimals or so, which is hard to read.\nWe also specify ~, which removes trailing zero, e.g. the top bar says 15 instead of 15.0."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#the-redundant-x-axis-can-be-removed",
    "href": "modules/module5/slides/module5_11.html#the-redundant-x-axis-can-be-removed",
    "title": "Annotating with text and colour",
    "section": "The redundant x-axis can be removed",
    "text": "The redundant x-axis can be removed\n\ntitle = alt.TitleParams(\n    text='Wikipedia receives most donations on Wednesdays',\n    subtitle='Values represent the total amount donated in 2020',\n    anchor='start', frame='group', dy=-5)\nchart = alt.Chart(donations, title=title).mark_bar().encode(\n    alt.Y('week_day', sort=list(day_abbr), title=None),\n    alt.X('sum(sum)', axis=None),\n    color=alt.condition(alt.datum.week_day == top_day,\n                          alt.value('coral'),\n                          alt.value('steelblue')))\n(chart + chart.mark_text(align='left', dx=2).encode(text=alt.Text('sum(sum)', format='$.3s'))).configure_view(strokeWidth=0)\n\n\n\n\n\n\n\n\nWe can make our chart stand out by styling it further. Here we remove the x-axis, which is now redundant as we have included its information directly in the text annotations.\nWe add a title to the plot with the take-home message and explain what the values are in the subtitle. We anchor the title to the start (left) of the plot and use frame to align it with the axis line (the bottom of the bars) since this often looks more visually appealing for horizontal bar charts.\nWe use dy to add additional whitespace between the subtitle and the topmost bar and remove the grey outline by setting the strokeWidth to 0."
  },
  {
    "objectID": "modules/module5/slides/module5_11.html#themes-can-be-used-to-change-the-overall-styling-of-the-chart",
    "href": "modules/module5/slides/module5_11.html#themes-can-be-used-to-change-the-overall-styling-of-the-chart",
    "title": "Annotating with text and colour",
    "section": "Themes can be used to change the overall styling of the chart",
    "text": "Themes can be used to change the overall styling of the chart\n\nalt.theme.enable('dark');\n((chart\n + chart\n  .mark_text(align='left', dx=2)\n  .encode(text=alt.Text('sum(sum)', format='$.3s')))\n .configure_view(strokeWidth=0)\n .configure_title(subtitleColor='white'))\n\n\n\n\n\n\n\nView samples of all themes here.\n\nTo style multiple visual components of our charts in the same command, we can use the built-in themes in Altair. Here we set the theme to dark, which automatically changes the colour of the y-axis labels and chart title.\nUnfortunately, the subtitle colour does not yet change automatically, so we need to change this manually.\nWe could have rewritten the entire plot from the last slide and added subtitleColor to alt.TitleParams, but here we use configure_title instead.\nThe configure_* chart methods are useful when we want to make a modification to an already existing chart without copying and pasting all the code, but in general, it is preferred to change these parameters directly in the main chart code instead you can read this section of the docs to find out more.\nAll the available themes can be shown with alt.theme.names(), and currently, they are ['dark', 'default', 'fivethirtyeight', 'ggplot2', 'latimes', 'none', 'opaque', 'quartz', 'urbaninstitute', 'vox']. You can see samples of what these themes look like here."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#colour-choices-can-have-a-profound-impact-on-the-interpretation-of-the-results",
    "href": "modules/module5/slides/module5_07.html#colour-choices-can-have-a-profound-impact-on-the-interpretation-of-the-results",
    "title": "Effective use of colour for categorical data",
    "section": "Colour choices can have a profound impact on the interpretation of the results",
    "text": "Colour choices can have a profound impact on the interpretation of the results\n\n\nIn module 2 we discussed how changing the colour scheme drastically improved a clinical outcome by almost doubling physician’s detection rate of blood vessels regions indicative of potential future heart disease (from 40% to 70%).\nIn this slide deck, we will discuss some of the consideration that goes into evaluating if a colour scheme (also called a colourmap) is suitable for the data you are visualizing."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#colour-can-be-broken-down-into-hue-lightness-and-saturation",
    "href": "modules/module5/slides/module5_07.html#colour-can-be-broken-down-into-hue-lightness-and-saturation",
    "title": "Effective use of colour for categorical data",
    "section": "Colour can be broken down into hue, lightness, and saturation",
    "text": "Colour can be broken down into hue, lightness, and saturation\n\n\nThere are several different ways to represent colours. You might already have heard of RGB (red, green, blue) or CMYK (cyan, magenta, yellow, black) where different amounts of a set of base colours are combined to create all possible colours.\nWhen discussing colours in the context of data visualization, We will be describing them with the parameters “hue”, “saturation” and “lightness”.\nThe left schematic in this slide is a 2D circular representation including only hue and saturation. When we add lightness, this circle grows into a cylinder with lightness as the height.\nOn the next slide, we will break down exactly what each of these three parameters represents."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#hue-lightness-and-saturation-describes-different-properties-of-colours",
    "href": "modules/module5/slides/module5_07.html#hue-lightness-and-saturation-describes-different-properties-of-colours",
    "title": "Effective use of colour for categorical data",
    "section": "Hue, lightness, and saturation describes different properties of colours",
    "text": "Hue, lightness, and saturation describes different properties of colours\n\n\nWe could verbalize the changes we saw in the previous slide in the following manner:\nHue is what we traditionally think of as the “colour”, is it red, blue, etc?\nEach hue can have a varying saturation, which ranges from a dull, greyish appearance to a vibrant fully saturated hue.\nLightness is how bright the colour is. For every hue, it starts at black (no lightness) and ends at white (full lightness).\nHue and lightness are the most important from a data visualization perspective, and we use them for categorical and quantitative data, respectively.\nSaturation is often used more as a stylistic choice to decide whether the colours we use should be muted/desaturated or vivid/saturated."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#hues-are-used-to-distinguish-categorical-values",
    "href": "modules/module5/slides/module5_07.html#hues-are-used-to-distinguish-categorical-values",
    "title": "Effective use of colour for categorical data",
    "section": "Hues are used to distinguish categorical values",
    "text": "Hues are used to distinguish categorical values\n\n\n\nHue is useful to distinguish between categories because it is often relatively easy for us to say that different hues are distinct. We can see that blue, orange, red, etc are different and don’t easily mix them up.\nThe leftmost plot uses different hues to separate the points belonging to different categories. We can quickly identify that there is a total of three distinct colours being used here even without looking at the legend.\nIn the plot to the right we used lightness within a single hue (blue) to label the different categories. Here it is much harder to say how many different categories there are, and even when we have the legend, it is difficult to tell which points are which shade of blue."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#it-is-often-better-to-use-established-colour-schemes-instead-of-making-your-own",
    "href": "modules/module5/slides/module5_07.html#it-is-often-better-to-use-established-colour-schemes-instead-of-making-your-own",
    "title": "Effective use of colour for categorical data",
    "section": "It is often better to use established colour schemes instead of making your own",
    "text": "It is often better to use established colour schemes instead of making your own\n\n\nThere are many different hues we could use to represent our colours and some might not go as well together as others, so how do we decide which ones to use?\nFortunately, we don’t have to design our own combination of colours to use, but can pick from combinations designed by experts to be easy to tell apart and in most cases also suitable for people with colour vision deficiencies.\nThese colour combinations are referred to as colour schemes in Altair, but you might also hear them being called colourmaps or colour palettes.\nIn this slide, you can see some of the colour schemes for categorical values that are built into Altair.\nThe default one is “tableau10” and it was named this way because it was originally designed by the company Tableau but is now one of the most common categorical colour schemes used in data visualization. All Altair colour schemes can be viewed here."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#specifying-colour-schemes-in-altair",
    "href": "modules/module5/slides/module5_07.html#specifying-colour-schemes-in-altair",
    "title": "Effective use of colour for categorical data",
    "section": "Specifying colour schemes in Altair",
    "text": "Specifying colour schemes in Altair\n\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Origin', title=None, scale=alt.Scale(scheme='set1')))\n\n\n\n\n\n\n\n\nYou can change the colour scheme of a plot by specifying its name as a string to the scheme parameter inside alt.Scale.\nTo more easily see the changes we are making to the colours, we also increase the size of all points via the size parameter of the mark."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#redundant-coding-can-make-charts-easier-to-interpret",
    "href": "modules/module5/slides/module5_07.html#redundant-coding-can-make-charts-easier-to-interpret",
    "title": "Effective use of colour for categorical data",
    "section": "Redundant coding can make charts easier to interpret",
    "text": "Redundant coding can make charts easier to interpret\n\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Origin', title=None, scale=alt.Scale(scheme='set1')),\n    shape='Origin')\n\n\n\n\n\n\n\n\nAlthough many of the colour schemes in Altair are designed according to the guidelines for effective colour uses, they can sometimes be difficult to interpret for people with colour vision deficiencies.\nEspecially colour schemes that mix red and green as the one in the previous slide.\nIn addition to using a more suitable colour scheme (such as the default), we could also change the shape of the points for each category.\nAlthough this is technically redundant since the colour is already used for the categorical groups, it can make your visualization more effective since it makes the points more distinct from each other.\nNote that shape= is only available to use with mark_point, not mark_circle, mark_square, etc.\nFor line plots, we could achieve a similar effect by using the strokeDash encoding instead of shape, which together with direct labelling from the previous slide deck can facilitate interpretation of these plots."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#specifying-custom-colours",
    "href": "modules/module5/slides/module5_07.html#specifying-custom-colours",
    "title": "Effective use of colour for categorical data",
    "section": "Specifying custom colours",
    "text": "Specifying custom colours\n\ncolors = ['coral', '#4682b4', 'rebeccapurple']\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Origin', title=None, scale=alt.Scale(range=colors)),\n    shape='Origin')\n\n\n\n\n\n\n\n\nMost of the time it is a good idea to stick to the predefined colour scheme because of the advantages mentioned in the previous slide.\nHowever, sometimes the categories we are representing might have a colour already associated with them, such as political parties or sports teams.\nIn these cases, it is often better to design a custom colour scheme using the colours naturally associated with each category.\nIn Altair we can create a custom colour scheme by passing a list of colours to the range parameter of alt.Scale.\nYou can specify colours either by their HTML/CSS name (such as ‘coral’) or their hex code (such as ‘#4682b4’). All HTML/CSS colour names can be found in the image in this post.\nHex codes are defines over the range #000000 for black (“zero colour”) to #ffffff for white (“full colour”) and are easiest chosen via colour pickers such as this one."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#dont-use-more-than-5-8-distinct-hues-for-categories",
    "href": "modules/module5/slides/module5_07.html#dont-use-more-than-5-8-distinct-hues-for-categories",
    "title": "Effective use of colour for categorical data",
    "section": "Don’t use more than 5-8 distinct hues for categories",
    "text": "Don’t use more than 5-8 distinct hues for categories\n\n\nAlthough many of the categorical colour schemes contain ten or more hues, if is often not a good idea to use all that many because it becomes near impossible to distinguish the different hues from each other.\nThe guidelines on what is too many hues differ between different sources and also depends on your use case. A good rule of thumb is that when you get to around five different hues, you should really consider if this is the best way to represent your data or if you could split it up into multiple visualizations instead.\nIf the data is neatly organized in well-separated clusters, it is possible that you could visualize more than five colours (maybe even ten) effectively, but in data where the datapoints are more mixed, you will rarely if ever, be able to go this high."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#too-many-hues-are-impossible-to-distinguish",
    "href": "modules/module5/slides/module5_07.html#too-many-hues-are-impossible-to-distinguish",
    "title": "Effective use of colour for categorical data",
    "section": "Too many hues are impossible to distinguish",
    "text": "Too many hues are impossible to distinguish\n\n\nalt.Chart(cars).mark_point(size=70, filled=True).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles/gallon)'),\n    color=alt.Color('Name', title=None))\n\n\n\n\n\n\n\n\nThis is an example of what happens when too many categorical hues are used. In this plot, we can not separate the colours even if we spent a considerable amount of effort studying the chart.\nAs we saw on the last slide, categorical colour schemes have a limited amount of hues so in addition to it being hard to differentiate this many hues in general, it becomes practically impossible in cases where there are more categories than colour hues, since the colour scheme starts repeating as in the chart.\nA better approach here would have been to label specific points of interest directly and keeping the rest as either a single colour or using a categorical variable with fewer values, e.g. by grouping the cars into brands rather than their full model name.\nSince Altair allows for interactive elements, we could also have used the tooltip here as we saw in a previous module."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#redundant-coding-of-bar-charts-can-be-disorienting",
    "href": "modules/module5/slides/module5_07.html#redundant-coding-of-bar-charts-can-be-disorienting",
    "title": "Effective use of colour for categorical data",
    "section": "Redundant coding of bar charts can be disorienting",
    "text": "Redundant coding of bar charts can be disorienting\n\ncars['Brand'] = cars['Name'].str.split().str[0]  # Extract brand from the name column\nchart = alt.Chart(cars).mark_bar().encode(\n    alt.Y('Brand', title=None, sort='x'),\n    alt.X('mean(Horsepower)')).properties(width=200, height=350)\nchart | chart.encode(alt.Color('Brand', legend=None, scale=alt.Scale(scheme='tableau20')))\n\n\n\n\n\n\n\n\nA few slides ago we saw how encoding the same variable as both shape and colour could make our figures more effective although it is technically redundant.\nSimilarly, you might come across bar charts where the author of the visualization has added a distinct colour for each bar.\nThis can work when there are relatively few bars, but it usually does not add anything and can become directly disorienting when there are many bars as in this slide.\nIt is usually preferable to colour all the bars in the same colour (or after another categorical variable, such as “Origin” in this data), and let the axis labels alone identify which category the bar belongs to.\nOne exception to this is if each axis label is broken down into subcategories where each location has multiple bars based on another categorical variable, then colour can help.\nYou can also see that the car brands are not systematically named and we would need to clean this data to unify e.g. ‘vw’, ‘vokswagen’, and ‘volkswagen’. The reason we’re setting the height is just to fit the plot on the slide."
  },
  {
    "objectID": "modules/module5/slides/module5_07.html#use-consistent-colouring-between-subplots-even-when-it-is-redundant",
    "href": "modules/module5/slides/module5_07.html#use-consistent-colouring-between-subplots-even-when-it-is-redundant",
    "title": "Effective use of colour for categorical data",
    "section": "Use consistent colouring between subplots even when it is redundant",
    "text": "Use consistent colouring between subplots even when it is redundant\n\nchart = alt.Chart(cars).mark_bar().encode(\n    alt.X('Origin', title=None),\n    alt.Y('mean(Horsepower)'),\n    alt.Color('Origin', title=None))\n(chart | chart.mark_line().encode(alt.X('Year', title=None), alt.StrokeDash('Origin', title=None)))\n\n\n\n\n\n\n\n\nWhen creating a figure that contains several subplots, it is important to be consistent in the colouring between these even if the colouring is redundant in one of the subplots.\nHere we have coloured the bars to match the lines although we could tell the categories only from reading the axis labels.\nIt is important to not use different colours for the same categories between subplots. For example, if we made an additional subplot that only contained Japan and the USA, then we should make sure that these are still coloured in orange and red. Since the default Altair colour scheme will always start with blue, we would need to manually specify the colours in this case."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#charts-without-titles-are-hard-to-interpret",
    "href": "modules/module5/slides/module5_03.html#charts-without-titles-are-hard-to-interpret",
    "title": "Descriptive titles and labels",
    "section": "Charts without titles are hard to interpret",
    "text": "Charts without titles are hard to interpret\n\n\n\nWhy do we need to add chart titles and labels to our plots?\nLet’s find out by looking at an example. To the left, you can see a poorly labelled chart. The y-axis label is not very descriptive, there is no overall chart title and we have even forgotten to include the legend.\nIt is impossible to tell what this figure is showing!"
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#descriptive-titles-make-charts-more-effective",
    "href": "modules/module5/slides/module5_03.html#descriptive-titles-make-charts-more-effective",
    "title": "Descriptive titles and labels",
    "section": "Descriptive titles make charts more effective",
    "text": "Descriptive titles make charts more effective\n\n\n\nIn this slide, we have a chart with a descriptive title that conveys the main take-home message of our visualization. The y-axis is also clearly titled while its unit ($) is embedded in the axis label.\nThis figure makes it immediately clear why we have made this visualization and what question we are trying to answer.\nThis is a major goal when making visualizations: there should be no supplementary text needed to explain why we made the figure and what its main takeaways are.\nProperly used chart and axis titles are a big help to reach this goal.\nIn this slide deck, we will gradually build up to creating a figure like the one, you can see in this slide."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#chart-titles-should-convey-the-main-take-home-message",
    "href": "modules/module5/slides/module5_03.html#chart-titles-should-convey-the-main-take-home-message",
    "title": "Descriptive titles and labels",
    "section": "Chart titles should convey the main take-home message",
    "text": "Chart titles should convey the main take-home message\n\nimport altair as alt\nfrom vega_datasets import data\n\nstocks = data.stocks()\nstock_title = \"Google's stock experiencing heavier fluctuations than competitors\"\nalt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol').properties(height=275)\n\n\n\n\n\n\n\n\nThe title of the chart should clearly convey the take-home message of the figure to the reader. It should answer the question you posed before making the visualization.\nIf you made a more general visualization or answered multiple questions, it is ok with a more general title. Note however such general visualizations are rarer in communication compared to exploration.\nWe could have had a title targeted to a specific time period, such as “Google’s stock outperforms competitors in 2009”, but then we might want to narrow down the date region at least a bit.\nA less effective title here would be something like “Stock prices over time”, which is too general and not very informative."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#subtitles-can-provide-additional-detail",
    "href": "modules/module5/slides/module5_03.html#subtitles-can-provide-additional-detail",
    "title": "Descriptive titles and labels",
    "section": "Subtitles can provide additional detail",
    "text": "Subtitles can provide additional detail\n\nstock_title = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n     subtitle = \"Prices have been surging since 2009, but have still not reached an all-time high\")\nalt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol')\n\n\n\n\n\n\n\n\nIf you want to add additional details you can create a subtitle. Here we use TitleParams to create the main title text and the subtitle which we then pass to the title parameter in Chart."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#titles-can-be-aligned-according-to-the-presentation-context",
    "href": "modules/module5/slides/module5_03.html#titles-can-be-aligned-according-to-the-presentation-context",
    "title": "Descriptive titles and labels",
    "section": "Titles can be aligned according to the presentation context",
    "text": "Titles can be aligned according to the presentation context\n\nstock_title_left = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n     subtitle = \"Prices have been surging since 2009, but have still not reached an all-time high\",\n     anchor='start')\nalt.Chart(stocks, title=stock_title_left).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol')\n\n\n\n\n\n\n\n\nDepending on the context in which we are presenting the figure, it can look more appealing to left-align the title.\nThis is done via the anchor parameter in Altair."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#breaking-titles-into-multiple-lines-can-improve-readability",
    "href": "modules/module5/slides/module5_03.html#breaking-titles-into-multiple-lines-can-improve-readability",
    "title": "Descriptive titles and labels",
    "section": "Breaking titles into multiple lines can improve readability",
    "text": "Breaking titles into multiple lines can improve readability\n\nstock_title_linebreak = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n     subtitle = [\"Prices have been surging since 2009 but have still\", \"not reached the same levels as in late 2007.\"])\nalt.Chart(stocks, title=stock_title_linebreak).mark_line().encode(\n    alt.X('date'),\n    alt.Y('price'),\n    color='symbol')\n\n\n\n\n\n\n\n\nIf we have a really long title, we can improve readability by breaking it into multiple lines. Altair converts lists of strings into multiline titles.\nWhen creating a multiline title, it is advisable to try to keep all lines about the same length. Generally, it also looks better if the lines are ordered by length, for example from the longest to the shortest as in this slide.\nFor this chart, the single line subtitle still looks more appealing due to all the whitespace on the sides of the subtitle in this slide, so we will go back to a single-line subtitle in the next slide."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#axis-titles-should-be-capitalized-regular-words-rather-than-dataframe-column-names",
    "href": "modules/module5/slides/module5_03.html#axis-titles-should-be-capitalized-regular-words-rather-than-dataframe-column-names",
    "title": "Descriptive titles and labels",
    "section": "Axis titles should be capitalized regular words rather than dataframe column names",
    "text": "Axis titles should be capitalized regular words rather than dataframe column names\n\nalt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title='Date'),\n    alt.Y('price', title='Price (USD)'),\n    color='symbol')\n\n\n\n\n\n\n\n\nDuring EDA, axis titles etc don’t matter that much, since you are the primary person interpreting them and it is often clear to you what titles mean as long as you have given your dataframe reasonable column names.\nIn communication, however, your plots need to be interpreted by other people, often on their own without your explanation. Setting descriptive titles adds significantly to this interpretability.\nAxis titles should be regular words that are descriptive, capitalized, and contain spaces instead of underscores. Cryptic lower case column names with underscores are not at all effective for communication figures and look unprofessional.\nAny relevant units of measurement can be included in parenthesis to clarify further for the reader or as part of the axis label as we will see later.\nTo set the title for the axes, we use the title parameter in the axis, similar to how we used it in the Chart for the figure title."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#legend-and-axis-titles-are-often-redundant-for-categorical-and-temporal-variable",
    "href": "modules/module5/slides/module5_03.html#legend-and-axis-titles-are-often-redundant-for-categorical-and-temporal-variable",
    "title": "Descriptive titles and labels",
    "section": "Legend and axis titles are often redundant for categorical and temporal variable",
    "text": "Legend and axis titles are often redundant for categorical and temporal variable\n\n# Assigning to a variable for use in the next slide\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('price', title='Price (USD)'),\n    alt.Color('symbol', title=None))\nlines\n\n\n\n\n\n\n\n\nFor axis titles that encode a temporal variable we rarely need a title as it is clear that the x-axis represents time. Here we remove the title text by setting the parameter to None.\nSimilarly, axis and legend titles that denote a categorical variable are often redundant and it is clear what the categories are.\nThanks to Altair’s consistent grammar, we change the title of the legend in the same way that we change the axis titles."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#direct-labelling-is-often-preferred-over-legend-when-applicable",
    "href": "modules/module5/slides/module5_03.html#direct-labelling-is-often-preferred-over-legend-when-applicable",
    "title": "Descriptive titles and labels",
    "section": "Direct labelling is often preferred over legend when applicable",
    "text": "Direct labelling is often preferred over legend when applicable\n\nstock_max_date = stocks[stocks['date'] == stocks['date'].max()]\ntexts = alt.Chart(stock_max_date).mark_text(align='left', dx=2).encode(\n    x='date',\n    y='price',\n    text='symbol',\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nIn this graph, we could label the lines directly instead of relying on the legend text and additional coloured line marks.\nThis has the advantage that we don’t have to go back and forth between the legend and the plot, and avoids issues from matching up the colours incorrectly.\nWe use align to attach the left part of the label to the data point at the end of the line, and then dx (delta x) to add a little whitespace between the label and the end of the line.\nTo show both the lines and text labels, we layer the chart lines that we created in the last slide with the chart texts that we create here."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#to-solve-overlapping-text-labels-we-have-to-manually-specify-their-position",
    "href": "modules/module5/slides/module5_03.html#to-solve-overlapping-text-labels-we-have-to-manually-specify-their-position",
    "title": "Descriptive titles and labels",
    "section": "To solve overlapping text labels we have to manually specify their position",
    "text": "To solve overlapping text labels we have to manually specify their position\n\nstock_max_date.loc[stock_max_date['symbol'] == \"IBM\", 'price'] = 140\nstock_max_date.loc[stock_max_date['symbol'] == \"AMZN\", 'price'] = 110\ntexts = alt.Chart(stock_max_date).mark_text(align='left', dx=2).encode(\n    x='date',\n    y='price',\n    text='symbol',\n    color=alt.Color('symbol', legend=None))\nlines + texts\n\n\n\n\n\n\n\n\nThere is no way to automatically separate the labels in Altair, so we have to manually specify new y-axis values for the text of the overlapping labels.\nHere we modify the dataframe we created in the last slide by setting the value for the IBM text label to 140 and the value for the AMZN text label to 110 so that they are no longer overlapping."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#units-can-be-incorporated-directly-in-the-axis-labels-instead-of-the-axis-title",
    "href": "modules/module5/slides/module5_03.html#units-can-be-incorporated-directly-in-the-axis-labels-instead-of-the-axis-title",
    "title": "Descriptive titles and labels",
    "section": "Units can be incorporated directly in the axis labels instead of the axis title",
    "text": "Units can be incorporated directly in the axis labels instead of the axis title\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('price', title='Price', axis=alt.Axis(format='$')),\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nInstead of writing measurement units in parenthesis in the axis title, they can be incorporated directly into each axis label by setting the axis format.\nYou can see that the dollar sign was prefixed each numerical label on the y-axis, but because we overwrote the default formatting of the axis, it changed the labels to scientific notation instead of standard international units."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#axis-formatting-labels-can-be-combined",
    "href": "modules/module5/slides/module5_03.html#axis-formatting-labels-can-be-combined",
    "title": "Descriptive titles and labels",
    "section": "Axis formatting labels can be combined",
    "text": "Axis formatting labels can be combined\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('price', title='Closing price', axis=alt.Axis(format='$s')),\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nAll Altair’s label format strings can be found here.\nNotes: To revert back to displaying the full number instead of using scientific formatting, we can combine the dollar sign with the format string s, which stands for SI-units.\nNow that we have the units in the label, the title “Price” appear a bit redundant and we can either remove it or (preferably) improve it.\nHere we add more detail to indicate that this is the closing price of each stock.\nIn addition to being used in the x and y-axis, axis formatting can be applied to any aspect of Altair that uses alt.Axis, including legends for colours and sizes.\nOther useful format strings include % for including a percentage sign, e to force a scientific format, d to force integer format, ~ which removes trailing zeros (e.g. 1.0 becomes 1), and , which adds a comma as the thousands separator. All label format strings can be found here."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#the-number-of-axis-ticks-can-be-reduced-to-make-the-plot-less-noisy",
    "href": "modules/module5/slides/module5_03.html#the-number-of-axis-ticks-can-be-reduced-to-make-the-plot-less-noisy",
    "title": "Descriptive titles and labels",
    "section": "The number of axis ticks can be reduced to make the plot less noisy",
    "text": "The number of axis ticks can be reduced to make the plot less noisy\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None, axis=alt.Axis(tickCount=3)),\n    alt.Y('price', title='Closing price', axis=alt.Axis(format='$s')),\n    color=alt.Color('symbol', legend=None))\n\nlines + texts\n\n\n\n\n\n\n\n\nAltair usually picks a suitable number of axis ticks, but sometimes we might want to tweak this in order to achieve a specific effect, such as a more clean-looking plot.\nHere we reduce the number of ticks along the x-axis to only show three of the years, by setting tickCount=3 in alt.Axis().\nNote that Altair will round the number of ticks to a number that works well with your data, so you might not always get the exact number you ask for (e.g. it wouldn’t make much sense to have 4 ticks here since that would mean the year “2002.5” and “2007.5”)."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#gridlines-can-be-removed-when-they-are-not-helpful",
    "href": "modules/module5/slides/module5_03.html#gridlines-can-be-removed-when-they-are-not-helpful",
    "title": "Descriptive titles and labels",
    "section": "Gridlines can be removed when they are not helpful",
    "text": "Gridlines can be removed when they are not helpful\n\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None, axis=alt.Axis(tickCount=3, grid=False)),\n    alt.Y('price', title='Closing price', axis=alt.Axis(format='$s')),\n    color=alt.Color('symbol', legend=None))\n\n(lines + texts).configure_view(strokeWidth=0)\n\n\n\n\n\n\n\n\nGridlines are usually helpful for guiding the eye and making exact comparisons and as long as they are faint they don’t distract from the visual overall.\nThere are still situations where we might want to remove them.\nIn our plot on the last slide, we might not like the appearance of the single gridline in the middle and the one really close to the right axis, so we can turn off the vertical gridlines bypassing grid=False to the axis parameter of alt.X.\nTo remove the gray box outlining the entire figure, we can set the strokeWidth of the layered chart."
  },
  {
    "objectID": "modules/module5/slides/module5_03.html#font-sizes-can-be-adjusted-for-different-communication-purposes",
    "href": "modules/module5/slides/module5_03.html#font-sizes-can-be-adjusted-for-different-communication-purposes",
    "title": "Descriptive titles and labels",
    "section": "Font sizes can be adjusted for different communication purposes",
    "text": "Font sizes can be adjusted for different communication purposes\n\nstock_title = alt.TitleParams(\n    \"Google's stock experiencing heavier fluctuations than competitors\",\n    subtitle=\"Prices have been surging since 2009 but have still not reached the same levels as in late 2007.\",\n    fontSize=18, subtitleColor='steelblue', subtitleFontWeight='bold')\nlines = alt.Chart(stocks, title=stock_title).mark_line().encode(\n    alt.X('date', title=None, axis=alt.Axis(tickCount=3, grid=False)),\n    alt.Y('price', title='Closing price', axis=alt.Axis(\n        format='$s', labelFontSize=12, titleFontSize=16)),\n    color=alt.Color('symbol', legend=None)).properties(height=275)\n(lines + texts).configure_view(strokeWidth=0)\n\n\n\n\n\n\n\n\nf you are making a figure for the web, the default font sizes in Altair are generally a good choice. They are maybe a little bit on the smaller side of the ideal range, but it is possible to zoom in if really needed.\nIf you are making a figure for print, it is recommended to increase the font sizes to make sure that your figure is readable for the context, you are presenting it in.\nIt is advisable to err on the side of larger rather than smaller, for those members of the audience that have a hard time discerning small text.\nIn this figure, you can see several examples of how to set font sizes for titles and labels, as well as how to change the font colour and weight.\nThis figure does not necessarily look good as a whole, but serves to demonstrate how to set multiple of these properties at once.\nTo learn more about good guidelines for titles and labels, you can read section 22 - 22.2 in the book Fundamentals of Data Visualization."
  },
  {
    "objectID": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "href": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nFollow guidelines for best practices in visualization design.\nAdjust axes extents and formatting.\nModify titles of figure elements.\nChoose appropriate color schemes for your data.\nUse pre-made and custom color schemes.\nSelectively highlight and annotate data with color and text.\nDirectly label data instead of using legends."
  },
  {
    "objectID": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#true-or-false-colouring-in-black-or-white",
    "href": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#true-or-false-colouring-in-black-or-white",
    "title": "6.1. Exercises",
    "section": "True or False: Colouring in Black or White",
    "text": "True or False: Colouring in Black or White",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#texting-and-selecting",
    "href": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#texting-and-selecting",
    "title": "6.1. Exercises",
    "section": "Texting and Selecting",
    "text": "Texting and Selecting",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#precipitation-contemplation",
    "href": "modules/module5/module5-12-true_or_false_colouring_in_black_or_white.html#precipitation-contemplation",
    "title": "6.1. Exercises",
    "section": "Precipitation Contemplation",
    "text": "Precipitation Contemplation\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s take a look again at the Government of Canada data that contains the weather in Kamloops from 2009-2012. We left off seeing that precipitation was higher in the hotter months.\n\n\n\n\n\n\nFor the 4 years of data, Let’s find out the total rainfall in each month. So between the years 2009 and 2012, how much precipitation was there in total during all the Januarys, Februarys, etc? Remember that we will have to aggregate values here.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named rain_plot, use the data source temps_df to make a bar plot.\nMap the month on the y-axis and the sum of all the precipitation for each month on the x-axis. Print your chart first and examine which month has the most precipitation.\nColor rain_plot by designating a different colour bar to the month with the highest rainfall.\nMake sure you are giving the x-axis an appropriate label and the plot a title.\nIn a second plot named text_plot, add text to each bar that shows the aggregate precipitation for each month and format it so it includes integer values only. Make sure it is aligned to the left and located 5 units to the right of the bar (use dx for this). Set the text colour as black.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_bar()?\nAre you setting alt.X('sum(total_precipitate_mm)', title=\"Total precipitate per month (mm)\")?\nAre you setting alt.Y('month', sort=list(month_name), title=None)?\nAre you setting color=alt.condition(alt.datum.month == 'May', alt.value('colour1'), alt.value('colour2')?\nAre you setting a title in .properties()?\nIn the text plot, are you coding mark_text(align='left', dx=5)?\nAre you setting text=alt.Text('sum(total_precipitate_mm)', format='d')?\nAre you setting the colour to black using color = alt.value('black')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#true-or-false-colouring-in-the-blank",
    "href": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#true-or-false-colouring-in-the-blank",
    "title": "5.1. Exercises",
    "section": "True or False: Colouring in the Blank",
    "text": "True or False: Colouring in the Blank",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#colouring-by-number-questions",
    "href": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#colouring-by-number-questions",
    "title": "5.1. Exercises",
    "section": "Colouring by Number Questions",
    "text": "Colouring by Number Questions",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#playing-with-colour",
    "href": "modules/module5/module5-10-true_or_false_colouring_in_the_blank.html#playing-with-colour",
    "title": "5.1. Exercises",
    "section": "Playing with Colour",
    "text": "Playing with Colour\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThe University of British Columbia is based in Vancouver and we are lucky enough to have a relatively mild climate (mild climate, but rainy) but not all cities and towns in British Columbia have this luck. This made us think of a city further north of BC - Kamloops whose climate is more varied. This question will be using the data obtained from the Governement of Canada. The data we have collected is from 2009-2012.\n\n\n\n\n\n\nLet’s observe and visualize the mean monthly temperature of Kamloops and see if there is any relationship between rainfall, the season and temperature.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named temp_plot, use the data source temps_df to make a scatter plot (mark_circle) with points that are size 50.\nMap the date on the x-axis and the total rainfall levels on the y-axis.\nMap the mean temperature to a colour channel and select an appropriate colour scheme. Is a diverging or sequential scheme more appropriate? What is an appropriate mid-point value?\nMake sure you are giving the channels all proper labels and the plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_circle(size=50)?\nAre you setting alt.X('date', title=\"Date\"))?\nAre you setting alt.Y('total_rain_mm',title='rainfall total for the month (mm)')?\nIn the plot, are you coding alt.Color('mean_temp', title=' Mean Temperature', scale=alt.Scale(scheme='blueorange', domainMid=0))?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCan you think of why this might occur?",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-08-true_or_false_color_coordination.html#true-or-false-these-statement-are-either-black-or-white",
    "href": "modules/module5/module5-08-true_or_false_color_coordination.html#true-or-false-these-statement-are-either-black-or-white",
    "title": "4.1. Exercises",
    "section": "True or False: These Statement are Either Black or White",
    "text": "True or False: These Statement are Either Black or White",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-08-true_or_false_color_coordination.html#colour-coordination-quesions",
    "href": "modules/module5/module5-08-true_or_false_color_coordination.html#colour-coordination-quesions",
    "title": "4.1. Exercises",
    "section": "Colour Coordination Quesions",
    "text": "Colour Coordination Quesions",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-08-true_or_false_color_coordination.html#adding-some-colour-to-penguins",
    "href": "modules/module5/module5-08-true_or_false_color_coordination.html#adding-some-colour-to-penguins",
    "title": "4.1. Exercises",
    "section": "Adding some Colour to Penguins",
    "text": "Adding some Colour to Penguins\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe are about to talk our typically black and white penguins and brighten these birds up a bit! Using what we learned in the last 2 sections, let’s see if knowing flipper and body mass length can help us identify the species of penguin.\n\n\n\n\n\n\nLet’s plot the body_mass_g and flipper_length_mm but this time, let’s add a colour and shape channel to the species and explore if there are appears to be anything telling.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named colour_plot, use the data source penguins_df to make a scatter plot (mark_point) with points that are size 10.\nMap the flipper length on the x-axis and the body mass on the y-axis.\nMap the penguin species to both a colour and a shape channel.\nSelect a desired colour scheme, and assign it to the colour channel.\nIn this plot, it might be a good idea to restrict the axis ranges. Select an appropriate domain for both the x and y-axis.\nMake sure you are giving the channels all proper labels and the plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_point(size=10)?\nAre you setting alt.X('flipper_length_mm', scale=alt.Scale(domain=[160, 240]), title=\"Flipper length (mm)\")?\nAre you setting alt.X(''body_mass_g', scale=alt.Scale(domain=[2500, 6500]), title='Mass (grams)')?\nIn the plot, are you coding alt.Color('species', title='Penguin species', scale=alt.Scale(scheme='desired-set-name'))?\nAre you setting alt.Shape('species')?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-true_or_false_transformations.html#true-or-false-transformations",
    "href": "modules/module5/module5-06-true_or_false_transformations.html#true-or-false-transformations",
    "title": "3.1. Exercises",
    "section": "True or False: Transformations",
    "text": "True or False: Transformations",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-true_or_false_transformations.html#transformations-and-presentations",
    "href": "modules/module5/module5-06-true_or_false_transformations.html#transformations-and-presentations",
    "title": "3.1. Exercises",
    "section": "Transformations and Presentations",
    "text": "Transformations and Presentations",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-true_or_false_transformations.html#using-transformations-in-action",
    "href": "modules/module5/module5-06-true_or_false_transformations.html#using-transformations-in-action",
    "title": "3.1. Exercises",
    "section": "Using Transformations in Action!",
    "text": "Using Transformations in Action!\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThis variation of the Phillipino dataset originally from Kaggle shows the income and expenditure (in PHP) of residents in the Philippines.\n\n\n\n\n\n\nFirst, let’s just plot the income vs education expenditure with no transformations. Let’s make sure we are formatting the axes correctly and determine if we can make any conclusions regarding the relationship between the two variables.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named income_plot, use the data source income_df to make a scatterplot.\nMap the tot_income on the x-axis and education_expenditure on the y-axis.\nSet the opacity of the points to 0.5 and size to 10.\nMake sure to give the x and y-axis labels (with units) and the plot a title.\nThe x and y-axis values should have SI-units.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('tot_income', axis=alt.Axis(format='s'), title='Income (PHP)'))?\nAre you setting alt.Y('education_expenditure', axis=alt.Axis(format='s'), title='Education expenditure (PHP)')?\nAre you using .mark_circle()?\nAre you setting opacity=0.5, size=10 within .mark_circle()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s difficult to draw any clear conclusion on the relationship between these two variables. It might be helpful to transform these axes.\n\n\n\n\n\nLet’s transform the axes now!\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a new plot named income_log_plot create a new scatter plot similar to what we did before.\nMap the tot_income on the x-axis and education_expenditure on the y-axis.\nSet the opacity of the points to 0.5 and size to 10.\nMake sure to give the x and y-axis labels (with units) and the plot a title.\nThe x and y-axis values should have SI-units.\nThis time, transform both the x and y-axes with the appropriate transformation we answered from the multiple-choice question above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('tot_income', axis=alt.Axis(format='s'), title='Income (PHP)'), scale=alt.Scale(type='symlog'))?\nAre you setting alt.Y('education_expenditure', axis=alt.Axis(format='s'), title='Education expenditure (PHP)', scale=alt.Scale(type='symlog'))?\nAre you using .mark_circle()?\nAre you setting opacity=0.5, size=10 within .mark_circle()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-04-true_or_false_titles_and_formatting.html",
    "href": "modules/module5/module5-04-true_or_false_titles_and_formatting.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThe penguins that we see time and time again is going to help us practice with formatting in this question.\n\n\n\n\n\n\nLet’s create a bar chart counting the observations of each species, which we can use to determine which penguins are the most common in the Antartic.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named base, use the data source penguins_df to make a histogram of the different quantities of penguin species in the data.\nMap the species on the y-axis and the count on the x-axis.\nIn the base plot make sure to give a label to the x-axis. Since the species is categorical, do not set a label for the y-axis.\nDisplay the base plot and take a look at what it’s communicating.\nCreate text by using mark_text() and save this in an object named text. It should have the same x and y mapping as the base plot but this time you want to make sure the count is displayed on the side of each species bar. Make sure it’s centered in alignment and located at dx=10.\nAfter observing the plot create and object named penguin_title using .TitleParams(). In this method, you will need to specify an insightful title, and subtitle, give the title a fontsize of 18, and set the subtitle colour to firebrick.\nRemove the grey box outlining the entire figure by setting the argument strokeWidth in the .configure_view() method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nIn the text plot, are you coding .mark_text(align='center', dx=10)?\nIn the text plot, are you specifying alt.Text('count()'?\nfor the titles formatting are you making sure to use the arguments subtitle, fontSize and subtitleColor?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe base plot of the code above looks like this:",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-04-true_or_false_titles_and_formatting.html#formatting-fun",
    "href": "modules/module5/module5-04-true_or_false_titles_and_formatting.html#formatting-fun",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nThe penguins that we see time and time again is going to help us practice with formatting in this question.\n\n\n\n\n\n\nLet’s create a bar chart counting the observations of each species, which we can use to determine which penguins are the most common in the Antartic.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nIn a plot named base, use the data source penguins_df to make a histogram of the different quantities of penguin species in the data.\nMap the species on the y-axis and the count on the x-axis.\nIn the base plot make sure to give a label to the x-axis. Since the species is categorical, do not set a label for the y-axis.\nDisplay the base plot and take a look at what it’s communicating.\nCreate text by using mark_text() and save this in an object named text. It should have the same x and y mapping as the base plot but this time you want to make sure the count is displayed on the side of each species bar. Make sure it’s centered in alignment and located at dx=10.\nAfter observing the plot create and object named penguin_title using .TitleParams(). In this method, you will need to specify an insightful title, and subtitle, give the title a fontsize of 18, and set the subtitle colour to firebrick.\nRemove the grey box outlining the entire figure by setting the argument strokeWidth in the .configure_view() method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nIn the text plot, are you coding .mark_text(align='center', dx=10)?\nIn the text plot, are you specifying alt.Text('count()'?\nfor the titles formatting are you making sure to use the arguments subtitle, fontSize and subtitleColor?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe base plot of the code above looks like this:",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-true_or_false_is_it_effective.html#true-or-false-is-it-effective",
    "href": "modules/module5/module5-02-true_or_false_is_it_effective.html#true-or-false-is-it-effective",
    "title": "1.1. Exercises",
    "section": "True or False: Is it Effective?",
    "text": "True or False: Is it Effective?",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-true_or_false_is_it_effective.html#which-graph-is-effective",
    "href": "modules/module5/module5-02-true_or_false_is_it_effective.html#which-graph-is-effective",
    "title": "1.1. Exercises",
    "section": "Which Graph is Effective?",
    "text": "Which Graph is Effective?\n\n\n\n\n\n\n\n\n\nPlot A\n\n\n\nPlot B",
    "crumbs": [
      "**M5. Plots for Communication**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-00-module_learning_outcomes.html",
    "href": "modules/module5/module5-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module4/slides/module4_07.html#a-statistical-summary-is-useful-to-complement-visualizations",
    "href": "modules/module4/slides/module4_07.html#a-statistical-summary-is-useful-to-complement-visualizations",
    "title": "Exploratory Data Analysis on Categorical Data",
    "section": "A statistical summary is useful to complement visualizations",
    "text": "A statistical summary is useful to complement visualizations\n\nimport pandas as pd\n\nmovies_extended = pd.read_csv(\"data/movies-extended-eda.csv\")\nmovies_extended.describe(exclude=\"number\")\n\n\n\n\n\n\n\n\nMajor Genre\nMPAA Rating\n\n\n\n\ncount\n996\n994\n\n\nunique\n6\n4\n\n\ntop\nComedy\nPG-13\n\n\nfreq\n286\n413\n\n\n\n\n\n\n\n\nSince we have already seen the dataset rows and info in the last slide deck, we start by describing the data here.\nIn addition to generally receiving more information about our data, categorical counts are helpful when building machine learning classification models. Having an unbalanced data set for the dataframe column we are trying to predict (i.e., uneven numbers of things in the various categories) would mean that we need to compensate for this in our downstream analysis.\nThere are many other examples in statistical analysis, where uneven categories can change how you need to do your analysis. Failing to account for this would lead to less accurate and possibly misleading results.\nAs for the numerical columns above, we start by printing information about the most frequently occurring categorical values in each of the columns. We use exclude to indicate that we want to use all other columns except the numerical ones.\nWe can already see what the most commons values are for each column, but let’s visualize these in a bar chart and cross-reference this table with our plot on the next slide."
  },
  {
    "objectID": "modules/module4/slides/module4_07.html#visualizing-the-counts-of-all-categorical-columns-helps-us-understand-the-data",
    "href": "modules/module4/slides/module4_07.html#visualizing-the-counts-of-all-categorical-columns-helps-us-understand-the-data",
    "title": "Exploratory Data Analysis on Categorical Data",
    "section": "Visualizing the counts of all categorical columns helps us understand the data",
    "text": "Visualizing the counts of all categorical columns helps us understand the data\n\nimport altair as alt\n\ncategorical_columns = movies_extended.select_dtypes('object').columns.tolist()\n(alt.Chart(movies_extended)\n .mark_bar().encode(\n     alt.X('count()'),\n     alt.Y(alt.repeat(), type='nominal', sort='x'))\n .properties(width=200, height=150)\n .repeat(categorical_columns))\n\n\n\n\n\n\n\n\nTo answer how the counts are distributed between different categorical values, we will create a bar chart for each categorical dataframe column.\nThe syntax here is very similar to when we created the histograms, but we don’t use any bins, and the axis type is now nominal instead of quantitative.\nWe can see that most movies are dramas and comedies, and fall within the R and PG-13 ratings.\nWe could have included the title column here to check that no two movies have the same title. After that, we can safely skip that subplot since it is rather messy with hundreds of titles.\nHowever, since this is EDA and not a plot created for communication, we could also have left it in and carried on"
  },
  {
    "objectID": "modules/module4/slides/module4_07.html#repeat-can-also-be-used-to-explore-the-counts-of-combinations-of-categorical-columns",
    "href": "modules/module4/slides/module4_07.html#repeat-can-also-be-used-to-explore-the-counts-of-combinations-of-categorical-columns",
    "title": "Exploratory Data Analysis on Categorical Data",
    "section": "Repeat can also be used to explore the counts of combinations of categorical columns",
    "text": "Repeat can also be used to explore the counts of combinations of categorical columns\n\n(alt.Chart(movies_extended).mark_circle().encode(\n    alt.X(alt.repeat('column'), type='nominal', sort='-size', title=None),\n    alt.Y(alt.repeat('row'), type='nominal', sort='size', title=None),\n    alt.Color('count()', title=None),\n    alt.Size('count()', title=None))\n .repeat(row=categorical_columns, column=categorical_columns)\n .resolve_scale(color='independent', size='independent'))\n\n\n\n\n\n\n\n\nThe same repeat principles can be used to count combinations of categoricals, helping us get more resolution into where the data lies.\nThis plot should be read similarly to the pairplot we made earlier, so we only look at the one plot below the diagonal. In this case, it means we could have just made a single plot, but if you have more than two categories to repeat over, there would be additional plots under the diagonal.\nIn this plot, we can see that comedies rated PG-13 and dramas rated R are the most common combinations in our data.\nIn fact, there are so many more of these than some of the others that we should be careful if we proceed to perform any statistical tests on this data as some analysis methods are not robust against samples sizes that are this unequal and we need to adapt our analysis strategy accordingly"
  },
  {
    "objectID": "modules/module4/slides/module4_07.html#altairs-grammar-allows-us-to-repeat-facetted-charts",
    "href": "modules/module4/slides/module4_07.html#altairs-grammar-allows-us-to-repeat-facetted-charts",
    "title": "Exploratory Data Analysis on Categorical Data",
    "section": "Altair’s grammar allows us to repeat facetted charts",
    "text": "Altair’s grammar allows us to repeat facetted charts\n\nmovies_extended['Top Rated'] = movies_extended['IMDB Rating'] &gt; 8\n(alt.Chart(movies_extended[movies_extended['MPAA Rating'].isin([\"G\", \"R\"])])\n .mark_boxplot().encode(\n     alt.X('Running Time min', type='quantitative'),\n     alt.Y(alt.repeat('row'), type='nominal'))\n .facet(column='MPAA Rating')\n .repeat(row=['Major Genre', 'Top Rated']))\n\n\n\n\n\n\n\n\nThanks to the flexible grammar of graphics in Altair, we are able to repeat complex charts, such as those already containing facets.\nIn this case, we are interested in comparing the counts of the Major Genres and Create Types within each of the G and R MPAA RAtings.\nTo achieve this, we first facet the chart and then repeat it, combing the principles we have learned so far in the course.\nNow we can answer questions such as which the most popular genres are within each of the ratings.\nAs we might have expected, the top genres differ depending on the MPAA Rating, and there are many genres that are not even present for the family-rated G movies."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#reading-in-the-data",
    "href": "modules/module4/slides/module4_03.html#reading-in-the-data",
    "title": "Visualizing Categorical Distributions",
    "section": "Reading in the data",
    "text": "Reading in the data\n\nimport altair as alt\nimport pandas as pd\n\nmovies_extended = pd.read_csv(\"data/movies-extended.csv\")\nmovies_extended\n\n\n\n\n\n\n\n\nTitle\nUS Gross\nWorldwide Gross\nUS DVD Sales\n...\nDirector\nRotten Tomatoes Rating\nIMDB Rating\nIMDB Votes\n\n\n\n\n0\nBoynton Beach Club\n3127472.0\n3127472.0\nNaN\n...\nNaN\nNaN\nNaN\nNaN\n\n\n1\nBroken Arrow\n70645997.0\n148345997.0\nNaN\n...\nJohn Woo\n55.0\n5.8\n33584.0\n\n\n2\nBrazil\n9929135.0\n9929135.0\nNaN\n...\nTerry Gilliam\n98.0\n8.0\n76635.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1187\nZodiac\n33080084.0\n83080084.0\n20983030.0\n...\nDavid Fincher\n89.0\nNaN\nNaN\n\n\n1188\nThe Legend of Zorro\n45575336.0\n141475336.0\nNaN\n...\nMartin Campbell\n26.0\n5.7\n21161.0\n\n\n1189\nThe Mask of Zorro\n93828745.0\n233700000.0\nNaN\n...\nMartin Campbell\n82.0\n6.7\n4789.0\n\n\n\n\n1190 rows × 16 columns\n\n\n\n\nWe’re continuing to work with the movies data set from the last slide deck, but here we will focus on the categorical dataframe columns."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#bar-charts-are-effective-for-visualizing-categorical-distributions-of-a-single-column",
    "href": "modules/module4/slides/module4_03.html#bar-charts-are-effective-for-visualizing-categorical-distributions-of-a-single-column",
    "title": "Visualizing Categorical Distributions",
    "section": "Bar charts are effective for visualizing categorical “distributions” of a single column",
    "text": "Bar charts are effective for visualizing categorical “distributions” of a single column\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()'),\n    alt.Y('Major Genre', sort='x'))\n\n\n\n\n\n\n\n\nWe have already seen examples of visualizing categorical distributions when we used bar charts to plot the count of categories in previous modules.\nAlthough these plots represent categorical distributions, it’s good to know that they are commonly referred to as just showing the counts of the categories, rather than their “distribution”.\nHere we have made a bar chart to answer the question “Which is the most common genre among movies in this dataset?”.\nWe can see that the dataset consists of mostly comedies and dramas with very few concert/performance films."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#stacked-bar-charts-can-visualize-counts-for-combinations-of-two-categorical-columns",
    "href": "modules/module4/slides/module4_03.html#stacked-bar-charts-can-visualize-counts-for-combinations-of-two-categorical-columns",
    "title": "Visualizing Categorical Distributions",
    "section": "Stacked bar charts can visualize counts for combinations of two categorical columns",
    "text": "Stacked bar charts can visualize counts for combinations of two categorical columns\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()'),\n    alt.Y('Major Genre', sort='x'),\n    alt.Color('MPAA Rating'))\n\n\n\n\n\n\n\n\nWhat if we wanted to ask a more complex question that involves visualizing the combinatorial counts of two categorical columns?\nOur data contains the MPAA rating for each movie, which is a classification given by the Motion Picture Association indicating what age groups, a movie is suitable for: - G – General Audiences - PG – Parental Guidance Suggested - PG-13 – Parents Strongly Cautioned - R – Restricted Do you think there are any differences in the proportions of ratings between movie genres?\nFor example, we might already have a hypothesis that there won’t be any horror movies that are appropriate for children.\nTo find out, we could colour the bars according to the MPAA rating as in this slide. However, one aspect of our chart is not very intuitive: the colour legend and the stacked bar segments are not sorted in the same order."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#reordering-the-bar-segments-aligns-it-with-the-order-in-the-legend",
    "href": "modules/module4/slides/module4_03.html#reordering-the-bar-segments-aligns-it-with-the-order-in-the-legend",
    "title": "Visualizing Categorical Distributions",
    "section": "Reordering the bar segments aligns it with the order in the legend",
    "text": "Reordering the bar segments aligns it with the order in the legend\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()'),\n    alt.Y('Major Genre', sort='x'),\n    alt.Color('MPAA Rating'),\n    alt.Order('MPAA Rating'))\n\n\n\n\n\n\n\n\nHere we have reordered the bar segments using alt.Order, so that they are in the same order as the legend. We could have opted to reorder the legend instead, but it is more natural to start with the rating for children (G) and proceed towards increasingly more mature ratings.\nIn this chart we can see that most comedies are rated PG-13, most dramas are rated R, that action movies almost only have movies rated either R or PG-13\nBut this doesn’t really answer our question, which was if there are any differences in the proportions of MPAA ratings between movie genres?\nWhile we can roughly see the relative proportions within a single bar, it is quite hard to compare the coloured segments between bars as proportions since the bars are of different lengths.\nIt is also impossible to see the proportions in the genres with fewer movies."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#rescaling-the-bar-lengths-facilitates-comparing-proportions-between-bars",
    "href": "modules/module4/slides/module4_03.html#rescaling-the-bar-lengths-facilitates-comparing-proportions-between-bars",
    "title": "Visualizing Categorical Distributions",
    "section": "Rescaling the bar lengths facilitates comparing proportions between bars",
    "text": "Rescaling the bar lengths facilitates comparing proportions between bars\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()', stack='normalize', title='Proportion of movies'),\n    alt.Y('Major Genre', sort='x'),\n    alt.Color('MPAA Rating'),\n    alt.Order('MPAA Rating'))\n\n\n\n\n\n\n\n\nHere we have changed the strategy for how the segments are stacked together by setting stack='normalize', which means to normalize/rescale each bar to span the entire length of the x-axis and label it as a proportion.\nThe plot looks quite unordered, because ‘x’ is not a meaningful way to sort the bars when they are all the same length. Instead, we would like to sort them by the length of one of the coloured segments."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#sorting-by-the-length-of-one-of-the-coloured-segments-make-the-chart-easier-to-read",
    "href": "modules/module4/slides/module4_03.html#sorting-by-the-length-of-one-of-the-coloured-segments-make-the-chart-easier-to-read",
    "title": "Visualizing Categorical Distributions",
    "section": "Sorting by the length of one of the coloured segments make the chart easier to read",
    "text": "Sorting by the length of one of the coloured segments make the chart easier to read\n\nsort_order = ['Adventure', 'Musical', 'Comedy', 'Romantic Comedy', 'Action',\n              'Drama', 'Concert/Performance', 'Documentary', 'Western',\n              'Thriller/Suspense', 'Horror', 'Black Comedy'] \nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()', stack='normalize', title='Proportion of movies'),\n    alt.Y('Major Genre', sort=sort_order),\n    alt.Color('MPAA Rating'),\n    alt.Order('MPAA Rating'))\n\n\n\n\n\n\n\n\nThat’s much better! Sorting the chart in an intuitive order has once again shown to be crucial for making our plot easier to interpret.\nIn a normalized stacked bar chart it makes sense to sort by either the first or the last coloured segment. Since not all genres have movies rated 'G', we chose to set the order based on 'R' instead.\nIf you are more interested in one genre than others, you could also choose to sort by that genre.\nNow we can directly compare the length of individual bar segments between the genres. We see that there certainly are differences in the proportions of MPAA ratings between movies in different genres.\nFor the R rating, it is immediately obvious exactly how big these differences are, and we can see that all black comedies are rated R, while almost no adventure movies receive this rating.\nIt is a little bit harder to compare the other rating because the coloured segments do not share the same baseline. We can still see that concerts and performance movies has the highest proportions of movies that are kids-friendly at 50%, while musicals, documentaries, and action movies have around 20% kids-friendly movies.\n(We specified the sort order manually in this slide, because it is rather advanced to extract this order using pandas, but we include an example in the transcript if you are interested in how this could be done:)\nsort_order = (\n    movies_extended\n    .groupby('Major Genre')['MPAA Rating']\n    .value_counts(normalize=True)\n    .xs('R', level='MPAA Rating')\n    .sort_values()\n    .index\n    .to_list())"
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#normalize-stacked-bar-charts-are-effective-at-visualizing-just-a-few-categories",
    "href": "modules/module4/slides/module4_03.html#normalize-stacked-bar-charts-are-effective-at-visualizing-just-a-few-categories",
    "title": "Visualizing Categorical Distributions",
    "section": "Normalize stacked bar charts are effective at visualizing just a few categories",
    "text": "Normalize stacked bar charts are effective at visualizing just a few categories\n\nsort_order = ['Concert/Performance', 'Musical', 'Documentary', 'Adventure', \n              'Comedy', 'Romantic Comedy', 'Drama',  'Action']\nalt.Chart(movies_extended[movies_extended['MPAA Rating'].isin(['G', 'PG'])]).mark_bar().encode(\n    alt.X('count()', stack='normalize', title='Proportion of movies'),\n    alt.Y('Major Genre', sort=sort_order),\n    alt.Color('MPAA Rating'),\n    alt.Order('MPAA Rating'))\n\n\n\n\n\n\n\n\nAs with all charts, there are shortcomings to normalized stacked bar charts as well. We saw in the last slide that it was a bit harder to compare the coloured segments that did not share a baseline versus the segments at the ends where the baseline is the same.\nThis means that normalized stacked bar charts are ideal when there are only two categories, since both segments will be easy to compare between categories.\nWe can see an example in this slide where we filtered the dataset to contain only movies rated either 'G' or 'PG'. It is easy to make a comparison for both the blue and the orange segments.\nStacked bar charts also work fine for 3-4 categories, but beyond that, they are usually ineffective. Even for 3-4 categories, it is often preferred to show the bars side-by-side instead of stacked."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#showing-bars-side-by-side-makes-it-easier-to-compare-their-exact-heights-within-a-category",
    "href": "modules/module4/slides/module4_03.html#showing-bars-side-by-side-makes-it-easier-to-compare-their-exact-heights-within-a-category",
    "title": "Visualizing Categorical Distributions",
    "section": "Showing bars side by side makes it easier to compare their exact heights within a category",
    "text": "Showing bars side by side makes it easier to compare their exact heights within a category\n\n(alt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()', title=''),\n    alt.Y('MPAA Rating', title=''),\n    alt.Color('MPAA Rating', legend=None))\n .properties(width=100, height=45)\n .facet('Major Genre', columns=4)\n .resolve_scale(x='independent'))\n\n\n\n\n\n\n\n\nIt is not (yet) possible to pass a different value to stack, which would put the bars next to each other. Instead, we could use faceting as in this slide.\nHere, we have also removed some of the axis titles to make the figure more compact and less crowded with text. You will learn more about customizing elements such as titles in the next module.\nBy resolving the x-scale to be independent between the plots, the bar height is not relative to the max in each facet. This makes them easier to compare as proportions both within and between facets while still retaining an indication of the count on the x-axis.\nIf we wanted to compare the absolute counts between facets, we would leave the axis at its default value: “shared”.\nThis type of visualization is effective when we want to accurately compare the heights of bars within a genre. For example, to answer the question: “Which are the most common MPAA ratings for each genre?”."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#switching-the-faceting-and-y-column-targets-the-plot-towards-a-slightly-different-question",
    "href": "modules/module4/slides/module4_03.html#switching-the-faceting-and-y-column-targets-the-plot-towards-a-slightly-different-question",
    "title": "Visualizing Categorical Distributions",
    "section": "Switching the faceting and y column targets the plot towards a slightly different question",
    "text": "Switching the faceting and y column targets the plot towards a slightly different question\n\n(alt.Chart(movies_extended).mark_bar().encode(\n    alt.X('count()', title=''),\n    alt.Y('Major Genre', title='', sort='x'),\n    alt.Color('MPAA Rating', legend=None))\n .properties(width=100, height=150)\n .facet('MPAA Rating')\n .resolve_scale(x='independent'))\n\n\n\n\n\n\n\n\nIf we instead wanted to answer the question: “Which are the most common genres for each MPAA Rating?”, we would switch the faceting and y columns.\nHere, we kept the colour column as the MPAA Rating so that it is consistent with the previous figures, and because with this many categories, it would look quite messy if we coloured by the Major Genre instead.\nWe can see that the most common G-rated movies are adventure films and that most PG-13 rated movies are Comedies, Dramas and action movies. It is important to remember that genres have more movies in total, so, we would expect them to show up highly in all the facets. Whether this is desired or not depends on the question we are asking, but it does make sense here."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#heatmaps-are-effective-for-visualizing-counts-of-two-dimensional-categorical-data",
    "href": "modules/module4/slides/module4_03.html#heatmaps-are-effective-for-visualizing-counts-of-two-dimensional-categorical-data",
    "title": "Visualizing Categorical Distributions",
    "section": "Heatmaps are effective for visualizing counts of two-dimensional categorical data",
    "text": "Heatmaps are effective for visualizing counts of two-dimensional categorical data\n\nalt.Chart(movies_extended).mark_rect().encode(\n    alt.Color('count()'),\n    alt.X('MPAA Rating'),\n    alt.Y('Major Genre', sort='color'))\n\n\n\n\n\n\n\n\nIf we want to get an overview of the information from both the faceted plots in the previous two slides, we could create a heatmap. In this heatmap the colour represents the combinatorial counts of two categorical columns, such as how many movies are both rated G and in the comedy genre.\nComparing squares vertically in this heatmap is similar to the first faceted plot we made and comparing them horizontally is similar to the faceted visualization in the last slide.\nIn other words, if we want to compare which genre is most common for a certain rating, we compare the colours column-wise in the heatmap. If we instead are interested in the most common rating assigned to a movie we compare the columns row-wise. We can quickly see that most dramas are rated PG-13 or R and most horror movies are rated R.\nSorting on colour/count puts the genres with many observations close together, similar to how we sorted on 'x' and 'y' in previous modules. We could sort the x-axis also, but since it has a natural order to it, we have decided to keep it as is here.\nThis visualization is effective for quickly communicating the main takeaways from the two questions and giving us an overview of the data, but it is harder to tell that exact count for each colour so, if that is of great importance a bar chart is more suitable."
  },
  {
    "objectID": "modules/module4/slides/module4_03.html#using-both-the-colour-and-marker-size-to-indicate-the-count-creates-a-more-effective-visualization",
    "href": "modules/module4/slides/module4_03.html#using-both-the-colour-and-marker-size-to-indicate-the-count-creates-a-more-effective-visualization",
    "title": "Visualizing Categorical Distributions",
    "section": "Using both the colour and marker size to indicate the count creates a more effective visualization",
    "text": "Using both the colour and marker size to indicate the count creates a more effective visualization\n\nalt.Chart(movies_extended).mark_circle().encode(\n    alt.X('MPAA Rating'),\n    alt.Y('Major Genre', sort='color'),\n    alt.Color('count()'),\n    alt.Size('count()'))\n\n\n\n\n\n\n\n\nOne potential concern with heatmaps is that they rely solely on colour to communicate the value of interest.\nWe cannot perceive small variations in colour as accurately as we can for other visual channels, such as the position or size.\nColour can also be problematic for people with colour vision deficiencies, which is almost 10% of the population, which we will talk more about in a later module.\nTo ameliorate these issues, we can use the same marks as when creating scatter plots, such as mark_circle or mark_square, which allows us to change the size of each mark in addition to its colour.\nThis visualization is highly effective in answering both of the questions we posed initially, and if we wanted to, we could now facet by a third categorical column such as the movie distributor, to interrogate three categorical columns simultaneously."
  },
  {
    "objectID": "modules/module4/slides/module4_00.html#module-learning-outcomes",
    "href": "modules/module4/slides/module4_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCreate heatmaps to visualize 2D distributions\nVisualize correlations and counts of categorical dataframe columns.\nUse repeated plot grids to investigate multiple data frame columns in the same plot."
  },
  {
    "objectID": "modules/module4/module4-08-true_or_false_categorical_columns.html",
    "href": "modules/module4/module4-08-true_or_false_categorical_columns.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nAre you getting bored of this penguins data yet? Don’t worry, we will spice it up soon, but let finish off this module with it.\n\n\n\n\n\n\nLet’s count combinations of the different categoricals, so we can get a bit of a better idea about where our data lies.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a circle plot for each pair of categorical columns.\nAssign the plot to an object named categorical_plots.\nMap and repeat every categorical column on both the x and y-axis.\nMap the counts to both a Color and Size channel and indicate that no title should be assigned.\nMake sure to give the size and colour channels independent scales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()?\nAre you setting alt.X(alt.repeat('column'), type='nominal')?\nAre you setting alt.Y('count()')?\nAre you chaining repeat(row=cat_cols, column=cat_cols) after .encode()?\nAre you setting color='independent' and size='independent' in .resolve_scale()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-08-true_or_false_categorical_columns.html#plotting-repeated-categorical-columns-with-penguins",
    "href": "modules/module4/module4-08-true_or_false_categorical_columns.html#plotting-repeated-categorical-columns-with-penguins",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nAre you getting bored of this penguins data yet? Don’t worry, we will spice it up soon, but let finish off this module with it.\n\n\n\n\n\n\nLet’s count combinations of the different categoricals, so we can get a bit of a better idea about where our data lies.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a circle plot for each pair of categorical columns.\nAssign the plot to an object named categorical_plots.\nMap and repeat every categorical column on both the x and y-axis.\nMap the counts to both a Color and Size channel and indicate that no title should be assigned.\nMake sure to give the size and colour channels independent scales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()?\nAre you setting alt.X(alt.repeat('column'), type='nominal')?\nAre you setting alt.Y('count()')?\nAre you chaining repeat(row=cat_cols, column=cat_cols) after .encode()?\nAre you setting color='independent' and size='independent' in .resolve_scale()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-true_or_false_eda.html#true-or-false-exploratory-data-analysis-eda",
    "href": "modules/module4/module4-06-true_or_false_eda.html#true-or-false-exploratory-data-analysis-eda",
    "title": "3.1. Exercises",
    "section": "True or False: Exploratory Data Analysis (EDA)",
    "text": "True or False: Exploratory Data Analysis (EDA)",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-true_or_false_eda.html#exploring-eda",
    "href": "modules/module4/module4-06-true_or_false_eda.html#exploring-eda",
    "title": "3.1. Exercises",
    "section": "Exploring EDA",
    "text": "Exploring EDA",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-true_or_false_eda.html#plotting-numeric-columns-with-penguins",
    "href": "modules/module4/module4-06-true_or_false_eda.html#plotting-numeric-columns-with-penguins",
    "title": "3.1. Exercises",
    "section": "Plotting Numeric Columns with Penguins",
    "text": "Plotting Numeric Columns with Penguins\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nIt’s been a hot second since we used the penguins data and seen it’s one second too long and we missed it, we are welcoming it back.\n\n\n\n\n\n\nLet’s plot all the distributions of the numeric columns from the dataset.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a histogram for each of the numeric columns.\nAssign the plot to an object named numeric_histograms.\nPlot the counts of each column on the y-axis and the values of each numeric column of the x-axis.\nMake sure to set the maxbins argument to something appropriate (30 or 40).\nSet width to 150 and height to 150 and display the plots in 2 columns and 2 rows.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X(alt.repeat(), type='quantitative', bin=alt.Bin(maxbins=30)?\nAre you setting alt.Y('count()')?\nAre you setting the height and width in properties()?\nAre you using .repeat() and setting numeric_cols as the first argument and columns=2 or rows=2?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-04-return_of_the_pokemon.html",
    "href": "modules/module4/module4-04-return_of_the_pokemon.html",
    "title": "2.1 Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe are going to explore the different types of pokemon. You may remember this dataset from the previous Programming in Python for Data Science course. This time we are going to take a look at the different generations and pokemon types and see which ones are most prominent.\nFor those less familiar with Pokemon, a Pokemon’s generation is determined by the ara it was introduced. For example, the first generation spans Pokemon characters that were released in video games from 1996-1999. The 7th generation are Pokemon introduced from games released between 2016-2019.\nAccording to Wikipedia, A Pokémon’s type is “an elemental attribute determining the strengths and weaknesses of each Pokémon and its moves. Pokémon take double damage from attacking moves of types they are weak to and half damage from moves they resist. These type matchups offset one another in rock–paper–scissors-style relationships.”\n\n\n\n\n\n\nInstead of a heatmap, let’s make a plot that produces circles whose colour and size change based on the count of the Pokemon for each generation and type.\nTasks:\n\nCreate a heatmap and assign it to an object named pokemon_cicleplot.\nMap gen on the x-axis and make sure to specify that it is an ordinal (‘O’) value.\n\nMap type on the y-axis.\nAssign a Size and Colour channel to the count() of the pokemon.\nGive it an appropriate title and axis labels.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_cicle()?\nAre you setting alt.X('gen:O')?\nAre you setting alt.Y('type')?\nAre you using a color channel and setting it to counts()?\nAre you setting a title using .properties(title= 'title')?\nAre you setting width=250 and height=200 in .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-04-return_of_the_pokemon.html#return-of-the-pokemon",
    "href": "modules/module4/module4-04-return_of_the_pokemon.html#return-of-the-pokemon",
    "title": "2.1 Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nWe are going to explore the different types of pokemon. You may remember this dataset from the previous Programming in Python for Data Science course. This time we are going to take a look at the different generations and pokemon types and see which ones are most prominent.\nFor those less familiar with Pokemon, a Pokemon’s generation is determined by the ara it was introduced. For example, the first generation spans Pokemon characters that were released in video games from 1996-1999. The 7th generation are Pokemon introduced from games released between 2016-2019.\nAccording to Wikipedia, A Pokémon’s type is “an elemental attribute determining the strengths and weaknesses of each Pokémon and its moves. Pokémon take double damage from attacking moves of types they are weak to and half damage from moves they resist. These type matchups offset one another in rock–paper–scissors-style relationships.”\n\n\n\n\n\n\nInstead of a heatmap, let’s make a plot that produces circles whose colour and size change based on the count of the Pokemon for each generation and type.\nTasks:\n\nCreate a heatmap and assign it to an object named pokemon_cicleplot.\nMap gen on the x-axis and make sure to specify that it is an ordinal (‘O’) value.\n\nMap type on the y-axis.\nAssign a Size and Colour channel to the count() of the pokemon.\nGive it an appropriate title and axis labels.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_cicle()?\nAre you setting alt.X('gen:O')?\nAre you setting alt.Y('type')?\nAre you using a color channel and setting it to counts()?\nAre you setting a title using .properties(title= 'title')?\nAre you setting width=250 and height=200 in .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#true-or-false-plotting-multiple-numerical-columns",
    "href": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#true-or-false-plotting-multiple-numerical-columns",
    "title": "1.1. Exercises",
    "section": "True or False: Plotting Multiple Numerical Columns",
    "text": "True or False: Plotting Multiple Numerical Columns",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#which-plot-is-it",
    "href": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#which-plot-is-it",
    "title": "1.1. Exercises",
    "section": "Which Plot Is It?",
    "text": "Which Plot Is It?",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#graph-analysis",
    "href": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#graph-analysis",
    "title": "1.1. Exercises",
    "section": "Graph Analysis",
    "text": "Graph Analysis\nLook at the plot below and answer the following questions.\n\n\n246810Count of RecordsPokemon Scores5101520253035404550556065707580859095100105110115120125130135140145150155160165170175180185190195200205210215220225230Defense Score5101520253035404550556065707580859095100105110115120125130135140145150155160165170175180185Attack Score",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#fire-and-ice-heatmaps-with-antarctic-penguins",
    "href": "modules/module4/module4-02-true_or_false_plotting_multiple_numerical_columns.html#fire-and-ice-heatmaps-with-antarctic-penguins",
    "title": "1.1. Exercises",
    "section": "Fire and Ice: Heatmaps with Antarctic Penguins",
    "text": "Fire and Ice: Heatmaps with Antarctic Penguins\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now look at our penguins previous modules and see which penguins are more abundant. Are there penguins that have a greater flipper length (flipper_length_mm) but with a smaller body mass (body_mass_g)? Does the mass of a penguin have a relationship to its flipper length?\nLet’s take a look!\n\n\n\n\n\n\nCreate a heatmap between flipper_length_mm and body_mass_g and answer the questions below.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nCreate a heatmap and assign it to an object named penguin_heatmap.\nMap flipper_length_mm on the x-axis and body_mass_g on the y-axis. Distinguish the penguin count() using the color channel.\nMake sure to set the maxbins argument to 30.\nSet the dimensions to a width of 250 and a height of 200.\nGive it an appropriate title and axis labels.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_rect()?\nAre you setting alt.X('flipper_length_mm', bin=alt.Bin(maxbins=30)?\nAre you setting alt.Y('body_mass_g', bin=alt.Bin(maxbins=30)?\nAre you using a color channel and setting it to counts()?\nAre you setting a title using .properties(title= 'title')?\nAre you setting width=250 and height=200 in .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-00-module_learning_outcomes.html",
    "href": "modules/module4/module4-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#the-extended-movies-dataset",
    "href": "modules/module3/slides/module3_05.html#the-extended-movies-dataset",
    "title": "Comparing many distributions",
    "section": "The extended movies dataset",
    "text": "The extended movies dataset\n\nimport altair as alt\nfrom vega_datasets import data\n\nmovies_extended = data.movies().dropna(subset=['Major_Genre'])\nmovies_extended\n\n\n\n\n\n\n\n\nTitle\nUS_Gross\nWorldwide_Gross\nUS_DVD_Sales\n...\nDirector\nRotten_Tomatoes_Rating\nIMDB_Rating\nIMDB_Votes\n\n\n\n\n1\nFirst Love, Last Rites\n10876.0\n10876.0\nNaN\n...\nNone\nNaN\n6.9\n207.0\n\n\n2\nI Married a Strange Person\n203134.0\n203134.0\nNaN\n...\nNone\nNaN\n6.8\n865.0\n\n\n3\nLet's Talk About Sex\n373615.0\n373615.0\nNaN\n...\nNone\n13.0\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3198\nZoom\n11989328.0\n12506188.0\n6679409.0\n...\nPeter Hewitt\n3.0\n3.4\n7424.0\n\n\n3199\nThe Legend of Zorro\n45575336.0\n141475336.0\nNaN\n...\nMartin Campbell\n26.0\n5.7\n21161.0\n\n\n3200\nThe Mask of Zorro\n93828745.0\n233700000.0\nNaN\n...\nMartin Campbell\n82.0\n6.7\n4789.0\n\n\n\n\n2926 rows × 16 columns\n\n\n\n\nFor this exercise, we will use an extended movies dataset containing additional genres.\nWe load in that dataset from the vega sample repository and drop all the rows that have a NaN value in the column \"Major Genre\", since we are only interested in comparing the movies that we know belong to a genre.\nThe question we will try to answer in this slide deck is “Which genres have the highest worldwide gross?”."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-histograms",
    "href": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-histograms",
    "title": "Comparing many distributions",
    "section": "Many distributions can’t be effectively compared with histograms",
    "text": "Many distributions can’t be effectively compared with histograms\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('Worldwide_Gross', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('Major_Genre'))\n\n\n\n\n\n\n\n\nAs we have seen, histograms are not very effective for comparing multiple distributions, and not at all with this many different groups.\nMost genres have a low worldwide gross and because our histograms are stacked on top of each other the left-most bar dominates with around 2000 movies. It extends the y-axis so that it is hard to see how many observations there are for the highest x-values (but we know there are some since the axis extends that far)."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-densities-either",
    "href": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-densities-either",
    "title": "Comparing many distributions",
    "section": "Many distributions can’t be effectively compared with densities either",
    "text": "Many distributions can’t be effectively compared with densities either\n\n(alt.Chart(movies_extended).mark_area().transform_density(\n    'Worldwide_Gross',\n    groupby=['Major_Genre'],\n    as_=['Worldwide_Gross', 'density'])\n .encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('density:Q'),\n    alt.Color('Major_Genre')))\n\n\n\n\n\n\n\n\nAlthough we saw previously that a layered density chart is better than a stacked histogram, it is not effective in comparing this many distributions either. Particularly not when the bulk of the distribution is concentrated in a small area, such as the low x-values in this plot.\nThis density chart shares many of the issues with the histogram from the previous slide, and this visualization is a poor choice for our data.\nWe could try faceting vertically with one density or histogram per facets, but there would be a lot of subplots with this many genres and they might not be that easy to compare when they are in facets far apart.\nSo how can we create an effective comparison between all the genres?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#bar-charts-are-effective-for-comparing-a-single-value-per-group-but-hides-variation",
    "href": "modules/module3/slides/module3_05.html#bar-charts-are-effective-for-comparing-a-single-value-per-group-but-hides-variation",
    "title": "Comparing many distributions",
    "section": "Bar charts are effective for comparing a single value per group but hides variation",
    "text": "Bar charts are effective for comparing a single value per group but hides variation\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('mean(Worldwide_Gross)'),\n    alt.Y('Major_Genre'))\n\n\n\n\n\n\n\n\nWe could use a barplot if we were only interested in comparing a single value from each distribution, such as the mean or median.\nHowever, this is generally not a good idea because any plot that only shows a single value from a distribution will hide the variation in the data, which could lead us to arrive at incorrect conclusions as you will see in the next slide."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#showing-a-single-value-can-lead-to-incorrect-conclusions",
    "href": "modules/module3/slides/module3_05.html#showing-a-single-value-can-lead-to-incorrect-conclusions",
    "title": "Comparing many distributions",
    "section": "Showing a single value can lead to incorrect conclusions",
    "text": "Showing a single value can lead to incorrect conclusions\nBeyond Bar and Line Graphs: Time for a New Data Presentation Paradigm\n\n\nThis image illustrates how the same bar chart (A) could have been generated from three different distributions (B, C, or D).\nIf we just looked at the bar chart, we could not tell which of the distributions it came from, but looking at the points directly we would arrive at a widely different conclusion regarding our data.\nIn sample B, the points seem to on average be slightly different between the two groups, although there is significant overlap between the distributions.\nIn sample C there seems to be one outlier data point that increases the mean significantly for its group, but most of the other points are pretty similar between the two groups.\nIn D, both groups have their data distributed bimodally (in two peaks). Maybe this means that there is a third group in this data to which all the high values belong too?\nAll this valuable information about our data, is lost when visualizing it as a bar chart. Remember, bar charts are best suited for displaying individual values such as counts, proportions, and sums.\nTo arrive at more accurate conclusions we need to present a richer representation of the data such as a histogram or a density plot, which are great as long as we don’t have too many distributions to compare.\nBut which visualizations could we use to accurately represent the distributions while still remaining effective for comparing many distributions in the same plot?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#showing-individual-observations-gives-a-richer-representation-than-bar-charts",
    "href": "modules/module3/slides/module3_05.html#showing-individual-observations-gives-a-richer-representation-than-bar-charts",
    "title": "Comparing many distributions",
    "section": "Showing individual observations gives a richer representation than bar charts",
    "text": "Showing individual observations gives a richer representation than bar charts\n\nalt.Chart(movies_extended).mark_tick().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre'))\n\n\n\n\n\n\n\n\nOne approach would be to show the individual observations, such as in this chart. This is a compact plot, which makes it easy to compare the different genres, since they are close to each other in the chart.\nWe can also clearly see the reason why the x-axis goes up to such a large max value: There are two movies that grossed highly above the rest!\nWhich are these movies?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#tooltips-are-helpful-for-answering-questions-about-specific-observations",
    "href": "modules/module3/slides/module3_05.html#tooltips-are-helpful-for-answering-questions-about-specific-observations",
    "title": "Comparing many distributions",
    "section": "Tooltips are helpful for answering questions about specific observations",
    "text": "Tooltips are helpful for answering questions about specific observations\n\nalt.Chart(movies_extended).mark_tick().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre'),\n    alt.Tooltip('Title:N'))\n\n\n\n\n\n\n\n\nAltair really shines in answering questions like this! In addition to having a robust visualization grammar, it also provides a grammar for interactive features.\nWe will dive deep into more complex interactivity in the last module in this course, but for now, we can simply add a tooltip and answer the question we just posed by hovering with the mouse over the two highest grossing movies. Try it!\n(We need the :N because there are some title values that makes Altair not recognize this dataframe column as nominal otherwise)\nAlthough this visualization is useful in getting information about the individual movies, it is hard to tell exactly how many data points there are in the areas that are completely blue. Is there just enough so that we don’t see any of the white background or are there thousands of observations stacked on top of each other?\nThis plot is saturated, something we will discuss in detail in the next module. We could use transparency to alleviate this issue to some extend, but it is more effective to use colour for representing the counts, such as in a heatmap."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#heatmaps-can-compare-multiple-distributions-without-saturation",
    "href": "modules/module3/slides/module3_05.html#heatmaps-can-compare-multiple-distributions-without-saturation",
    "title": "Comparing many distributions",
    "section": "Heatmaps can compare multiple distributions without saturation",
    "text": "Heatmaps can compare multiple distributions without saturation\n\n(alt.Chart(movies_extended).mark_rect().encode(\n    alt.X('Worldwide_Gross', bin=alt.Bin(maxbins=100)),\n    alt.Y('Major_Genre'),\n    alt.Color('count()')))\n\n\n\n\n\n\n\n\nA heatmap of the number of observations is very similar to a histogram, but the count is mapped to the colour instead of to the height on the y-axis.\nThis heatmap shows the histogram for each of the genres right next to each other so that they are easy to compare and contrast, by looking at the varying colours.\nWe can see that some genres appear to have most of their observations close to zero, such as Comedy and Drama, whereas others are more spread out, such as Adventure movies.\nThis is a pretty effective visualization, but since the colour scale is the same for each genre and some genres have many more observations than others, it can be difficult to accurately interpret the distribution of those genres that have few observations.\nFor example, we wouldn’t be able to distinguish between regions with 10-20 and 40-50 observations since the colours are so similar.\nRemember that comparing positions is more effective than comparing colours, so how can we use position to compare multiple distributions?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-show-several-key-statistics-from-a-distribution",
    "href": "modules/module3/slides/module3_05.html#boxplots-show-several-key-statistics-from-a-distribution",
    "title": "Comparing many distributions",
    "section": "Boxplots show several key statistics from a distribution",
    "text": "Boxplots show several key statistics from a distribution\nJhguch at en.wikipedia via Wikimedia Commons\n \n\n\nA boxplot is a mix between showing individual values and a few key summary statistics.\nInstead of showing just the mean or median as with a bar plot, a box plot shows 5 summary statistics.\nThe box represents three values, the median in the middle and the lower and upper quartile at the edges This means that 50% of the data points lie within the box.\nThe lines extending from the box are called whiskers and they can represent a few different statistics. Sometimes, they are showing the min and the max (the range) of our data.\nHowever, it is more common that they show the furthest points that are still within 1.5 x the “interquartile” range from the edges of the box. The interquartile range is the distance between the edges of the box.\nConventionally, any observations that fall outside the whiskers, are drawn out as individual points and are sometimes referred to as “outliers”, which are occasionally discarded.\nHowever, what really is an outlier in your data and what you should do with them depends on the question you are asking. Maybe these data points are the most important in your dataset or they could be measurement errors. You should always look further and think carefully before discarding data as outliers.\nHow does it look when we use boxplots to answer our question?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-can-effectively-compare-multiple-distributions",
    "href": "modules/module3/slides/module3_05.html#boxplots-can-effectively-compare-multiple-distributions",
    "title": "Comparing many distributions",
    "section": "Boxplots can effectively compare multiple distributions",
    "text": "Boxplots can effectively compare multiple distributions\n\nbar = alt.Chart(movies_extended).mark_bar().encode(\n    alt.X('mean(Worldwide_Gross)'),\n    alt.Y('Major_Genre'))\n\nbox = alt.Chart(movies_extended).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre'))\n\nbox | bar\n\n\n\n\n\n\n\n\nHere we show a boxplot next to the barplot we created initially. The | operator works similarly to the + operator, but instead of layering charts on top of each other, it puts them next to each other.\nWe can see that the box plots provide us with the same clear positional comparison as in the barplot, but we now also have access to additional information about each genres’ distribution. We can ensure ourselves that the distributions are roughly the same shape and view potential outliers.\nWe can directly answer the question we posed at the beginning: the Adventure genre generates the highest revenue both in terms of the medians and the overall position of the boxes.\nIt seems like Action is the second most highly grossing genre, but after that, it becomes hard to compare. We could make this visualization even more effective by sorting the boxes according to their median value."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#sorted-boxplots-more-effective-for-comparing-similar-distributions",
    "href": "modules/module3/slides/module3_05.html#sorted-boxplots-more-effective-for-comparing-similar-distributions",
    "title": "Comparing many distributions",
    "section": "Sorted boxplots more effective for comparing similar distributions",
    "text": "Sorted boxplots more effective for comparing similar distributions\n\ngenre_order = movies_extended.groupby(\n    'Major_Genre')['Worldwide_Gross'].median().sort_values().index.tolist()\nalt.Chart(movies_extended).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre', sort=genre_order))\n\n\n\n\n\n\n\n\nAltair does not support sorting boxplots via the “x” or “-x” shortcut.\nInstead, we need to create a list of the genres, ordered by value.\nWe can do this with pandas by grouping the dataframe, computing the median for the grossing columns, sorting the values, and then extracting the index as a list.\nNow the visualization is very effective! It is easy to compare genres with similar grossing since they are right next to each other in the plot.\nIf we wanted to look closer at the differences between the bulk of the distributions we could exclude the two most highly grossing movies."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#zooming-in-facilitates-comparison-of-small-differences",
    "href": "modules/module3/slides/module3_05.html#zooming-in-facilitates-comparison-of-small-differences",
    "title": "Comparing many distributions",
    "section": "Zooming in facilitates comparison of small differences",
    "text": "Zooming in facilitates comparison of small differences\n\nfiltered_movies = movies_extended[movies_extended['Worldwide_Gross'] &lt; 1_500_000_000]\nalt.Chart(filtered_movies).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre', sort=genre_order))\n\n\n\n\n\n\n\n\nHere we can compare the distributions more clearly, and it really looks like there are no large differences in the medians between the five genres behind Adventure and Action.\nWe will need to keep in mind that there are two additional data points that we have excluded from this visualization, but neither the median line nor the box would be much affected by excluding just a few values from a large population.\nIf we would have shown the mean instead of the median, this could have been an issue since the mean can be affected significantly from just a few extreme values."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-can-be-scaled-by-the-number-of-observations",
    "href": "modules/module3/slides/module3_05.html#boxplots-can-be-scaled-by-the-number-of-observations",
    "title": "Comparing many distributions",
    "section": "Boxplots can be scaled by the number of observations",
    "text": "Boxplots can be scaled by the number of observations\n\nalt.Chart(movies_extended).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre', sort=genre_order),\n    alt.Size('count()'))\n\n\n\n\n\n\n\n\nThe size of the boxes can be made proportional to the count of observations in that group.\nThis helps us see if there are many more observations underlying some of the boxes versus others. In our plot, we can see that the “comedy” genre has the most movies whereas there are few documentaries and black comedies.\nHowever, it also makes it hard to tell where the lines of the median and the boxes are for many of the distributions. A better alternative could be to not scale the boxes and instead, include a bar chart with the number of observations per genre together with the boxplot."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-are-not-able-to-accurately-represent-data-with-multiple-peaks",
    "href": "modules/module3/slides/module3_05.html#boxplots-are-not-able-to-accurately-represent-data-with-multiple-peaks",
    "title": "Comparing many distributions",
    "section": "Boxplots are not able to accurately represent data with multiple peaks",
    "text": "Boxplots are not able to accurately represent data with multiple peaks\nFrom Autodesk research\n\n\nWhile boxplots are effective for visualizing multiple distributions, they also have their shortcomings.\nOne of their main downsides is that they are not effective in showing distributions with multiple peaks. This can be seen in the animation in this slide, where variation in the raw data does no result in any change in the boxplots.\nTwo effective visualizations for many distributions that also handle multiple peaks are violin plots (as shown in this slide) and stripplots.\nViolinplots are similar to density plots put next to each other, and stripplots prevent overlap by distributing the points in a cloud instead of a straight line.\nThere are also sina plots, which combine the best of violin plots and strip plots together.\nThese are all highly effective, but not yet available to make easily in Altair, so we will not be teaching them here.\nBoxplots are still very effective in comparing multiple distributions, and when there are even more distributions than what we have here, e.g. 50+, then boxplots are often easier to interpret than the alternatives mentions above, since they are simpler."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#the-movies-dataset",
    "href": "modules/module3/slides/module3_01.html#the-movies-dataset",
    "title": "Visualizing data from one column",
    "section": "The movies dataset",
    "text": "The movies dataset\n\nimport pandas as pd\n\nmovies = pd.read_csv(\"data/movies.csv\")\nmovies\n\n\n\n\n\n\n\n\ntitle\nruntime\nbudget\nrevenue\ngenre\ncountry\nvote_average\n\n\n\n\n0\nFinding Nemo\n100\n94000000\n940335536\nAnimation\nUnited States of America\n3.86\n\n\n1\nPirates of the Caribbean: The Curse of the Bla...\n143\n140000000\n655011224\nFantasy\nUnited States of America\n3.81\n\n\n2\nThe Simpsons Movie\n87\n75000000\n527068851\nAnimation\nUnited States of America\n3.44\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n526\nThe Emoji Movie\n86\n50000000\n66913939\nAnimation\nUnited States of America\n0.63\n\n\n527\nA Dog's Purpose\n100\n22000000\n194647323\nFantasy\nUnited States of America\n3.61\n\n\n528\nBatman: The Killing Joke\n72\n3500000\n3775000\nAnimation\nUnited States of America\n2.94\n\n\n\n\n529 rows × 7 columns\n\n\n\n\nThroughout this module, we will study a dataset of movies containing each movie’s title, runtime, budget, revenue, genre, country of production, and average user rating.\nUpon glancing at the dataframe table in this slide, there are several questions that might come to mind, e.g. - Are high-budget movies more profitable? - Do some countries make more movies of certain genres? - Are some genres rated higher than others? Before diving into these comparisons, we want to understand the data for each of the columns in our dataset.\nLet’s start by looking at the ratings the movies received and explore the best ways to visualize this data"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#visualizing-a-single-column-with-a-point-plot-along-one-axis",
    "href": "modules/module3/slides/module3_01.html#visualizing-a-single-column-with-a-point-plot-along-one-axis",
    "title": "Visualizing data from one column",
    "section": "Visualizing a single column with a point plot along one axis",
    "text": "Visualizing a single column with a point plot along one axis\n\nimport altair as alt\n\nalt.Chart(movies[:5]).mark_point().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nVisualizing data distributions are useful in understanding the values in a dataframe column, as doing this allows us to quickly and easily see both the range and frequency of the values.\nOne of the simplest visualizations to understand a distribution of a single dataframe column is to plot each individual observation as a point.\nThis could be thought of as a one-dimensional scatter plot, where the values are spread out along only one of the plot axes.\nThis visualization works well when there are just a few plots to visualize, and to illustrate this we have filtered the data in this slide."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#single-axis-plots-can-become-saturated-when-there-is-a-lot-of-data-to-plot",
    "href": "modules/module3/slides/module3_01.html#single-axis-plots-can-become-saturated-when-there-is-a-lot-of-data-to-plot",
    "title": "Visualizing data from one column",
    "section": "Single-axis plots can become saturated when there is a lot of data to plot",
    "text": "Single-axis plots can become saturated when there is a lot of data to plot\n\nalt.Chart(movies[:50]).mark_point().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nWhen there are more observations, it becomes difficult to see how many there are at different locations along the axis, since the circular marks are overlapping with each other.\nWhen it becomes hard to tell individual observations apart, we say that a plot becomes “saturated” or “overplotted”. We will talk more about this concept in the next module."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#thinner-marks-avoid-saturation",
    "href": "modules/module3/slides/module3_01.html#thinner-marks-avoid-saturation",
    "title": "Visualizing data from one column",
    "section": "Thinner marks avoid saturation",
    "text": "Thinner marks avoid saturation\n\nalt.Chart(movies[:50]).mark_tick().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nIt is often easier to separate individual observations when they are represented as thin tick marks instead of the circles in the previous slide.\nThe disadvantage of this plot type is that it can be a bit harder to see individual observations. However, when we are visualization many marks, we are often more interested in how the data is distributed in general, rather than looking at individual points.\nThis type of plot with vertical tick marks along one axis is so common that it is sometimes referred to by a special name: “rugplot”.\nInstead of solely remembering plot by their specific names, the visualization grammar of Altair lets us think about visualizations more intuitively by how they are composed, which makes it easy to see the similarities between these plots and the one on the previous slide."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#thinner-marks-also-saturate-for-large-data-sets",
    "href": "modules/module3/slides/module3_01.html#thinner-marks-also-saturate-for-large-data-sets",
    "title": "Visualizing data from one column",
    "section": "Thinner marks also saturate for large data sets",
    "text": "Thinner marks also saturate for large data sets\n\nalt.Chart(movies).mark_tick().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nWhen we increase the number of observations even further it becomes difficult to tell exactly how the data distribution looks, even with these thin marks.\nHere we require another strategy to visualize our data."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#using-histograms-to-visualize-distributions-avoids-saturation-issues",
    "href": "modules/module3/slides/module3_01.html#using-histograms-to-visualize-distributions-avoids-saturation-issues",
    "title": "Visualizing data from one column",
    "section": "Using histograms to visualize distributions avoids saturation issues",
    "text": "Using histograms to visualize distributions avoids saturation issues\n\nalt.Chart(movies).mark_bar().encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    y='count()')\n\n\n\n\n\n\n\n\n\nInstead of visualizing each individual observation, we can use the histograms we learned about in the last module. Histograms divide one axis into groups (or “bins”) and represent the count of observations in each group with a bar.\nIn this plot, we can directly see that most movies are around 100 min in length because all the highest bars are around this value. We would say that this distribution has a single peak of around 100 min.\nSome distributions have multiple peaks which are not necessarily in the center of the distribution, and some have no distinct peaks at all, but are instead more uniformly distributed.\nWe also see a wide variation in the length of movies in the plot, The shortest movie is just 20-30 min long, while the longest is somewhere between 2010 and 220 minutes.\nI wonder if we can explain some of the variation in the movie runtimes by grouping the data according to one of the categorical columns in the dataset. What do you think, which categories could contribute influence the movie length?"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#faceting-is-effective-when-comparing-multiple-distributions",
    "href": "modules/module3/slides/module3_01.html#faceting-is-effective-when-comparing-multiple-distributions",
    "title": "Visualizing data from one column",
    "section": "Faceting is effective when comparing multiple distributions",
    "text": "Faceting is effective when comparing multiple distributions\n\nalt.Chart(movies).mark_bar().encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    y='count()').facet('country')\n\n\n\n\n\n\n\n\n\nLet’s start by comparing the runtimes of movies produced in different countries. This is maybe not the first categorical column that you thought of, but don’t worry, we will look at additional ones later.\nAs we saw in the last module, faceting is a good way to compare multiple distributions and here we use it to create one histogram per production country.\nThis is a little bit of repetition, but we will discuss the histograms in more detail in these slides now that we have learned more about what they represent.\nYou can see that this particular dataset only contains movies made in the UK or the US. Because there are so many more movies made in the US compared to the UK, it is quite hard to tell if there are any meaningful differences between movies from the two countries.\nThe location of the two distributions on the x-axis look quite similar, but from these visualizations alone, we don’t have enough information to tell if the location, number of peaks, and the overall shape is the same between the two distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#independent-y-axis-scales-let-us-study-each-distribution-in-more-detail",
    "href": "modules/module3/slides/module3_01.html#independent-y-axis-scales-let-us-study-each-distribution-in-more-detail",
    "title": "Visualizing data from one column",
    "section": "Independent y-axis scales let us study each distribution in more detail",
    "text": "Independent y-axis scales let us study each distribution in more detail\n\n(alt.Chart(movies).mark_bar().encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    y='count()')\n .facet('country')\n .resolve_scale(y='independent'))\n\n\n\n\n\n\n\n\n\nBy default when faceting, the y-axis is the same for all the subplots. This is often the most suitable choice, because it makes it clear when the total number of observations differ between the groups.\nIf we want to drill down and compare the distribution shape more closely we could define the y-axes to be independent for each facet, as we have done in this slide.\nNow we can get a better view of the UK histogram, which looks like it possibly could be slightly bimodal (it might have two peaks), whereas the US one is clearly unimodal (it has one peak).\nHowever, since we have such few British movies in our dataset, we can’t state this with much confidence; it might just be an artifact from the small sample number, of from which intervals the bins are covering.\nTo be more certain about if there are any meaningful differences between these two histograms, we would need to have a larger sample set from the UK and create multiple visualizations each with a different number of maxbins to see if that changes the histogram appearance.\nMaybe there are other categorical dataframe columns that would better explain the spread in movie length seen in the initial histogram?\nIn the next module, we will explore if there are more distinct differences in movie length based on which genre the movies belong to rather than its production country."
  },
  {
    "objectID": "modules/module3/module3-07-what_did_we_just_learn.html",
    "href": "modules/module3/module3-07-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module3/module3-05-comparing_multiple_distributions.html",
    "href": "modules/module3/module3-05-comparing_multiple_distributions.html",
    "title": "3. Comparing Multiple Distributions",
    "section": "",
    "text": "3. Comparing Multiple Distributions\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "3. Comparing Multiple Distributions"
    ]
  },
  {
    "objectID": "modules/module3/module3-03-visualize_distributions_with_density_plots.html",
    "href": "modules/module3/module3-03-visualize_distributions_with_density_plots.html",
    "title": "2. Visualize Distributions with Density Plots",
    "section": "",
    "text": "2. Visualize Distributions with Density Plots\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "2. Visualize Distributions with Density Plots"
    ]
  },
  {
    "objectID": "modules/module3/module3-01-how_to_visualize_data_from_a_single_column.html",
    "href": "modules/module3/module3-01-how_to_visualize_data_from_a_single_column.html",
    "title": "1. How To Visualize Data From a Single Column",
    "section": "",
    "text": "1. How To Visualize Data From a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "1. How To Visualize Data From a Single Column"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_end.html#module-learning-outcomes",
    "href": "modules/module2/slides/module2_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 2",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nChoose effective visual channels for information display.\nVisualize frequencies with bar plots.\nFacet plots to explore more variables simultaneously.\nCustomize axes labels and scales.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#subsetting-the-global-development-data",
    "href": "modules/module2/slides/module2_05.html#subsetting-the-global-development-data",
    "title": "Bar Charts and Histograms",
    "section": "Subsetting the global development data",
    "text": "Subsetting the global development data\n\nimport pandas as pd\n\ngm = pd.read_csv(\"data/world-data-gapminder.csv\", parse_dates=[\"year\"])\ngm2018 = gm[gm[\"year\"] == \"2018\"]\ngm2018\n\n\n\n\n\n\n\n\ncountry\nyear\npopulation\nregion\n...\npop_density\nco2_per_capita\nyears_in_school_men\nyears_in_school_women\n\n\n\n\n218\nAfghanistan\n2018-01-01\n36400000\nAsia\n...\n55.7\nNaN\nNaN\nNaN\n\n\n437\nAlbania\n2018-01-01\n2930000\nEurope\n...\n107.0\nNaN\nNaN\nNaN\n\n\n656\nAlgeria\n2018-01-01\n42000000\nAfrica\n...\n17.6\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n38543\nYemen\n2018-01-01\n28900000\nAsia\n...\n54.8\nNaN\nNaN\nNaN\n\n\n38762\nZambia\n2018-01-01\n17600000\nAfrica\n...\n23.7\nNaN\nNaN\nNaN\n\n\n38981\nZimbabwe\n2018-01-01\n16900000\nAfrica\n...\n43.7\nNaN\nNaN\nNaN\n\n\n\n\n178 rows × 14 columns\n\n\n\n\nIn this slide deck, we will continue to work with the gapminder dataset.\nTo make it more suitable for this slide deck let’s subset it to include observations from the year 2018 only.\nWhen filtering on a date using Pandas, we can either type out just the year portion or the entire date string in the format shown in the slide."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#creating-a-bar-chart-of-the-total-population-per-continent",
    "href": "modules/module2/slides/module2_05.html#creating-a-bar-chart-of-the-total-population-per-continent",
    "title": "Bar Charts and Histograms",
    "section": "Creating a bar chart of the total population per continent",
    "text": "Creating a bar chart of the total population per continent\n\nimport altair as alt\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X(\"region\"), \n    alt.Y(\"sum(population)\", title=\"Population\")\n)\n\n\n\n\n\n\n\n\nBar charts are often avoided when visualizing summary statistics where it is important to display the variation in the raw data.\nThis is the case for measures of central tendency, such as the mean and median, which are better represented with other visualizations that we will cover later in the course.\nBar charts are a good choice for representing individual values, such as the number of people living in a country at a specific point in time.\nSome summary statistics are displayed as single values, such as counts of observations and summations, and bar charts are suitable for these as well.\nWe will talk more about how to best represent summary statistics and variation in raw data when we learn about distributions in the next module.\nHere we are answering the question “How many people live in each continent?”, by creating a bar chart of a single value per continent representing the sum of the populations from the countries in that region.\nWe can see that more than half the world’s population is living in Asia, and Oceania is by far the least populated."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#horizontal-bar-charts-are-made-by-switching-the-x-and-y-encoding",
    "href": "modules/module2/slides/module2_05.html#horizontal-bar-charts-are-made-by-switching-the-x-and-y-encoding",
    "title": "Bar Charts and Histograms",
    "section": "Horizontal bar charts are made by switching the x and y encoding",
    "text": "Horizontal bar charts are made by switching the x and y encoding\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X(\"sum(population)\", title=\"Population\"),\n    alt.Y(\"region\")\n)\n\n\n\n\n\n\n\n\nIf we switched x and y, we would create a horizontal bar chart instead.\nAlthough vertical bar charts are more commonly seen, horizontal bar charts are preferred when the labels on the categorical axis become so long that they need to be rotated to be readable in a vertical bar chart.\nSince this is the case for our plot, we will continue to use horizontal bar charts in this slide deck."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#visualizing-counts-of-values-with-bar-charts",
    "href": "modules/module2/slides/module2_05.html#visualizing-counts-of-values-with-bar-charts",
    "title": "Bar Charts and Histograms",
    "section": "Visualizing counts of values with bar charts",
    "text": "Visualizing counts of values with bar charts\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X(\"count()\"),\n    alt.Y(\"region\"))\n\n\n\n\n\n\n\n\nWhat if we wanted to know how many countries there were within each continent?\nSince we already have filtered the data to contain only values from a single year, we know that each country will only occur once in the dataset.\nSo to answer this question, we could count the number of observations/rows in the dataframe for each continent.\nTo count observations in Altair, we can use the aggregation function count().\nWe don’t need to specify a column name for the y-axis, since we are just counting values in each categorical group on the y-axis.\nThe default axis value for counts is “Count of Records”, where “records” is another name for “observations”.\nAs previously, we can clarify what we are visualizing by setting a title which we will demonstrate in the next slide."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#setting-the-axis-title-clarifies-what-we-are-visualizing",
    "href": "modules/module2/slides/module2_05.html#setting-the-axis-title-clarifies-what-we-are-visualizing",
    "title": "Bar Charts and Histograms",
    "section": "Setting the axis title clarifies what we are visualizing",
    "text": "Setting the axis title clarifies what we are visualizing\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region'))\n\n\n\n\n\n\n\n\nHere we use the argument title within alt.X() to edit the title and add a bit of clarity."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#ordering-bars-makes-them-easier-to-interpret",
    "href": "modules/module2/slides/module2_05.html#ordering-bars-makes-them-easier-to-interpret",
    "title": "Bar Charts and Histograms",
    "section": "Ordering bars makes them easier to interpret",
    "text": "Ordering bars makes them easier to interpret\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region', sort='x'))\n\n\n\n\n\n\n\n\nBy default, Altair sorts categorical values in alphabetical order.\nFor most data, it becomes easier to interpret if the bars are sorted from high to low values. An exception to these guidelines is if the categorical axis has a natural order to it, such as weekdays, months, etc.\nThis makes it easier to see trends in the data, and to compare bars of similar height more accurately.\nTo sort the bars, we will use the arguments in the helper functions alt.X and alt.Y.\nAs with all arguments passed to Python functions, we can leave out the parameter names (x= and y=) if we pass the arguments in the order they are defined in the function signature.\nIn this example, we’re typing sort=‘x’ to specify that we want to sort according to the values on the y-axis.\nWhen sorting by value, it is often more visually appealing with the longest bar the closet to the axis line, as in this slide."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#the-longest-bar-should-be-the-closest-to-the-axis-line",
    "href": "modules/module2/slides/module2_05.html#the-longest-bar-should-be-the-closest-to-the-axis-line",
    "title": "Bar Charts and Histograms",
    "section": "The longest bar should be the closest to the axis line",
    "text": "The longest bar should be the closest to the axis line\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region', sort='-x'))\n\n\n\n\n\n\n\n\nIf we for some reason would want the reverse order, we could use the minus sign before the axis reference. This can be helpful in cases where you are making a vertical bar chart since it would then align the tallest bar next to the y-axis."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#a-custom-order-can-be-used-for-the-sort",
    "href": "modules/module2/slides/module2_05.html#a-custom-order-can-be-used-for-the-sort",
    "title": "Bar Charts and Histograms",
    "section": "A custom order can be used for the sort",
    "text": "A custom order can be used for the sort\n\nmy_order = ['Africa', 'Europe', 'Oceania', 'Asia', 'Americas']\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region', sort=my_order))\n\n\n\n\n\n\n\n\nSometimes there is a natural order to the values on the categorical axis that we want to use for the bars, for example days of the week or months of the year.\nFor situations like this, we can pass a list or array to the sort parameter.\nWe can either create this list manually as we did in this slide, or use the Pandas sort function if we, for example, wanted to sort in reverse alphabetical order.\nTo learn more about important considerations when plotting counts of categorical observations, you can refer to chapter 6 of Fundamental of Data Visualizations."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#using-bars-to-show-counts-of-quantitative-dataframe-columns",
    "href": "modules/module2/slides/module2_05.html#using-bars-to-show-counts-of-quantitative-dataframe-columns",
    "title": "Bar Charts and Histograms",
    "section": "Using bars to show counts of quantitative dataframe columns",
    "text": "Using bars to show counts of quantitative dataframe columns\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy'),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nSo far we have been counting observations in categorical groups (the continents).\nAnother common use of bar charts is to visualize the range and frequency/count of the values in our data. This is often referred to as estimating the “distribution” of the data, which we will talk more about in the next module.\nThis type of chart is so common that it has its own name: histogram.\nIn our data, we might want to answer the question “How long do people around the world live?” or in other words “What is the distribution of life expectancy for different countries?”.\nIf we create a histogram directly for the numerical values its appearance would be very spiky, as you can see in this slide.\nThis happens because there are very few values that are exactly the same.\nFor example, values like 67.2, 69.3, 69.5, etc, would all get their own bar instead of being in the same bar representing the interval 65-70.\nIf we had ordinal values, such as the numbers on a dice, then it would make sense to have one bar per value on the dice, but in the case of quantitative/continuous data as we have here, this is not a good strategy."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#in-a-histogram-each-bar-represents-a-range-of-values",
    "href": "modules/module2/slides/module2_05.html#in-a-histogram-each-bar-represents-a-range-of-values",
    "title": "Bar Charts and Histograms",
    "section": "In a histogram each bar represents a range of values",
    "text": "In a histogram each bar represents a range of values\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=True),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nInstead, we want to create intervals or “bins” that represent ranges of numerical values and then count all the observations within each of these ranges.\nTo enable binning of the x-axis in Altair, we can set bin=True inside alt.X.\nThis automatically calculates a suitable number of bins, and counts up all the values within each group before plotting a bar representing this count.\nIn contrast to bar charts, it is rarely beneficial to make horizontal histograms since the labels are numbers that don’t need to be rotated to be readable.\nYou can also see that we have not changed the title of the y-axis. There isn’t really a more informative title we can substitute for here since the length of each bar simply represents the count of observations/records in each bin.\nNow it is easier to see where the life expectancy of the countries fall. We can see that most countries seem to have a life expectancy between 75 and 80 years and that only very few have one under 60. However, these conclusions will depend on exactly how wide our bins are, which we will talk more about in the next module."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#narrower-bins-increase-the-resolution-along-the-axis",
    "href": "modules/module2/slides/module2_05.html#narrower-bins-increase-the-resolution-along-the-axis",
    "title": "Bar Charts and Histograms",
    "section": "Narrower bins increase the resolution along the axis",
    "text": "Narrower bins increase the resolution along the axis\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30), title='Life expectancy'),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nAlthough the automatically calculated number of bins is often appropriate, we might sometimes want to increase the resolution of our visualization by have narrower bins.\nWe can change the number of bins by passing alt.Bin(maxbins=30) to the bin parameter instead of passing the value True.\nNote that you will not get the exact number of bins that you set in maxbins and instead, Altair will find a number that aligns well with the axis ticks within the max you specified (the step parameter can be used to set and exact bin width if desired).\nHere we also changed the title because “binned” is not really necessary and it is largely clear from the axis already that each bar spans a range of numbers.\nWe will talk more about histograms and other ways to represent distributions in the next module, but it is important to remember that they are just a bar chart on a binned axis."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others",
    "href": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others",
    "title": "Effective Use of Visual Channels",
    "section": "Comparing sizes is easier for some geometrical objects than for others",
    "text": "Comparing sizes is easier for some geometrical objects than for others\n\n\nIn the image in this slide, try to estimate how many times larger the big circle is compared to the small one."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others-1",
    "href": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others-1",
    "title": "Effective Use of Visual Channels",
    "section": "Comparing sizes is easier for some geometrical objects than for others",
    "text": "Comparing sizes is easier for some geometrical objects than for others\n\n\nIn the image in this slide, try to estimate how many times larger the big bar is compared to the small one."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#both-the-circles-and-rectangles-differ-by-7x",
    "href": "modules/module2/slides/module2_01.html#both-the-circles-and-rectangles-differ-by-7x",
    "title": "Effective Use of Visual Channels",
    "section": "Both the circles and rectangles differ by 7x",
    "text": "Both the circles and rectangles differ by 7x\n\n\nIn both cases, the answer is seven times bigger. Even if you guessed both of these exactly correct, most people find it is much easier to compare the length or position of the bars rather than the area of the circles.\nFor the circles, you might even have hesitated at exactly what to compare when we said “how many time larger”, were you supposed to compare the area or the diameter?\nThis is less ambiguous for bars as long as their widths are kept the same.\nThis is important to keep in mind, especially when communicating to others via visualization, but also when creating plots for yourself.\nThese two examples are originally from Jeffrey Heer’s PyData talk, who is a visualization researcher at the University of Washington and whose research group created the D3 and VegaLite packages which Altair is based on."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#summary-of-visual-channel-efficiency",
    "href": "modules/module2/slides/module2_01.html#summary-of-visual-channel-efficiency",
    "title": "Effective Use of Visual Channels",
    "section": "Summary of visual channel efficiency",
    "text": "Summary of visual channel efficiency\n\n\nEven if you got both these right yourself, the fact that many people prefer one over the other means that in order for you to create effective visualizations you need to know which visual channels are the easiest for humans to decode.\nLuckily, there has been plenty of research in this area, which can be summarized in the schematic on this slide.\nPosition is by far the best and therefore we should put our most important comparison there.\nUsing position often means that we can’t use other things such as length or angle (like the angle in a pie chart), but we can add size or colour to represent other relationships.\nEven if it is hard to tell exact information from these (is this colour/dot 2x darker/bigger than another?) they are good to give an idea of trends in the data."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#dont-use-3d-without-a-good-reason",
    "href": "modules/module2/slides/module2_01.html#dont-use-3d-without-a-good-reason",
    "title": "Effective Use of Visual Channels",
    "section": "Don’t use 3D without a good reason",
    "text": "Don’t use 3D without a good reason\nUnnecessary 3D makes plot interpretation harder\n\n\nThe biggest issue with using 3D is when it is used unnecessarily (like a 3D bar or pie chart), as the only way to compare position (like a 3D scatter plot), and when they are represented on a 2D medium like a paper where they can’t be rotated.\nIn this slide, we see a 3D bar chart, where it looks like the values of the bars are around A=0.7, B=1.7, C=2.7 and D=3.7.\nHowever, this is only because of the angle of the camera in the plot, the actual values here of A, B, C, and D are actually 1, 2, 3, and 4, respectively."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#meaningful-3d-can-facilitate-plot-interpretation",
    "href": "modules/module2/slides/module2_01.html#meaningful-3d-can-facilitate-plot-interpretation",
    "title": "Effective Use of Visual Channels",
    "section": "Meaningful 3D can facilitate plot interpretation",
    "text": "Meaningful 3D can facilitate plot interpretation\n\n\nSometimes 3D can be useful, like a topographical map or a protein folding visualization.\nIn this slide, you can see the interesting work is done with the Rayshader library that maps in 3D in an intuitive way that incorporates reasonable camera rotation around the objects.\nThe example to the right visualizes the bend in space-time via 3D position (depth), eliminating the need for an additional 2D plot as in the example to the left.\nBut be cautious, we will see in the next slides that even in systems such as blood vessels, which are naturally organized in three dimensions, it is still mentally more complex to interpret a 3D visualization accurately.\nResearcher Claus Wilke’s has authored a good chapter on this topic if you are interested to learn more."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#properly-designed-visualizations-help-saving-lives",
    "href": "modules/module2/slides/module2_01.html#properly-designed-visualizations-help-saving-lives",
    "title": "Effective Use of Visual Channels",
    "section": "Properly designed visualizations help saving lives",
    "text": "Properly designed visualizations help saving lives\n\n\nHow much these best practices actually matters might be a bit abstract until you gain personal experience from it, therefore, I want to include a concrete example of how changing visualization methods improved an important clinical outcome.\nHeart disease is the most common cause of death, yearly killing almost 9 million people, or as many as diabetes, dementia, neonatal conditions respiratory infections all together.\nBy detecting regions of low shear stress in the arteries around the heart, doctors can identify patients that are on their way to develop heart disease and take action early to improve the patient’s survival chances.\nTo evaluate the shear stress in the arteries, the regular practice is to use a digital 3D representation of the artery coloured according to the amount of shear stress which is what you can see in this picture.\nThe colormap changes from blue for the areas of interest (low stress) to cyan, green, yellow, and red for higher stress.\nA few years ago, a research group set out to test how effective this type of visualization was compared to a couple of alternatives.\nWhen using the visualization you see in this slide, about 40% of the areas of low shear stress were correctly identified by doctors."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#changing-the-colour-scale-almost-doubled-the-accuracy",
    "href": "modules/module2/slides/module2_01.html#changing-the-colour-scale-almost-doubled-the-accuracy",
    "title": "Effective Use of Visual Channels",
    "section": "Changing the colour scale almost doubled the accuracy",
    "text": "Changing the colour scale almost doubled the accuracy\n\n\nThe first thing this research group tested was the effect of testing the colour scale to one that is easier to interpret and makes the important areas of low shear stress stand out more, since they are highlighted in a bright red colour, and the rest are in black and white.\nBy this seemingly small modification, they identified that the percentage of correct analysis almost doubled, from 40% to 70%.\nWe will talk more about choosing the correct colour scales in the later modules of this course."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#changing-from-3d-to-2d-improved-the-further-accuracy",
    "href": "modules/module2/slides/module2_01.html#changing-from-3d-to-2d-improved-the-further-accuracy",
    "title": "Effective Use of Visual Channels",
    "section": "Changing from 3D to 2D improved the further accuracy",
    "text": "Changing from 3D to 2D improved the further accuracy\n\n\nThe next modification the researcher tested was to change from a 3D representation of the blood vessels to a 2D representation.\nAlthough a 3D representation is more anatomically correct here, it is also more cognitively demanding for us to process, and some areas can cover others so it is harder to get a quick overview of the vessels.\nIn the 2D visualization, the blood vessels and their branching points are shown in a schematic that is less cognitively demanding to interpret. This representation was also shown to be more effective, as 90% of the low shear stress areas were now correctly identified.\nOverall, these two tweaks more than doubled the outcome accuracy, from 40% to 90%.\nA huge increase from modification that might have seemed to be a mere matter of taste unless you knew visualization theory!\nSo, if anyone tells you that visualization of data is not as important as other components, you can tell them about this study and ask them what kind of visualization they want their doctor to look at when analyzing their arteries."
  },
  {
    "objectID": "modules/module2/module2-09-what_did_we_just_learn.html",
    "href": "modules/module2/module2-09-what_did_we_just_learn.html",
    "title": "5. What Did We Just Learn?",
    "section": "",
    "text": "5. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "5. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module2/module2-07-creating_subplots_via_faceting.html",
    "href": "modules/module2/module2-07-creating_subplots_via_faceting.html",
    "title": "4. Creating Subplots via Faceting",
    "section": "",
    "text": "4. Creating Subplots via Faceting\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "4. Creating Subplots via Faceting"
    ]
  },
  {
    "objectID": "modules/module2/module2-05-bar_charts_and_histograms.html",
    "href": "modules/module2/module2-05-bar_charts_and_histograms.html",
    "title": "3. Bar Charts and Histograms",
    "section": "",
    "text": "3. Bar Charts and Histograms\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "3. Bar Charts and Histograms"
    ]
  },
  {
    "objectID": "modules/module2/module2-03-area_charts.html",
    "href": "modules/module2/module2-03-area_charts.html",
    "title": "2. Area Charts",
    "section": "",
    "text": "2. Area Charts\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "2. Area Charts"
    ]
  },
  {
    "objectID": "modules/module2/module2-01-effective_use_of_visual_channels.html",
    "href": "modules/module2/module2-01-effective_use_of_visual_channels.html",
    "title": "1. Effective Use of Visual Channels",
    "section": "",
    "text": "1. Effective Use of Visual Channels\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "1. Effective Use of Visual Channels"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 1",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse the grammar of graphics presented here.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "href": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "title": "How Can We Visualize Data?",
    "section": "There are two types of visualization approaches",
    "text": "There are two types of visualization approaches\nWhen learning about data visualization, it is helpful to distinguish between the following two approaches to visualization:\n\nImperative\nDeclarative\n\n\nThere are a plethora of visualization packages in Python.\nThis rich selection can be beneficial but it is also confusing, especially when starting out and trying to decide which package to choose.\nWhen learning about data visualization, it is helpful to distinguish between plotting packages that follow either an imperative or a declarative visualization philosophy."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "href": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "title": "How Can We Visualize Data?",
    "section": "Imperative (low level) plotting focuses on plot mechanics",
    "text": "Imperative (low level) plotting focuses on plot mechanics\n\nFocus on plot construction details.\n\nOften includes loops, low-level drawing commands, etc.\n\nSpecify how something should be done\n\n“Draw a red point for every observation that has value X in column A, a blue point for every observation that has value Y in column A, etc.”\n\nMinute control over plotting details, but laborious for complex visualization.\n\n\nImperative (or low level) plotting packages focus on plot construction details such as how to implement the visualization in terms of for-loops, low-level drawing commands, etc.\nThis approach gives us minute control over what is plotted, but it becomes quite laborious when we need to plot larger dataframes, or create more complex visualizations."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "href": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "title": "How Can We Visualize Data?",
    "section": "The data we will be plotting",
    "text": "The data we will be plotting\n\n\n\n\nCountry\n\n\nArea\n\n\nPopulation\n\n\n\n\n\n\nRussia\n\n\n17098246\n\n\n144386830\n\n\n\n\nCanada\n\n\n9984670\n\n\n38008005\n\n\n\n\nChina\n\n\n9596961\n\n\n1400050000\n\n\n\n\n\nIn the example in the next slide, we will plot the area and the population for the three largest countries in the world to see how they compare. This is the table we are plotting."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of imperative plotting",
    "text": "Example of imperative plotting\n# Pseudocode\ncolors = ['blue', 'red', 'yellow']\nplot = create_plot()\nfor row_number, row_data in enumerate(dataframe):\n    plot.add_point(x=row_data['Area'], y=row_data['Population'], color=colors[row_number])\n\n\n\n\n\n\n\n\n\nFor this example, we will use Python-inspired pseudocode, which is code that is made up and designed so that it is less complex and easier to read than real programming languages.\nThis helps us focus on understanding the concepts of plotting instead of getting hung up on the code syntax details of a particular package.\nYou can see that an imperative approach to plotting this data would be to first create the plot and then loop through the dataframe to add a point for each country one by one.\nTo colour the points, we need to manually create a sequence of colours that we can access inside the loop.\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou can see that one of the countries is bigger than the others, and one of the countries has a much larger population, but without seeing the code, it is not possible to know which colour represents which country.\nWe could add a legend by creating it explicitly and adding one coloured dot per iteration in the loop."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "href": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "title": "How Can We Visualize Data?",
    "section": "Declarative (high level) plotting focuses on the data",
    "text": "Declarative (high level) plotting focuses on the data\n\nFocus on data and relationships.\n\nOften includes linking columns to visual channels.\n\nSpecify what should be done\n\n“Assign colors based on the values in column A”\n\nSmart defaults give us what we want without complete control over minor plotting details.\n\n\nDeclarative (or high level) plotting packages declare links between dataframe columns and visual channels, such as the x-axis, y-axis, colour, etc.\nThis means that you can provide a high-level specification of what you want the visualization to include, and the plot details are handled automatically.\nIn summary, declarative visualization tools let you think about data and relationships, while imperative visualization tools focus on plot construction details."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of declarative plotting",
    "text": "Example of declarative plotting\n# Pseudocode\npoint_plot(data=dataframe, x='Area', y='Population', color='Country')\n\n\n\n\n\n\n\n\n\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou will notice that this time the plot also includes a legend without us having to create it explicitly, which is a common convenience in declarative plotting packages."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "href": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "title": "How Can We Visualize Data?",
    "section": "A high-level grammar of graphics helps us compose plots effectively",
    "text": "A high-level grammar of graphics helps us compose plots effectively\n\nSimple grammatical components combine to create visualizations.\nVisualization grammars often consist of three main components:\n\nCreate a chart linked to a dataframe.\nAdd graphical elements (such as points, lines, etc).\nEncode dataframe columns as visual channels (such as x, etc).\n\n\n# Pseudocode\nchart(dataframe).add_points().encode_columns(x='Area', y='Population', color='Country')\n\nThe declarative plotting concept can be implemented in different ways.\nIn the previous slide, we had a dedicated function for creating the pointplot, and there would be a separate function for creating a lineplot, barplot, etc.\nWith this approach, it is often not easy to combine plots together, unless there is a specific function for that purpose and the three bullets points on this slide are all executed by this single function.\nAnother way to use declarative plotting is via a visualization grammar.\nGenerally, a grammar governs how individual parts come together to compose more complex constructs.\nFor example, a linguistic grammar decides how words and phrases can be combined into coherent sentences. A data visualization grammar determines how to combine individual parts of the plotting syntax to create complete visualization.\nIn the example on this slide, you can see that the three bullet points are now broken down into one main function to create the chart linked to the data, and then we build upon this by adding the graphical elements (add_points()) and the encoding of the columns to properties of this chart (encode_columns()).\nBy combining these three grammatical components in different ways, we can build a wide range of visualizations, without memorizing a unique function for each plot type.\nThanks to this grammatical visualization approach, we also only require minimal changes to our code to change the type of plot."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "href": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "title": "How Can We Visualize Data?",
    "section": "The Python plotting landscape",
    "text": "The Python plotting landscape\n\n\nNow that we know the basic concepts of how data can be visualized, let’s select a Python package and get coding!\nIn this image, you can see the most commonly used Python plotting packages.\nThere are many more, but these are the ones you are the most likely to hear about, so it is good to know that they exist.\nThe text to the left in the image is a legend to explain the colours used for the different Python packages (blue for high level, declarative packages and orange for low-level, imperative packages).\nAs you can see there are several high and low-level language, so how do we chose?\nIn this course we will use Altair, because it is a powerful declarative visualization tool with a clear and consistent grammar that also allows us to add interactive components to our plots, such as tooltips and selections.\nWe have also included some of the most common visualization packages for the web which are built-in Javascript and coloured in white.\nThe reason we mention these is that the Altair library is a little bit of Python code connected to an already existing powerful JavaScript package called VegaLite, which in turns builds on D3, the most dominant visualization package on the web today.\nBy leveraging these well-established JavaScript visualization packages Altair can create plots that work natively on the web and includes interactive features without reinventing the wheel.\nSince Altair and VegaLite are relatively new visualization libraries, they don’t yet support every single plot type out there, but they more than make up for it with their ease of use and support for powerful interactive visualizations, as we will see later."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "href": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "title": "How Can We Visualize Data?",
    "section": "Sample data can be found in Altair’s companion package vega_datasets",
    "text": "Sample data can be found in Altair’s companion package vega_datasets\n\nfrom vega_datasets import data\n\ncars = data.cars()\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\n...\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n...\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n...\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n...\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n...\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n...\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n...\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nBefore we start visualizing data, we need to select a dataset and often also a question we want to answer.\nAltair works with dataframes in the “tidy” format (which we talked about in the Programming in Python for Data Science course), which means that they should consist of rows with one observation each and a set of named data columns with one feature each (you might also have heard these called fields or variables, but we will stick to columns for clarity).\nIn this course, we will often use data from the vega-datasets package, which has many plot-friendly practice datasets available as Pandas dataframes and can be loaded as demonstrated in this slide. We can use these datasets by importing the data module from the vega_datasets packages as in this slide. Here, our data contains the name of different cars and some attributes relating to each car. There are many interesting questions we could ask from this data set! For our first plot, let’s explore the relationship between how heavy a car is (the Weight_in_lbs column) and how good gas mileage it has (theMiles_per_gallon column).\nBefore starting to code the visualization, take a few seconds and think about what you would expect the relationship between these two columns to look like when you plot it."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "href": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "title": "How Can We Visualize Data?",
    "section": "Adding graphical elements via marks",
    "text": "Adding graphical elements via marks\n\nimport altair as alt\n\nalt.Chart(cars).mark_point()\n\n\n\n\n\n\n\n\nHere we assigned a shorter name (alt) to the Altair library when importing it to save us some typing later. The Altair syntax is similar to the grammar of graphics pseudocode we saw a few slides ago. The fundamental object in Altair is the Chart, which takes a data frame as a single argument, e.g. alt.Chart(cars).\nAfter the chart object has been created, we can specify how the graphical element should look that we use to visualize the data. This is called a graphical mark in Altair, and in this slide, we have used mark_point() to show the data as points.\nSince we have not specified which columns should be used for the x and y axes, we appear to only see one point in this plot since all the data is plotted on top of each other in the same location.\nTo the right of the chart, there is a button with three dots on it. don’t worry about it right now, we will explain what this is for at the end of the chapter."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "href": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "title": "How Can We Visualize Data?",
    "section": "Encoding columns as visual channels",
    "text": "Encoding columns as visual channels\nMapping a dataframe column to the x-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs')\n\n\n\n\n\n\n\n\nTo visually separate the points, we can encode columns in the dataframe as visual channels, such as the axes or colours of the plot.\nHere, we encode the column Miles_per_Gallon as the x-axis. For Pandas data frames, Altair automatically determines an appropriate data type for the mapped column, which in this case is quantitative (or numerical) and shows the numbers under the axis.\nYou can see that there are several short black lines spread out evenly on the x-axis. These are called axis ticks and help us see where the values of this dataframe column lie along the axis.\nThe faint gray lines are called grid lines and extend the locations of the axis ticks so that it is easy to compare their position to the points.\nThis is particularly useful when the points might be further away from the axis ticks, such as in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the y-scale",
    "text": "Mapping a dataframe column to the y-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nBy spreading out the data along both the x and y-axis, we can answer our initial question about the relationship between car weight and gas mileage. as it appears that the heavier cars are the ones that have the poorest mileage.\nAlthough we might have expected this to be the case, visualizing all the data points also provides information on the nature of the relationship between weight and mileage.\nIt appears that the x-y points don’t simply follow a straight line, but rather a curved line that where the mileage drop quickly when moving away from the lightest cars, but then decreases more slowly throughout the remainder of the data.\nThis rich, easily interpretable display of information is one of the main advantages of visualizing data and later in the course, we will talk more about the different type of relationships, such as linear, exponential, etc."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a numerical dataframe column to the colour scale",
    "text": "Mapping a numerical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Horsepower')\n\n\n\n\n\n\n\n\nIs there a relationship between horsepower and car weight, or fuel-efficiency?\nTo enrich this display of information further, we can colour the points according to a column in the dataframe. When we encode a column as the colour channel Altair will automatically figure out an appropriate colour scale to use, depending on whether the data is numerical, categorical, etc. Here we have indicated that we want to colour the points according to the car’s horsepower, which indicated how powerful its engine is.\nWe can see that the heavier cars have more powerful engines, than the lighter ones, but when using colour for a numerical comparison like this, makes it is harder to tell whether the relationship follows a straight line or is of another nature, so this encoding is mostly useful as an approximate indication of the horsepower.\nWe can also observe a relationship between the horsepower of a vehicle and the fuel efficiency. It appears that cars with greater horsepower (the points with a darker shade of blue) are less efficient with their fuel since miles per Gallon is much lower.\nIn the next module, we will learn more in detail about which encodings are most suitable for different comparisons."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a categorical dataframe column to the colour scale",
    "text": "Mapping a categorical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nIn the previous slide, a continuous, gradually increasing colour scale was used to visualize the gradual increase in the numerical column Horsepower. In this slide, we instead chose to colour the points per the categorical column Origin (where the car was made).\nAs you can see, Altair detects that this column contains categorical data (with the help of pandas) and picks a different colour scale to facilitate distinction between the categories. As in the previous slide,\nAltair automatically adds a helpful legend, and we can see that the heavier, more powerful cars are primarily manufactured in the US, while the lighter more fuel-efficient ones are manufactured in Europe and Japan (remember that this is true for this particular dataset, and not necessarily all cars)."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the shape scale",
    "text": "Mapping a dataframe column to the shape scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin')\n\n\n\n\n\n\n\n\nAlthough Altair’s colour scales are designed to be effective and easy to interpret, we can make the categories in our plot even more distinct by encoding the same categorical column as both colour and shape.\nThis also makes visualizations much easier to interpret and understand for anyone with visual colour deficiency (about 10% of the population). We will talk more in-depth about colour theory in a later module."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the size scale",
    "text": "Mapping a dataframe column to the size scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nSometimes a visualization tries to do too much. In this example, we have added the size channel to indicate the engine power.\nAlthough Altair elegantly handles the dual legends, it is difficult for us to discern useful information from this plot. If you go back to the plot where we encoded weight in the colour channel, you can see that the plot is much clearer.\nLater we will learn more about how to efficiently load a visualization with an appropriate amount of information, and what the research indicates regarding which visual channels are the most efficient for communicating information visually."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "href": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "title": "How Can We Visualize Data?",
    "section": "The action button can be used to save the plot",
    "text": "The action button can be used to save the plot\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nThis is the same visualization as from the last slide, and we will just use it as an example.\nThe button to the right of the chart with three dots on it is called the “action button”. and clicking it will bring up a menu.\nThe first two items in ’s menu can be used to save the chart, either in an image-based PNG-format or a text-based SVG-format.\nWe will also be learning about programmatic ways to save our charts later in the course.\nThe last three menu items relate to the library VegaLite, which is what we mentioned Altair is built upon, but we will not be using these in this course."
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse Altair’s grammar of graphics.\nCreate point and line visualizations in Altair.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering."
  },
  {
    "objectID": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "title": "3.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "True or False: Visualization Libraries",
    "text": "True or False: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "title": "2.1. Exercises",
    "section": "Your First Plot",
    "text": "Your First Plot\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s use the same vehicle dataset we saw in the lecture, but visualize the relationship between two different columns.\nThe data has already been imported for you in this exercise.\nHere is what it looks like:\n\n\n\n\n\n\nTasks:\n\nFill out the missing fields in the Altair plot in order to create a scatter plot.\nThe cars’ Horsepower should be on the y-axis and their Weight_in_lbs on the x-axis.\nColor the points by the Origin of the cars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nAre the column names expressed in quotes, e.g. y='Horsepower'?\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "href": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "title": "1.1. Exercises",
    "section": "True or False: Data Visualization",
    "text": "True or False: Data Visualization",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module-learning-outcomes.html",
    "href": "modules/module1/module1-00-module-learning-outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module0/module0-02-prerequisite_confirmation.html",
    "href": "modules/module0/module0-02-prerequisite_confirmation.html",
    "title": "1.1. Prerequisite Confirmation",
    "section": "",
    "text": "1.1. Prerequisite Confirmation",
    "crumbs": [
      "**M0. Visualization Intro**",
      "&nbsp;&nbsp; 1.1. Prerequisite confirmation"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Data Visualization!",
    "section": "",
    "text": "Welcome to Data Visualization!\nThis course is part of the Key Capabilities for Data Science program and covers topics related to data visualization.\nIn this course we will learn how to (and how not to) visualize data. We will learn about the grammar of visualization and how it’s implemented in the “Altair” package to create our figures. In addition to common statistical visualizations, we will learn how to tell stories with data, create geographical visualizations, and bring out plots to life by adding interactive elements. Together, these skills will allow us to create effective data visualizations that strengthen our own exploratory data analysis skills and our ability to communicate insights to others. Select the first module in the sidebar to the left to get started.\nCourse prerequisites: Programming in Python for Data Science",
    "crumbs": [
      "**M0. Visualization Intro**",
      "0. Welcome!"
    ]
  },
  {
    "objectID": "modules/module0/module0-01-data_visualization.html",
    "href": "modules/module0/module0-01-data_visualization.html",
    "title": "1. Data Visualization",
    "section": "",
    "text": "1. Data Visualization\n\nVideoSlides",
    "crumbs": [
      "**M0. Visualization Intro**",
      "1. Data Visualization"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\nBy the end of the course, students are expected to be able to:\n\nUse the Altair grammar of graphics to create data visualizations.\nSelect an appropriate visualization for the data.\nPerform exploratory data analysis on a dataset.\nEffectively communicate findings with figures.\nInterpret data visualizations to answer questions and formulate follow-up questions.\n\n\nIn this module, you will learn how to use Altair to create data visualizations, choose the right visualizations for your data, explore datasets, and effectively communicate your analytical findings."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#prerequisites",
    "href": "modules/module0/slides/module0_00.html#prerequisites",
    "title": "Welcome!",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we proceed to Module 1, it is important to make sure you have a solid foundation of coding in Python."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "href": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "title": "Welcome!",
    "section": "Have you taken Programming in Python for Data Science?",
    "text": "Have you taken Programming in Python for Data Science?\nMake sure you are familiar with basic Python programming concepts as they are essential for this course."
  },
  {
    "objectID": "modules/module1/module1-01-what_is_data_visualization.html",
    "href": "modules/module1/module1-01-what_is_data_visualization.html",
    "title": "1. What is Data Visualization?",
    "section": "",
    "text": "1. What is Data Visualization?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "1. What is Data Visualization?"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "href": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "title": "2. How can we visualize data?",
    "section": "",
    "text": "2. How can we visualize data?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "2. How can we visualize data?"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "href": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "title": "3. Aggregations, Lines, and Layers",
    "section": "",
    "text": "3. Aggregations, Lines, and Layers\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "3. Aggregations, Lines, and Layers"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-what_did_we_just_learn.html",
    "href": "modules/module1/module1-11-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "href": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "title": "What is Data Visualization?",
    "section": "What is the purpose of visualizing data?",
    "text": "What is the purpose of visualizing data?\nVisualizing data can be used to\n\nAnswer a specific question\nExplore data more generally to generate new questions\n\nTo create an effective visualization, start by\n\nLooking at the data\nThinking about what you want to achieve by making the visualization\nDrawing it out with pen and paper\n\n\nWe often visualize data in order to help us answer a specific question we have about our dataset, but it can also help us generate new questions.\nBefore creating a visualization, it is important that you think about why you are making it, and what you want to achieve from creating this plot.\nIs there a specific question you are trying to answer, like comparing the relationship between two dataframe columns? Or are you creating a plot to help you understand the structure of your data more in general, such as plotting the distribution of each dataframe column?\nIn either case, it can be extremely helpful to draw out your plot with pen and paper first. This helps you think about if the plot you are creating makes sense or if there is another plot better suited for the task at hand.\nDrawing with pen and paper also makes it easier to write the code afterwards, since you clearly know what you are expecting the visualization to look like."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "href": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "title": "What is Data Visualization?",
    "section": "Why bother visualizing data instead of showing raw numbers?",
    "text": "Why bother visualizing data instead of showing raw numbers?\nCan you see any differences in the general trends of these four sets of numbers?\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n10\n\n\n\n8.04\n\n\n\n\n\n\n\n\n\n10\n\n\n\n9.14\n\n\n\n\n\n\n\n\n\n10\n\n\n\n7.46\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.58\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n8\n\n\n\n6.95\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.14\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.77\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.76\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n13\n\n\n\n7.58\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.74\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.50\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.71\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n9\n\n\n\n8.81\n\n\n\n\n\n\n\n\n\n9\n\n\n\n8.77\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n11\n\n\n\n8.33\n\n\n\n\n\n\n\n\n\n11\n\n\n\n9.26\n\n\n\n\n\n\n\n\n\n11\n\n\n\n7.81\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.47\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n14\n\n\n\n9.96\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.10\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.04\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6\n\n\n\n7.24\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.13\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.08\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.25\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n4\n\n\n\n4.26\n\n\n\n\n\n\n\n\n\n4\n\n\n\n3.10\n\n\n\n\n\n\n\n\n\n4\n\n\n\n5.39\n\n\n\n\n\n\n\n\n\n19\n\n\n\n12.50\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n12\n\n\n\n10.84\n\n\n\n\n\n\n\n\n\n12\n\n\n\n9.13\n\n\n\n\n\n\n\n\n\n12\n\n\n\n8.15\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.56\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7\n\n\n\n4.81\n\n\n\n\n\n\n\n\n\n7\n\n\n\n7.26\n\n\n\n\n\n\n\n\n\n7\n\n\n\n6.42\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.91\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n\n5\n\n\n\n5.68\n\n\n\n\n\n\n\n\n\n5\n\n\n\n4.74\n\n\n\n\n\n\n\n\n\n5\n\n\n\n5.73\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy do we need visualizations to help answer our questions?\nIs it not enough to look at numbers in tables?\nTo understand why visualizations are so powerful, it is helpful to remember that to answer a question, we often have to put the data in a format that is easy for us humans to interpret.\nBecause our number systems have only been around for about 5,000 years, we need to assert effort and train ourselves to recognize structure in numerical data.\nVisual systems, on the other hand, have undergone refinement during 500,000,000 years of evolution, so we can instinctively recognize visual patterns and accurately estimate visual properties such as colours and distances.\nPractically, this means that we can arrive at correct conclusions faster from studying visual rather than numerical representations of the same data.\nFor example, have a look at the four sets of numbers in the table on the slide. Can you see the differences in the general trends between these four sets of numbers? This is a slightly modified version of the original, which was put together by statistician Francis Anscombe in the 70s."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "href": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "title": "What is Data Visualization?",
    "section": "Although summary statistics are often useful, they don’t tell the whole story",
    "text": "Although summary statistics are often useful, they don’t tell the whole story\nC is the only set with a different mean and standard deviation\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n\n\n\n\nstd\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n1.15\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummaries, such as the mean and standard deviation, are helpful statistical tools that are often useful for detecting the differences between datasets.\nHowever, since they collapse the data into just a few numbers, statistical summaries can’t tell the whole story about the data and there can be important differences between datasets that summaries fail to reveal.\nHere, the mean and standard deviation indicate that set C is slightly different from the other sets of data in terms of the centre of the sample distribution and the spread of that distribution, while the remaining three sets of data have a similar centre and spread."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "href": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "title": "What is Data Visualization?",
    "section": "Plotting the data immediately reveals patterns in the data",
    "text": "Plotting the data immediately reveals patterns in the data\nWe could not detect these patterns from only looking at the raw numbers or summary statistics\n\n\n\n\n\n\n\n\n\nHumans are not good at detecting patterns in raw numbers, and we don’t have good intuition about how different distributions of data can contribute to identical statistical summaries.\nBut guess what we excel at?\nDetecting visual patterns!\nIt is immediately clear to us how these sets of numbers differ once they are shown as graphical elements instead of textual objects.\nThis is one of the main reasons why data visualization is such a powerful tool for data exploration and communication.\nIn our example here, we would come to widely different conclusions about the behaviour of the data for the four different data sets.\nSets A and C are roughly linearly increasing at similar rates, whereas set B reaches a plateau and starts to drop, and set D has a constant X-value for all numbers except one big outlier."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "href": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "title": "What is Data Visualization?",
    "section": "More examples of plotting versus statistical summaries",
    "text": "More examples of plotting versus statistical summaries\n\nSource: Matejka and Fitzmaurice, 2017\n\nA more recent and dynamic illustration of how graphical representations are much easier for us to interpret compared to statistical summaries, is the Datasaurus GIF from Autodesk’s research team in this slide.\nIt displays several different datasets, all with the same mean, standard deviation and correlation between X and Y, but looking at the data graphically shows us how different these datasets actually are."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "href": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "title": "Aggregations, lines, and layers",
    "section": "Including all the data can hinder visualization of general trends",
    "text": "Including all the data can hinder visualization of general trends\n\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars()\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nThroughout this course we will explore many different datasets, but for now, we will stick to the cars dataset to keep it simple and focus on introducing additional Altair functionality.\nLet’s refresh our memory with this plot from the previous module.\nWe noted that it appears that cars differ in their weight and mileage based on their country of origin. At least the American cars appear to stand out, but it is difficult to see any differences between Europe and Japan.\nVisualizing all data points as in this slide is helpful to detect patterns in the data.\nBut when showing all observations, it can be hard to pick up on general trends in the data, e.g. if there are any differences in the mean weight of cars made in either Japan or Europe.\nTo more effectively visualize such general trends in the data, we can create plots of statistical summaries, such as means and medians.\nIn Altair (and pandas) these are referred to as data aggregations."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "href": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "title": "Aggregations, lines, and layers",
    "section": "Data aggregations are built into Altair",
    "text": "Data aggregations are built into Altair\n\nalt.Chart(cars).mark_point().encode(\n    x='mean(Weight_in_lbs)',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nTo plot the means of weight and mileage, we could use pandas to first calculate the mean values, and then plot the resulting dataframe in Altair.\nThis is powerful since we can access all aggregations built into pandas, but it is a bit verbose for simple common operations, such as the mean.\nFortunately, Altair has shortcuts for plotting simple aggregations where you provide the name of the aggregation together with the name of the column inside a string as in the example in this slide.\nThe Altair documentation includes a table with all available aggregations.\nIn this visualization, we can detect small differences between the means of the Japanese and Europeans cars, which was not discernible when we plotted all the points.\nWhether this difference is big enough to reach a different conclusion than when inspecting the previous plots depends on our application and the purpose of the data exploration."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time",
    "text": "Plotting aggregations to visualize trends over time\n\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\n...\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n...\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n...\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n...\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n...\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n...\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n...\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nAggregations are often helpful when comparing trends over time, especially when there are multiple groups in the data. In the cars dataset, there is a Year column, indicating when the car was made.\nOften when there is a notion of time in the data, it is interesting to see how values in the dataframe change over time.\nIn this case, we might be interested in knowing whether newer cars are more fuel-efficient than older ones.\nPresumably, they should be, but does it differ depending on where the car was made?\nLet’s find out!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time works well",
    "text": "Plotting aggregations to visualize trends over time works well\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\n\n\n\n\n\n\n\nTo visualize the mean mileage for each year of all cars, we want to perform the aggregation on the Miles_per_Gallon column while leaving the Year column intact.\nAs you can see this plot one value (the mean) for each year in the dataframe.\nHere we can see that the observations in this dataframe span the years 1970-1982 and it does indeed look like the mileage is getting better over time as we expected!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "href": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting all data to visualize trends over time is not effective",
    "text": "Plotting all data to visualize trends over time is not effective\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nAs a comparison with the previous slide, if we instead of the mean would plot all the data points for each year, it would be much more difficult to see the pattern over time as you can see here."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting points to visualize trends over time is not ideal",
    "text": "Plotting points to visualize trends over time is not ideal\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nIf we try to explore the mileage over time while grouping the cars according to their origin, it is a bit difficult to immediately recognize which points belong to which group.\nIn fact, using points for visualizing trends is not ideal, and lines are often preferred as we will see in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting lines to visualize trends over time is ideal",
    "text": "Plotting lines to visualize trends over time is ideal\n\nalt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nOne key advantage of line plots is that they connect all the observations that belong to the same group presenting them as one unified graphical object (one line), which is easy for us to distinguish when looking at the plot instead of trying to connect the dots mentally.\nAnother advantage is that the slope of the line makes it easier to see if the value from one year to another is increasing or decreasing.\nAltair grammar lets us switch from a point plot to a line plot, by only changing mark_point() to mark_line(), and keeping the rest of the code as-is.\nIn this plot, we can clearly compare the mileage trends over time to conclude that cars from all origins improved their mileage, and that the trajectory and mileage values are the most similar between Europe and Japan."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "href": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "title": "Aggregations, lines, and layers",
    "section": "Combining a line with a set of points via layers",
    "text": "Combining a line with a set of points via layers\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\npoint = alt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + point\n\n\n\n\n\n\n\n\nTo augment a line plot, it is sometimes helpful to add point marks for each data point along the line, to emphasize where the observations fall.\nThis is helpful since the line drawn between points could be misleading if we have very few points.\nFor example, if you see a straight line, does that mean there are just two points, one in each corner of the line?\nOr are there ten points spread out all along the line?\nTo combine two different types of graphical marks (line and point in this case), we will use Altair’s layering grammar.\nIn this slide, we start by defining each chart separately:\nfirst a line plot,  then a point plot.\nWe can then use the + (plus) operator to combine the two into a layered chart."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "href": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "title": "Aggregations, lines, and layers",
    "section": "Building upon previous plots can save time when combining charts",
    "text": "Building upon previous plots can save time when combining charts\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point()\n\n\n\n\n\n\n\n\nWe can also create a layered plot by reusing a previous chart definition.\nRather than creating the point plot from scratch, we can start with the line plot, and then invoke the mark_point method.\nWe could also have typed mark_line(point=True), which is a special case for getting points on a line since it is such a common operation, but the layering grammar extends to other plots, so it is more helpful to focus on learning that."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "href": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "title": "Aggregations, lines, and layers",
    "section": "Showing raw values together with the mean is often helpful",
    "text": "Showing raw values together with the mean is often helpful\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWhen we are combing plots in layers, we can not only change the mark, but also the encodings.\nThis way, we can create a layer with one point per observations, and with a line for the average values.\nFor this, we need to use encode again after creating the first plot, to instruct Altair to use the raw values instead of the mean for the points.\n(note that the axis now has two labels, we will see how to change that in a future lecture).\nThis type of visualization is helpful when we want to show both the underlying data and a statistical summary, which is often helpful for elucidating what the data tells us.\nIt is also a good check to make sure nothing unexpected is going on with the raw values as we saw in the introductory example with Anscombe’s quartet."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "href": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "title": "Aggregations, lines, and layers",
    "section": "All encodings of the base chart are propagated unless they are overwritten",
    "text": "All encodings of the base chart are propagated unless they are overwritten\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWe have already seen that the x and y encoding remain the same in any subsequently created plots.\nHere, we’re showing that this also applies to the colour encoding to illustrate that any encoding will be propagated to all layers unless they are specifically overwritten.\nIf we would only have added colour to the point chart, there would still have been a single line instead of three."
  },
  {
    "objectID": "modules/module2/module2-00-module_learning_outcomes.html",
    "href": "modules/module2/module2-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module2/module2-04-true_or_false_area_and_lines.html",
    "href": "modules/module2/module2-04-true_or_false_area_and_lines.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year0510152025Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot A\n\n\n\n1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year012345678Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot B\n\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nRemember our vehicle dataset? We are going to take a look at how fuel efficiency has improved over the years. Let’s try answering the question “Over time, how has the average automobile fuel efficiency changed?”\n\n\n\n\n\n\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_area() or .mark_line()?\nAre you assigning the plot to an object namedfuel_efficiency?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s now take a look at each country manufacturer. How did the mean fuel efficiency change from the year 1070-1982 for each manufacturing origin?\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency_org.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you assigning the plot to an object namedfuel_efficiency_org?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you specifying colour = 'Origin'?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-04-true_or_false_area_and_lines.html#checking-your-area-of-expertise",
    "href": "modules/module2/module2-04-true_or_false_area_and_lines.html#checking-your-area-of-expertise",
    "title": "2.1. Exercises",
    "section": "",
    "text": "1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year0510152025Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot A\n\n\n\n1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year012345678Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot B",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-04-true_or_false_area_and_lines.html#practicing-your-plotting",
    "href": "modules/module2/module2-04-true_or_false_area_and_lines.html#practicing-your-plotting",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nRemember our vehicle dataset? We are going to take a look at how fuel efficiency has improved over the years. Let’s try answering the question “Over time, how has the average automobile fuel efficiency changed?”\n\n\n\n\n\n\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_area() or .mark_line()?\nAre you assigning the plot to an object namedfuel_efficiency?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s now take a look at each country manufacturer. How did the mean fuel efficiency change from the year 1070-1982 for each manufacturing origin?\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency_org.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you assigning the plot to an object namedfuel_efficiency_org?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you specifying colour = 'Origin'?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=???),\n    y='count()').properties(title='The distribution of students per classroom')\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nAlright, let’s bring in a new dataset containing information on penguins. This data is available from Kaggle and originally available from Allison Horst’s GitHub Repository.\n\n\n\n\n\n\nWe are interested in obtaining the number of penguins we collected of each species.\nTasks:\n\nUsing a bar plot, visualize the count of penguins for each species using the dataframe penguins_df.\nChoose the appropriate rotation, given the axis labels.\nSort your bars in an appropriate order.\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_bar.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_bar?\nAre you specifying alt.Y('species', sort='x') on the y-axis?\nAre you specifying count() on the x-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now see what the distribution of penguin flipper length looks like.\nTasks:\n\nUsing bars, show the counts of the flipper_length_mm values using the penguins_df dataframe\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_hist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_hist?\nAre you specifying alt.X('flipper_length_mm', bin=True) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#testing-your-bar-knowledge",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#testing-your-bar-knowledge",
    "title": "3.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=???),\n    y='count()').properties(title='The distribution of students per classroom')",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#practicing-bar-plots-with-penguins",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#practicing-bar-plots-with-penguins",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nAlright, let’s bring in a new dataset containing information on penguins. This data is available from Kaggle and originally available from Allison Horst’s GitHub Repository.\n\n\n\n\n\n\nWe are interested in obtaining the number of penguins we collected of each species.\nTasks:\n\nUsing a bar plot, visualize the count of penguins for each species using the dataframe penguins_df.\nChoose the appropriate rotation, given the axis labels.\nSort your bars in an appropriate order.\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_bar.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_bar?\nAre you specifying alt.Y('species', sort='x') on the y-axis?\nAre you specifying count() on the x-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#making-history-with-histograms",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#making-history-with-histograms",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now see what the distribution of penguin flipper length looks like.\nTasks:\n\nUsing bars, show the counts of the flipper_length_mm values using the penguins_df dataframe\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_hist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_hist?\nAre you specifying alt.X('flipper_length_mm', bin=True) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-08-true_or_false_facets.html",
    "href": "modules/module2/module2-08-true_or_false_facets.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=True),\n    y='count()'\n).properties(width=300, height=150).facet(???)\n\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nOk, let’s facet our penguin dataset now.\n\n\n\n\n\n\nTasks:\n\nUsing bars, show the distribution of the body_mass_g values from the penguins_df dataset.\nMake sure to give it a title and set the dimensions to a height of 100 and a width of 150.\nFacet your plots by species for the columns and by island for the rows.\nSave your plot in an object named penguin_facet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_facet?\nAre you specifying alt.X('species', bin=alt.Bin(maxbins=15)) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-08-true_or_false_facets.html#facing-some-faceting-questions",
    "href": "modules/module2/module2-08-true_or_false_facets.html#facing-some-faceting-questions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=True),\n    y='count()'\n).properties(width=300, height=150).facet(???)",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-08-true_or_false_facets.html#faceting-with-penguins",
    "href": "modules/module2/module2-08-true_or_false_facets.html#faceting-with-penguins",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nOk, let’s facet our penguin dataset now.\n\n\n\n\n\n\nTasks:\n\nUsing bars, show the distribution of the body_mass_g values from the penguins_df dataset.\nMake sure to give it a title and set the dimensions to a height of 100 and a width of 150.\nFacet your plots by species for the columns and by island for the rows.\nSave your plot in an object named penguin_facet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_facet?\nAre you specifying alt.X('species', bin=alt.Bin(maxbins=15)) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "href": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nChoose effective visual channels for information display.\nVisualize frequencies with bar plots.\nFacet plots to explore more variables simultaneously.\nCustomize axes labels and scales."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#global-development-data",
    "href": "modules/module2/slides/module2_03.html#global-development-data",
    "title": "Creating Area Charts",
    "section": "Global Development Data",
    "text": "Global Development Data\n\n\n\n\nColumn\n\n\nDescription\n\n\n\n\n\n\ncountry\n\n\nCountry name\n\n\n\n\nyear\n\n\nYear of observation\n\n\n\n\npopulation\n\n\nPopulation in the country at each year\n\n\n\n\nregion\n\n\nContinent the country belongs to\n\n\n\n\nsub_region\n\n\nSub-region the country belongs to\n\n\n\n\nincome_group\n\n\nIncome group as specified by the world bank in 2018\n\n\n\n\nlife_expectancy\n\n\nThe mean number of years a newborn would live if mortality patterns remained constant\n\n\n\n\nincome\n\n\nGDP per capita (in USD) adjusted for differences in purchasing power\n\n\n\n\nchildren_per_woman\n\n\nAverage number of children born per woman\n\n\n\n\nchild_mortality\n\n\nDeaths of children under 5 years of age per 1000 live births\n\n\n\n\npop_density\n\n\nAverage number of people per km2\n\n\n\n\nco2_per_capita\n\n\nCO2 emissions from fossil fuels (tonnes per capita)\n\n\n\n\nyears_in_school_men\n\n\nMean number of years in primary, secondary, and tertiary school for 25-36 years old men\n\n\n\n\nyears_in_school_women\n\n\nMean number of years in primary, secondary, and tertiary school for 25-36 years old women\n\n\n\n\n\nWe will be visualizing global health data to answer the question: How has the population for different regions around the world changed over time?\nThis dataset is more similar to those you will encounter in the wild than the sample dataset, we saw in the first module. We will be exploring this data in the assignments for the first two modules.\nIn later labs we will look at many other datasets, but we’re sticking to a familiar one for now so that we can focus on laying down a solid understanding of the visualization principles with data that we already know."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#read-in-and-glimpse-at-the-data-with-pandas",
    "href": "modules/module2/slides/module2_03.html#read-in-and-glimpse-at-the-data-with-pandas",
    "title": "Creating Area Charts",
    "section": "Read in and glimpse at the data with pandas",
    "text": "Read in and glimpse at the data with pandas\n\nimport pandas as pd\n\ngm = pd.read_csv(\"data/world-data-gapminder.csv\", parse_dates=[\"year\"])\ngm\n\n\n\n\n\n\n\n\ncountry\nyear\npopulation\nregion\n...\npop_density\nco2_per_capita\nyears_in_school_men\nyears_in_school_women\n\n\n\n\n0\nAfghanistan\n1800-01-01\n3280000\nAsia\n...\nNaN\nNaN\nNaN\nNaN\n\n\n1\nAfghanistan\n1801-01-01\n3280000\nAsia\n...\nNaN\nNaN\nNaN\nNaN\n\n\n2\nAfghanistan\n1802-01-01\n3280000\nAsia\n...\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n38979\nZimbabwe\n2016-01-01\n16200000\nAfrica\n...\n41.7\nNaN\nNaN\nNaN\n\n\n38980\nZimbabwe\n2017-01-01\n16500000\nAfrica\n...\n42.7\nNaN\nNaN\nNaN\n\n\n38981\nZimbabwe\n2018-01-01\n16900000\nAfrica\n...\n43.7\nNaN\nNaN\nNaN\n\n\n\n\n38982 rows × 14 columns\n\n\n\n\nAs we read in the data with pandas, we specify to read in the year column as a date, rather than an integer, which is the default behaviour.\nRemember that Altair uses the pandas data types to infer the data it is working with. Integers would show up on the Altair chart axes as 1,990, 2,000, etc whereas dates are shown as 1990, 2000, etc, so make sure to parse these columns as dates when using pandas."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#info-shows-column-data-types-and-missing-values",
    "href": "modules/module2/slides/module2_03.html#info-shows-column-data-types-and-missing-values",
    "title": "Creating Area Charts",
    "section": ".info() shows column data types and missing values",
    "text": ".info() shows column data types and missing values\n\ngm.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 38982 entries, 0 to 38981\nData columns (total 14 columns):\n #   Column                 Non-Null Count  Dtype         \n---  ------                 --------------  -----         \n 0   country                38982 non-null  object        \n 1   year                   38982 non-null  datetime64[ns]\n 2   population             38982 non-null  int64         \n 3   region                 38982 non-null  object        \n 4   sub_region             38982 non-null  object        \n 5   income_group           38982 non-null  object        \n 6   life_expectancy        38982 non-null  float64       \n 7   income                 38982 non-null  int64         \n 8   children_per_woman     38982 non-null  float64       \n 9   child_mortality        38980 non-null  float64       \n 10  pop_density            12282 non-null  float64       \n 11  co2_per_capita         16285 non-null  float64       \n 12  years_in_school_men    8188 non-null   float64       \n 13  years_in_school_women  8188 non-null   float64       \ndtypes: datetime64[ns](1), float64(7), int64(2), object(4)\nmemory usage: 4.2+ MB\n\n\n\nWhen reading in a new dataset, it is always a good idea to glimpse at a few rows like we did in the previous slide to get an idea of what the data looks like.\nAnother helpful practice is to use the .info() method to get an overview of the column data types and see if there are any NaNs (missing values).\nIf there are many missing values in a column, we would want to look into why that is. Later in the course, we will learn about how to visualize missing values to understand if there are patterns in which values are missing, which could affect our data analysis.\nIn this and the previous slide, we can also see that our dataset is pretty big, there are almost 40,000 rows!\nThe first time working with such large datasets in Altair can be a bit confusing because Altair saves the entire dataframe as part of the visualization, when working with pandas dataframes,\nThis is great because each visualization is reproducible in itself, we don’t need to go looking for the data if we come across a plot on the web, or worry that the authors didn’t upload it.\nHowever, for large datasets this causes the visualizations files to become really big, and Altair shows a warning for any dataset larger than 5000 rows.\nWe will talk about this in detail in a later module, and see different strategies for working with large datasets."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#working-with-large-data-in-altair-via-urls",
    "href": "modules/module2/slides/module2_03.html#working-with-large-data-in-altair-via-urls",
    "title": "Creating Area Charts",
    "section": "Working with large data in Altair via URLs",
    "text": "Working with large data in Altair via URLs\n\nchart = (\n    alt.Chart(\"https://website.com/data.csv\")\n    .mark_line()\n    .encode(x=\"column1:T\", y=\"column2:Q\")\n)\n\n\nIn this slide deck, we’re going to leverage the fact that Altair does not have to work with dataframes, but can also use a URL link that points to data that has been uploaded somewhere on the web. The slides show an example of what this syntax looks like in general.\nSince we have uploaded our dataset to the course online repository, we will read the data directly from there using this URL https://raw.githubusercontent.com/UBC-MDS/exploratory-data-viz/refs/heads/main/modules/data/world-data-gapminder.csv.\nThis is powerful since we can use any data online without downloading it first and it allows us to create Altair charts without worrying that the entire dataframe will be included! Since Altair knows the location of the data online, the chart is still reproducible as long as the data is not removed from its online location.\nThe drawback of not using a dataframe, is that Altair cannot rely on pandas to infer what type of data there is in each column, so we need to help it by indicating the datatype.\nThis is what the :T and :Q after the column names do and an explanation of all the data types in Altair can be found in the next slide."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#data-types-need-to-be-manually-specified-when-not-working-with-pandas",
    "href": "modules/module2/slides/module2_03.html#data-types-need-to-be-manually-specified-when-not-working-with-pandas",
    "title": "Creating Area Charts",
    "section": "Data types need to be manually specified when not working with pandas",
    "text": "Data types need to be manually specified when not working with pandas\n\n\n\n\nData Type\n\n\nShorthand Code\n\n\nDescription\n\n\nExamples\n\n\n\n\n\n\nOrdinal\n\n\nO\n\n\na discrete ordered quantity\n\n\n“dislike”, “neutral”, “like”\n\n\n\n\nNominal\n\n\nN\n\n\na discrete un-ordered quantity\n\n\neye color, postal code, university\n\n\n\n\nQuantitative\n\n\nQ\n\n\na continuous quantity\n\n\n5, 5.0, 5.011\n\n\n\n\nTemporal\n\n\nT\n\n\na time or date value\n\n\ndate (August 13 2020), time (12:00 pm)\n\n\n\n\n\nAltair recognizes the four main column types, which you can see in this slide (that you also saw in the Programming with Python course).\nOrdinal and nominal both describe categorical data.\nOrdinal implies that there is a natural order to the categories. for example, movie ratings with 1-5 stars would be an ordinal scale since a five-star rating is better than a single-star rating.\nIn contrast, there is no such order for nominal categories, for example colours, fruits, or countries.\nQuantitative data describes data that is continuous, which means that it is a number that can be described with infinite precision. For example, someone’s height could be said to be either 170 cm, 170.12 cm, 170.1281 cm, and so on depending on how accurately we can measure them.\nDates are generally temporal, but there are instances when it makes sense to defines them as ordinal or even nominal categories, for example when having just a few dates to compare between.\nArmed with this knowledge, let’s get started visualizing our data!"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#draw-a-line-chart-for-how-you-think-the-world-population-has-changed-since-the-1800s",
    "href": "modules/module2/slides/module2_03.html#draw-a-line-chart-for-how-you-think-the-world-population-has-changed-since-the-1800s",
    "title": "Creating Area Charts",
    "section": "Draw a line chart for how you think the world population has changed since the 1800s",
    "text": "Draw a line chart for how you think the world population has changed since the 1800s\n   \nTake a few minutes to first sketch out how you would expect your plot to appear before going to the next slide.\n\nNow that we have seen what the data table looks like, and which data type the values in each column are, let’s think about what we would want to visualize and why.\nSince the data reaches all the way back to the 1800s, it would be really interesting to plot how the world population has been growing up until today. We could use a line plot for this as we learned in the first module.\nDraw this out on paper yourself so that it is clear what you expect the plot before going to the next slide."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#our-sketched-out-plot",
    "href": "modules/module2/slides/module2_03.html#our-sketched-out-plot",
    "title": "Creating Area Charts",
    "section": "Our sketched out plot",
    "text": "Our sketched out plot\n\n\nIf we drew this visualization out on paper, we would expect something a little like this - a single line that increases from the 1800s up until today as the population increased. It’s a good idea to include axis labels too!"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#a-line-chart-is-a-good-choice-for-trends-over-time",
    "href": "modules/module2/slides/module2_03.html#a-line-chart-is-a-good-choice-for-trends-over-time",
    "title": "Creating Area Charts",
    "section": "A line chart is a good choice for trends over time",
    "text": "A line chart is a good choice for trends over time\n\nimport altair as alt\n\ngm_url = \"https://raw.githubusercontent.com/UBC-MDS/exploratory-data-viz/refs/heads/main/modules/data/world-data-gapminder.csv\"\n\nalt.Chart(gm_url).mark_line().encode(\n    x='year:T',\n    y='population:Q'\n)\n\n\n\n\n\n\n\n\nNext, we try to plot it in Altair using mark_line() and mapping year to the x-axis and population to the y-axis.\nBut the plot on this slide doesn’t look like a line plot, why is that?\nBecause every country has multiple entries, one for each year. We have plotted the population for every single country in every year and connected them all with a line.\nThat’s not what we want!"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#the-.sum-aggregate-method-will-show-us-the-trend-of-the-entire-world",
    "href": "modules/module2/slides/module2_03.html#the-.sum-aggregate-method-will-show-us-the-trend-of-the-entire-world",
    "title": "Creating Area Charts",
    "section": "The .sum() aggregate method will show us the trend of the entire world",
    "text": "The .sum() aggregate method will show us the trend of the entire world\n\nalt.Chart(gm_url).mark_line().encode(\n    x='year:T',\n    y='sum(population):Q')\n\n\n\n\n\n\n\n\nWe want to see how the world population has been changing.\nWe can calculate this by summing up all the countries’ populations for each year via the .sum() aggregation method in Altair.\nThat looks much better!\nInterestingly, it seems like the world population have been growing in two distinct phases: slowly before 1950, and more rapidly afterwards.\nWe will talk more about that in a few slides.\nWe can see here that Altair automatically changes the axis label for us to reflect the operation that we have performed on the data, here taking the “sum” of the countries.\nThis is often great to keep track of how we have aggregated the data, but is not always needed.\nIn this case, our plot could be made even clearer if the axis title read “World population” instead."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#changing-axes-titles-clarifies-makes-our-plot-easier-to-interpret",
    "href": "modules/module2/slides/module2_03.html#changing-axes-titles-clarifies-makes-our-plot-easier-to-interpret",
    "title": "Creating Area Charts",
    "section": "Changing axes titles clarifies makes our plot easier to interpret",
    "text": "Changing axes titles clarifies makes our plot easier to interpret\n\nalt.Chart(gm_url).mark_line().encode(\n    x='year:T',\n    y=alt.Y('sum(population):Q', title='World population'))\n\n\n\n\n\n\n\n\nTo change an axis title, we can use the helper functions alt.X and alt.Y, instead of x= and y=.\nThese have the role of customizing things like titles, orders, groups, and scales for the axes. When using just y='column', we’re still calling alt.Y() under the hood, we just save ourselves some typing.\nWe can also get rid of the y= and x= parts altogether as well which is even more efficient.\nWe will do a deep dive into titles for axis and other chart elements in a later module.\nFrom now on we will just use it to clarify when an automatic label might be confusing."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#area-charts-are-also-effective-at-visualizing-trends-over-time",
    "href": "modules/module2/slides/module2_03.html#area-charts-are-also-effective-at-visualizing-trends-over-time",
    "title": "Creating Area Charts",
    "section": "Area charts are also effective at visualizing trends over time",
    "text": "Area charts are also effective at visualizing trends over time\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='World population'))\n\n\n\n\n\n\n\n\nLet’s see how we can visualize the world population changes with an area chart instead of a line chart.\nThanks to Altair’s consistent visualization grammar, the modifications we need to make to the code are minor. Replace mark_line with mark_area and we’re done.\nFor showing a single trend over time, the choice between a line and area chart comes down to aesthetics. They are both effective choices for this purpose.\nHowever, when visualizing the trends over time for multiple groups, lines and areas have different advantages, as we will see next."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#area-charts-are-preferred-when-the-total-of-the-groups-is-the-most-important",
    "href": "modules/module2/slides/module2_03.html#area-charts-are-preferred-when-the-total-of-the-groups-is-the-most-important",
    "title": "Creating Area Charts",
    "section": "Area charts are preferred when the total of the groups is the most important",
    "text": "Area charts are preferred when the total of the groups is the most important\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='World population'),\n    color='region:N')\n\n\n\n\n\n\n\n\nThe y-axis range of this chart is the same as the one on the previous slide, so it is easy to see how the total world population has changed over time.\nFrom the stacked coloured regions, we also get a rough idea of how each region has grown, but it is hard to compare exactly, especially for regions that are not stacked next to each other.\nFor example, we can’t really tell if Europe or Africa, has the largest population in the most recent year."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#it-is-helpful-to-clarify-that-the-areas-are-stacked-on-top-of-each-other",
    "href": "modules/module2/slides/module2_03.html#it-is-helpful-to-clarify-that-the-areas-are-stacked-on-top-of-each-other",
    "title": "Creating Area Charts",
    "section": "It is helpful to clarify that the areas are stacked on top of each other",
    "text": "It is helpful to clarify that the areas are stacked on top of each other\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='Cumulative population of stacked regions'),\n    color='region:N')\n\n\n\n\n\n\n\n\nAltair stacks by areas by default, which is usually what we want when creating an area chart with groups.\nBut if someone saw our chart without knowing this, they might think that the areas are layered behind each other, so that we only see the top of the blue region peak out behind the orange region.\nTo prevent this misunderstanding, we can change the y-axis label to clearly state that areas are stacked.\nTaken together, stacked area charts are ideal when you want to focus on a total measurement and give a rough idea of the contributions from different groups."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#line-charts-are-preferred-when-the-individual-groups-are-the-most-important",
    "href": "modules/module2/slides/module2_03.html#line-charts-are-preferred-when-the-individual-groups-are-the-most-important",
    "title": "Creating Area Charts",
    "section": "Line charts are preferred when the individual groups are the most important",
    "text": "Line charts are preferred when the individual groups are the most important\n\nalt.Chart(gm_url).mark_line().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='Population'),\n    color='region:N')\n\n\n\n\n\n\n\n\nUsing a line chart is the preferred choice when we want to view the exact values of each group and don’t care as much about the total of the groups added together.\nFor example, here it is immediately clear that Africa has a bigger population than Europe and we can see that the populations shifted shortly after the year 2000.\nOn the other hand, it’s quite cognitively demanding to try to reconstruct the total world population by adding all the lines up together, especially over time!\nIn summary, split line charts are ideal when you want to compare the different groups accurately."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#when-will-the-worlds-population-stop-growing",
    "href": "modules/module2/slides/module2_03.html#when-will-the-worlds-population-stop-growing",
    "title": "Creating Area Charts",
    "section": "When will the world’s population stop growing?",
    "text": "When will the world’s population stop growing?\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='World population'))\n\n\n\n\n\n\n\n\nGoing back to the area chart with one group, let’s look closer at the growth curve of the world’s population.\nFirst, there is a slow linear phase, but soon after the end of the second world war, it the growth starts increasing much more rapidly (but still in a straight line).\nWill the world population keep growing like this for much longer?"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#the-world-population-is-predicted-to-stabilize-at-around-11-billion",
    "href": "modules/module2/slides/module2_03.html#the-world-population-is-predicted-to-stabilize-at-around-11-billion",
    "title": "Creating Area Charts",
    "section": "The world population is predicted to stabilize at around 11 billion",
    "text": "The world population is predicted to stabilize at around 11 billion\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('mean(children_per_woman):Q', title='Average children per woman worldwide'))\n\n\n\n\n\n\n\n\nFortunately, the world population is predicted to stabilize around 11 billion people at the end of the century.\nWhy? Because as living conditions improve around the world, child mortality is going down as can be seen in this visualization.\nIn countries where child mortality is high, women will often give birth to more children than they want in order to protect against losing some of their children.\nLower child mortality leads to more predictable family planning, which in turn often leads to smaller families. In the majority of countries where child mortality has been observed to decrease, the number of children per woman has followed and stabilized around two.\nIf you’re interested in knowing more about the world population predictions, you can use Gapminder’s online resources, for example this video on population growh and this one on why it will slow down."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#how-does-life-expectancy-differ-between-regions",
    "href": "modules/module2/slides/module2_07.html#how-does-life-expectancy-differ-between-regions",
    "title": "Creating subplots via faceting",
    "section": "How does life expectancy differ between regions?",
    "text": "How does life expectancy differ between regions?\n\nimport pandas as pd\nimport altair as alt\n\ngm = pd.read_csv('data/world-data-gapminder.csv', parse_dates=['year'])\ngm2018 = gm[gm['year'] == '2018']\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nHere we have the life expectancy plot that we saw from the last slide deck.\nBut what if we wanted to see how each continent’s bar distribution “stacks up” compared to each other?"
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#stacked-histograms-make-it-hard-to-compare-between-groups",
    "href": "modules/module2/slides/module2_07.html#stacked-histograms-make-it-hard-to-compare-between-groups",
    "title": "Creating subplots via faceting",
    "section": "Stacked histograms make it hard to compare between groups",
    "text": "Stacked histograms make it hard to compare between groups\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region'))\n\n\n\n\n\n\n\n\nWe have previously seen how we can explore categorical dataframe columns by encoding them as the colour channel of our plots.\nAltair creates a stacked bar chart by default when we when encode a dataframe column as the color channel. Notice we are now using the helper functions we saw before but now with alt.Color. (This must be spelt without the “U”)\nJust like with the stacked area chart, this is good when the total height of each bar is the most important, but it is not ideal when the main focus of our visualization is to compare the coloured groups against each other.\nThe reason it is difficult to compare the length of the coloured segments against each other (both within a bar and between bars), is that they don’t share the same baseline so we can’t just compare the position of the top part of the bars, but have to try to estimate their lengths.\nFor these reasons, it is difficult to tell the difference between the regions in this plot and it is not an effective visualization."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#layered-histograms-are-also-difficult-to-compare",
    "href": "modules/module2/slides/module2_07.html#layered-histograms-are-also-difficult-to-compare",
    "title": "Creating subplots via faceting",
    "section": "Layered histograms are also difficult to compare",
    "text": "Layered histograms are also difficult to compare\n\nalt.Chart(gm2018).mark_bar(opacity=0.7).encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', stack=False),\n    alt.Color('region'))\n\n\n\n\n\n\n\n\nIf we tell Altair not to stack the bar along the y-axis, it will instead layer them behind each other. To be able to see all groups, we need to add some opacity to the bar mark.\nAlthough the bars share the same baseline here, they are still difficult to compare against each other, because there is so much overlap with different colours.\nLayered histograms and bar charts can be effective when there are few groups and clear separation between them, but that is not the case here and this plot is even harder to interpret than the previous one."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#creating-a-separate-subplot-for-each-region-facilitate-comparisons-between-them",
    "href": "modules/module2/slides/module2_07.html#creating-a-separate-subplot-for-each-region-facilitate-comparisons-between-them",
    "title": "Creating subplots via faceting",
    "section": "Creating a separate subplot for each region facilitate comparisons between them",
    "text": "Creating a separate subplot for each region facilitate comparisons between them\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region')\n).properties(width=200, height=150\n).facet('region')\n\n\n\n\n\n\n\n\nFaceting creates one facet/subplot for each group in the specified dataframe column. To ensure that the entire grid of facets fit on the slide, we’re also shrinking the dimensions of each subplot.\nFrom this chart, we can more easily compare the regions. For example, we can see that that most European countries have a higher life expectancy than most African countries.\nHowever, it is a little bit more demanding to see exactly how much of the two distributions are overlapping and we would need to look at the number of the axes while scanning left and right on the grid."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#laying-out-facets-vertically-makes-it-easier-to-compare-position-on-the-x-axis",
    "href": "modules/module2/slides/module2_07.html#laying-out-facets-vertically-makes-it-easier-to-compare-position-on-the-x-axis",
    "title": "Creating subplots via faceting",
    "section": "Laying out facets vertically makes it easier to compare position on the x-axis",
    "text": "Laying out facets vertically makes it easier to compare position on the x-axis\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', title=None),\n    alt.Color('region')\n).properties(width=200, height=50\n).facet('region', columns=1)\n\n\n\n\n\n\n\n\nTo make it easier to compare overlap between histograms on the x-axis, we can lay out the facets vertically in a single column.\nThe vertical layout is preferred in this case since we are the most interested to compare position on the x-axis between the groups. If we instead wanted to compare position on the y-axis, a single row would have been better.\nHere, we immediately see that there is a long region of overlap between European and African countries, but that the bulk of each distribution is separated.\nCompare this with the stacked and layered histogram we made in the first few slides and you will realize just how much easier it is to compare the groups here!"
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#subplots-are-often-laid-out-in-even-grids",
    "href": "modules/module2/slides/module2_07.html#subplots-are-often-laid-out-in-even-grids",
    "title": "Creating subplots via faceting",
    "section": "Subplots are often laid out in even grids",
    "text": "Subplots are often laid out in even grids\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region')\n).properties(width=200, height=140\n).facet('region', columns=3)\n\n\n\n\n\n\n\n\nIf we are interested in comparing both x and y values between plots, or are presenting the visualization in a context where we do not have the room to create a single column or row for all the plots, a good alternative is to create an even (or near even) grid of facets, as in this slide.\nAs you can see, the default behaviour for Altair is to leave the last position empty, but include the x-axis line so that we can use it to read the plot in the top row."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#faceting-on-two-categorical-dataframe-columns-allows-us-to-answer-more-complex-questions",
    "href": "modules/module2/slides/module2_07.html#faceting-on-two-categorical-dataframe-columns-allows-us-to-answer-more-complex-questions",
    "title": "Creating subplots via faceting",
    "section": "Faceting on two categorical dataframe columns allows us to answer more complex questions",
    "text": "Faceting on two categorical dataframe columns allows us to answer more complex questions\n\nalt.Chart(gm2018[gm2018['income_group'].isin(['High', 'Low'])]).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region')\n).properties(width=200, height=140\n).facet(column='region', row='income_group')\n\n\n\n\n\n\n\n\nInstead of using the columns parameter, we could specify one categorical dataframe column each for the row and column parameters (note no “s”). Altair will then spread the data out accordingly.\nWith this strategy, we can answer more complex questions such as “How does child mortality differ between low and high income countries in different continents?”.\nWe can see that the countries with low life expectancy in all regions are mostly low-income countries, whereas those with a high life expectancy are mostly high incomes countries (we have filtered the income groups to save space on the slide)."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#coloring-can-also-group-data-within-each-facet",
    "href": "modules/module2/slides/module2_07.html#coloring-can-also-group-data-within-each-facet",
    "title": "Creating subplots via faceting",
    "section": "Coloring can also group data within each facet",
    "text": "Coloring can also group data within each facet\n\nincome_order = ['High', 'Upper middle', 'Lower middle', 'Low']\nalt.Chart(gm2018[gm2018['region'].isin(['Africa'])]).mark_point().encode(\n    alt.X('children_per_woman'),\n    alt.Y('child_mortality'),\n    alt.Color('income_group', sort=income_order),\n).properties(width=200, height=140\n).facet('sub_region')\n\n\n\n\n\n\n\n\nSo far we have encoded the same dataframe column in both the facet and colour channels. This is technically redundant but can be helpful to emphasize the groups in the data.\nIf we wanted to drill down in the data further, we could instead separate each facet into groups by colouring according to another dataframe column.\nThis would allow us to answer questions of similar complexity as in the previous slide, without faceting into both rows and columns.\nHere we will connect back to what we discussed at the end of the last slide deck and answer the question “How does child mortality and the number of children per woman differ between income groups and subregions within Africa”.\nIn our faceted plot, we can first see that there are many more countries and much more spread among them in Sub-Saharan Africa than in Northern Africa. This visualization reveals that there is lower child mortality, fewer children per woman, and higher-income seem to be correlated.\nHowever, we would not want to draw any conclusions before performing formal statistical tests, and investigating the literature to understand if these relationships are also causative.\nIf there were so many categories that the colours become hard to tell apart, it would be worthwhile to try to facet by that dataframe column instead of encoding it as colour."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#as-with-histograms-stacked-colours-are-not-effective-for-categorical-bar-charts",
    "href": "modules/module2/slides/module2_07.html#as-with-histograms-stacked-colours-are-not-effective-for-categorical-bar-charts",
    "title": "Creating subplots via faceting",
    "section": "As with histograms stacked colours are not effective for categorical bar charts",
    "text": "As with histograms stacked colours are not effective for categorical bar charts\n\nalt.Chart(gm2018[gm2018['region'] == 'Africa']).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('sub_region'),\n    alt.Color('income_group', sort=income_order)\n).properties(width=200)\n\n\n\n\n\n\n\n\nIn the plot on the previous slide, we saw that there were many more countries within one of the sub-regions compared to the other, but exactly how many more?\nTo answer this question, we could create a stacked bar chart.\nLayering wouldn’t make sense here either, as that would just hide the bars behind each other. What we would want to do is adding a small offset to each colour so that they dodge each other and are placed side by side.\nThis offset functionality does not yet exist in Altair, but since it is a quite commonly used visualization, we will show you how to create it using facets instead."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#faceting-can-anchor-coloured-bars-to-the-same-baseline-and-facilitate-comparisons",
    "href": "modules/module2/slides/module2_07.html#faceting-can-anchor-coloured-bars-to-the-same-baseline-and-facilitate-comparisons",
    "title": "Creating subplots via faceting",
    "section": "Faceting can anchor coloured bars to the same baseline and facilitate comparisons",
    "text": "Faceting can anchor coloured bars to the same baseline and facilitate comparisons\n\nalt.Chart(gm2018[gm2018['region'] == 'Africa']).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('income_group', sort=income_order),\n    alt.Color('income_group', sort=income_order, legend=None)\n).properties(width=200\n).facet('sub_region')\n\n\n\n\n\n\n\n\nBy spreading the sub-regions out as facets, and encoding the same dataframe column in both the y and colour channel, we can create where the bars share the same baseline and are easy to compare.\nIn this chart, it is immediately clear how many countries there are for each region and income group.\nWe have removed the redundant colour legend in favour of the direct labels on the y-axis. We will talk more about direct labelling versus legends in a future module, but in general, direct labelling is often clearer.\nWe could combine this strategy by using row and column in facet, which would allow us to create visualizations that split data across three different channels: rows, columns, and colour.\nWhen visualizing so many dataframe columns, it is often useful to use colour for the most important comparison, since these groups will be the closest to each other making them easier to compare.\nIt is not always that simple and in general, you should be careful to avoid creating plots that are so complex that they are hard to interpret."
  },
  {
    "objectID": "modules/module3/module3-00-module_learning_outcomes.html",
    "href": "modules/module3/module3-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html",
    "href": "modules/module3/module3-02-true_or_false_distributions.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "hist_plot = alt.Chart(df_source).mark_bar(opacity=0.4).encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', ???),\n    color='genre')\n .facet('country')\n .resolve_scale(y='independent')\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s bring back our penguins that we introduced in the previous module.\n\n\n\n\n\n\nThe culmen, also sometimes referred to as the bill, is the upper ridge of a bird’s beak. Below, we’ve included a diagram made by Allison Horst which should help give you a bit of an idea of what these values are measuring.\n\n\n\n\n\nThe culmen measurements can useful for predicting the sex between penguin species, however, it may be interesting to see if it’s indicative of species as well!\nFor this question let’s create a stacked histogram of the values in the culmen_depth_mm column for different penguin species and determine if there is any type of relationship between the culmen depth and the species of penguin.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins to make a stacked histogram plot.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate.\nGive it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nUsing the penguins dataset again, we are going to try to create a layered histogram.\nWe want to understand how penguins’ culmen depth differs over different penguin species. This means we will need to layer the histogram shapes of the culmen_depth_mm column. We also want to facet on the sex column to see if this affects the distribution.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a layered histogram plot named culmen_layered_plot and make sure to give it an appropriate opacity.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate and any other arguments needed to make a layered plot.\nGive it an appropriate title and facet by the sex column making sure that there is only 1 column so the graphs are stacked vertically.\nMake sure to give each faceted plot an independent axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting opacity=0.5 in mark_bar()?\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you specifying stack=None in the alt.Y() helper function?\nAre you setting a title in properties()?\nAre you faceting by sex using .facet('sex', columns=1)?\nAre you giving the plots independent axis with .resolve_scale(y='independent')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html#multiple-choice-questions-on-single-column-plots",
    "href": "modules/module3/module3-02-true_or_false_distributions.html#multiple-choice-questions-on-single-column-plots",
    "title": "1.1. Exercises",
    "section": "",
    "text": "hist_plot = alt.Chart(df_source).mark_bar(opacity=0.4).encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', ???),\n    color='genre')\n .facet('country')\n .resolve_scale(y='independent')",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html#stacked-plotting-with-penguins",
    "href": "modules/module3/module3-02-true_or_false_distributions.html#stacked-plotting-with-penguins",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s bring back our penguins that we introduced in the previous module.\n\n\n\n\n\n\nThe culmen, also sometimes referred to as the bill, is the upper ridge of a bird’s beak. Below, we’ve included a diagram made by Allison Horst which should help give you a bit of an idea of what these values are measuring.\n\n\n\n\n\nThe culmen measurements can useful for predicting the sex between penguin species, however, it may be interesting to see if it’s indicative of species as well!\nFor this question let’s create a stacked histogram of the values in the culmen_depth_mm column for different penguin species and determine if there is any type of relationship between the culmen depth and the species of penguin.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins to make a stacked histogram plot.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate.\nGive it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html#layered-plotting-with-penguins",
    "href": "modules/module3/module3-02-true_or_false_distributions.html#layered-plotting-with-penguins",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nUsing the penguins dataset again, we are going to try to create a layered histogram.\nWe want to understand how penguins’ culmen depth differs over different penguin species. This means we will need to layer the histogram shapes of the culmen_depth_mm column. We also want to facet on the sex column to see if this affects the distribution.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a layered histogram plot named culmen_layered_plot and make sure to give it an appropriate opacity.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate and any other arguments needed to make a layered plot.\nGive it an appropriate title and facet by the sex column making sure that there is only 1 column so the graphs are stacked vertically.\nMake sure to give each faceted plot an independent axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting opacity=0.5 in mark_bar()?\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you specifying stack=None in the alt.Y() helper function?\nAre you setting a title in properties()?\nAre you faceting by sex using .facet('sex', columns=1)?\nAre you giving the plots independent axis with .resolve_scale(y='independent')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-04-true_or_false_distributions.html",
    "href": "modules/module3/module3-04-true_or_false_distributions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nBringing back our trusty penguins data, we are going to try to make a density plot that will provide insights into the distribution of penguins mass among the different islands.\n\n\n\n\n\n\nCreate a density plot for the body_mass_g column for penguins located on different islands.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a plot assigned to an object named mass_density_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s facet based on species and see if that gives us some more insight.\nCreate a density plot for the body_mass_g column for penguins located on different islands but this time facet for species\nTasks:\n\nUse the data source penguins_df to make the plot and assign it to an object named mass_faceted_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island and penguin species. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title and set the width of the plot to 200 and height to 100.\nFacet the plot by the penguin species and display them all in a single column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island','species'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title, height and width in properties()?\nAre you faceting with .facet('species', columns=1)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-04-true_or_false_distributions.html#application-make-your-own-density-plot",
    "href": "modules/module3/module3-04-true_or_false_distributions.html#application-make-your-own-density-plot",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nBringing back our trusty penguins data, we are going to try to make a density plot that will provide insights into the distribution of penguins mass among the different islands.\n\n\n\n\n\n\nCreate a density plot for the body_mass_g column for penguins located on different islands.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a plot assigned to an object named mass_density_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s facet based on species and see if that gives us some more insight.\nCreate a density plot for the body_mass_g column for penguins located on different islands but this time facet for species\nTasks:\n\nUse the data source penguins_df to make the plot and assign it to an object named mass_faceted_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island and penguin species. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title and set the width of the plot to 200 and height to 100.\nFacet the plot by the penguin species and display them all in a single column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island','species'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title, height and width in properties()?\nAre you faceting with .facet('species', columns=1)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-true_or_false_many_distributions.html#true-or-false-many-distributions",
    "href": "modules/module3/module3-06-true_or_false_many_distributions.html#true-or-false-many-distributions",
    "title": "3.1. Exercises",
    "section": "True or False: Many Distributions",
    "text": "True or False: Many Distributions",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-true_or_false_many_distributions.html#why-and-how-to-compare-multiple-distributions",
    "href": "modules/module3/module3-06-true_or_false_many_distributions.html#why-and-how-to-compare-multiple-distributions",
    "title": "3.1. Exercises",
    "section": "Why and How to Compare Multiple Distributions",
    "text": "Why and How to Compare Multiple Distributions\n\n\n\n\n\n\n0200,000,000400,000,000600,000,000800,000,0001,000,000,0001,200,000,0001,400,000,0001,600,000,0001,800,000,0002,000,000,0002,200,000,0002,400,000,0002,600,000,0002,800,000,000Worldwide Gross0.000000000.000000010.000000020.000000030.000000040.00000005densityActionAdventureBlack ComedyComedyConcert/PerformanceDocumentaryDramaHorrorMusicalRomantic ComedyThriller/SuspenseWesternMajor Genre",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-true_or_false_many_distributions.html#boxplots-and-penguins",
    "href": "modules/module3/module3-06-true_or_false_many_distributions.html#boxplots-and-penguins",
    "title": "3.1. Exercises",
    "section": "Boxplots and Penguins",
    "text": "Boxplots and Penguins\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nIn the last few slides, we were faceting and using colour channels to compare the body mass of different species of penguins. Let’s explore this but this time using a boxplot!\n\n\n\n\n\n\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make boxplots for the body mass values among the different penguin species.\nMake sure to give it an appropriate title and set the plot dimensions to a height of 200 and a width of 400.\nRemember to assign the species to the y-axis and the body_mass_g to the y-axis since we want to read the labels easily as we learned in the previous module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_boxplot()?\nAre you setting alt.X('body_mass_g')?\nAre you setting alt.Y('species')?\nAre you setting a title, height and width in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "href": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nSelect an appropriate distribution plot for the data.\nCreate density plots to compare a few distributions.\nCreate boxplots to compare many distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#histograms-can-give-different-results-depending-on-the-data",
    "href": "modules/module3/slides/module3_03.html#histograms-can-give-different-results-depending-on-the-data",
    "title": "Using density plots to visualize distributions",
    "section": "Histograms can give different results depending on the data",
    "text": "Histograms can give different results depending on the data\nFrom scikit-learn\n\n\nHow many observations are counted per bar in a histogram depends on exactly where on the axis the border between the bins are.\nIn the images on this slide, the actual observations are drawn with black tick marks on the bottom and they are the same in both subplots.\nThe reason the histograms look different is that the border between the groups is shifted in the rightmost picture.\nAs we see here, a histogram is not an as unbiased plot as we might think at first, especially not if we have few data points, where the inclusion or exclusion of just a few points makes a big difference for the bar height."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#centering-the-bins-on-the-data-can-help-create-more-accurate-distribution-plots",
    "href": "modules/module3/slides/module3_03.html#centering-the-bins-on-the-data-can-help-create-more-accurate-distribution-plots",
    "title": "Using density plots to visualize distributions",
    "section": "Centering the bins on the data can help create more accurate distribution plots",
    "text": "Centering the bins on the data can help create more accurate distribution plots\n\n\nInstead of setting fixed lines along the axis and then count points fully in one bin or another, we can create bins that are centred on the data and then add the bins together.\nWhen we center bins on the data, we often use bell-shaped bins instead of square ones as in the histogram. This removes noise or spikes in the plotted area, which could arise when using a square bin.\nThese spikes are often not informative for us when trying to get an idea of what the distribution looks like, and a smoother area is more conducive to conveying the overall shape of the data distribution.\nThe bell-shaped bins (also called kernels) are then added together as in the animation in this slide so that they sum up to an overall distribution line. Formally, this is called a “Kernel Density Estimate” (KDE), or just a “density plot”."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#reading-in-the-movies-dataset",
    "href": "modules/module3/slides/module3_03.html#reading-in-the-movies-dataset",
    "title": "Using density plots to visualize distributions",
    "section": "Reading in the movies dataset",
    "text": "Reading in the movies dataset\n\nimport pandas as pd\n\nmovies = pd.read_csv(\"data/movies.csv\")\nmovies\n\n\n\n\n\n\n\n\ntitle\nruntime\nbudget\nrevenue\ngenre\ncountry\nvote_average\n\n\n\n\n0\nFinding Nemo\n100\n94000000\n940335536\nAnimation\nUnited States of America\n3.86\n\n\n1\nPirates of the Caribbean: The Curse of the Bla...\n143\n140000000\n655011224\nFantasy\nUnited States of America\n3.81\n\n\n2\nThe Simpsons Movie\n87\n75000000\n527068851\nAnimation\nUnited States of America\n3.44\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n526\nThe Emoji Movie\n86\n50000000\n66913939\nAnimation\nUnited States of America\n0.63\n\n\n527\nA Dog's Purpose\n100\n22000000\n194647323\nFantasy\nUnited States of America\n3.61\n\n\n528\nBatman: The Killing Joke\n72\n3500000\n3775000\nAnimation\nUnited States of America\n2.94\n\n\n\n\n529 rows × 7 columns\n\n\n\n\nWe will continue with the movies dataset in this slide deck, to try to answer the question we posed at the end of the previous chapter: “Are there differences in movie runtimes between genres?”.\nAs we have seen previously, histograms are not effective for this type of comparison between distributions, no matter if they are stacked or layered.\nWe could use faceting to answer this question, but sometimes we want to dedicate the separate facets for another categorical dataframe column, as we will do later in this slide deck.\nWhile row and column-based faceting would be possible, those plots require a lot of space. Here we will instead explore how we can use density plots, to effectively visualize both single and multiple distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#creating-a-density-plot-in-altair-requires-two-step",
    "href": "modules/module3/slides/module3_03.html#creating-a-density-plot-in-altair-requires-two-step",
    "title": "Using density plots to visualize distributions",
    "section": "Creating a density plot in Altair requires two step",
    "text": "Creating a density plot in Altair requires two step\n\nimport altair as alt\n\n(alt.Chart(movies).transform_density(\n    'runtime',\n    # Give a name to the density values, which we can use when plotting\n    as_=['runtime', 'density'])\n .mark_area().encode(\n    x='runtime',\n    y='density:Q'))\n\n\n\n\n\n\n\n\nTo create a density plot, we need to complete two tasks: 1. Place the bell-shaped bins and add them together as in the animation a few slides ago. 2. Plot a line or area mark for the newly calculated sum of bins. In Altair, these operations are done in two explicit steps, using transform_density for the calculation.\nFirst, we specify which dataframe column we want to use for the calculation. Then we use the as_ parameter to name the newly calculated values, which we here refer to as 'density'.\nSince the 'density' values are not part of the pandas dataframe, Altair cannot ask pandas which data type it is. Therefore, we need to add ':Q' to indicate that the density has quantitative values, just as when we specified the data types in module 2.\nWe could also have calculated the sum of the bell-shaped bins as a separate step outside Altair and added it as a new column in our pandas dataframe, but it is more convenient to do both the steps in Altair.\nWe can see that this plot looks similar to the histogram we created in the last slide deck, and we would reach similar conclusions when studying it. Most movies peak around 100 min, but there is great variation all the way from ~25 to ~215 min.\nIn contrast to a histogram, the y-axis of a density plot is not very informative.\nThe definition of a density entails that the area under the curve should sum up to 1, which represents all the observations.\nTherefore the y-axis is simply adjusted based on the values on the x-axis, so that the area equals 1.\nInstead of looking at the y-axis, focus on the shape of the area and the x-axis, those are the more informative in a density plot."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#creating-a-grouped-density-plot-requires-an-explicit-density-grouping",
    "href": "modules/module3/slides/module3_03.html#creating-a-grouped-density-plot-requires-an-explicit-density-grouping",
    "title": "Using density plots to visualize distributions",
    "section": "Creating a grouped density plot requires an explicit density grouping",
    "text": "Creating a grouped density plot requires an explicit density grouping\n\n(alt.Chart(movies).transform_density(\n    'runtime',\n    groupby=['genre'],\n    as_=['runtime', 'density'])\n .mark_area().encode(\n     x='runtime',\n     y=alt.Y('density:Q').stack(False),\n     color='genre'))\n\n\n\n\n\n\n\n\nIf we want to split and colour the densities by a categorical dataframe column, we need to explicitly specify a dataframe column to the groupby parameter when calculating the density.\nSetting this parameter to the same column we use for the colour encoding will compute one density for each of the differently coloured areas. We also need to indicate that we don’t want the densities to be stacked on top of each other by setting stack to False in the Y-channel encoding.\nThis plot effectively conveys the differences between runtimes of movies from different genres.\nNotably, we can see that the peaks are different locations on the x-axis for the three genres. This indicates that the most common movie lengths are different between genres.\nThis difference appears to be around 20 min, but it does not necessarily tell us where the mean and median would fall, since that also depends on where the rest of the values are distributed.\nWe can see that the Animation genre has the highest peak, which means that the values are the most densely packed around the peak in this distribution compared to the others. But we can only see the range of the History distribution, since this is plotted on top of the others.\nLet’s make the areas less opaque so that we can see the range of all the distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#slightly-transparent-areas-reveal-more-details",
    "href": "modules/module3/slides/module3_03.html#slightly-transparent-areas-reveal-more-details",
    "title": "Using density plots to visualize distributions",
    "section": "Slightly transparent areas reveal more details",
    "text": "Slightly transparent areas reveal more details\n\n(alt.Chart(movies).transform_density(\n     'runtime',\n     groupby=['genre'],\n     as_=['runtime', 'density'])\n .mark_area(opacity=0.5).encode(\n     x='runtime',\n     y=alt.Y('density:Q').stack(False),\n     color='genre'))\n\n\n\n\n\n\n\n\nThe density areas don’t suffer the same issues as the histograms when made transparent. The continuous solid shape for each group is easier to follow even when it is semi-transparent and overlaps with the other areas.\nThe transparency gives us the advantage of knowing that there is not small density area completely hiding behind a bigger one and we can also see the range of all the distributions.\nFor example, we can tell that there are some Fantasy movies that are almost as long as the longest History movies, whereas there is not a single Animation movie that is longer than 120 minutes.\nHowever, if we had more distributions to compare, a semi-transparent density plot would become hard to decipher. In such cases, we could either filter the data to plot fewer distributions or facet them vertically as we saw with the histograms previously."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#density-plots-of-small-datasets-can-be-misleading",
    "href": "modules/module3/slides/module3_03.html#density-plots-of-small-datasets-can-be-misleading",
    "title": "Using density plots to visualize distributions",
    "section": "Density plots of small datasets can be misleading",
    "text": "Density plots of small datasets can be misleading\n\ndensity = (alt.Chart(movies[:10]).transform_density(\n    'runtime',\n    as_=['runtime', 'density'])\n .mark_area().encode(\n    x='runtime',\n    y='density:Q'))\ndensity\n\n\n\n\n\n\n\n\nSince density plots don’t show the number of observations, they can be misleading for small data sets where they will still appear smooth as if there were many data points to back up that smoothness.\nWhen looking at this plot, are you be able to tell that the density is made up of just ten observations?\nIn Altair, a hint that a density is made up of few observations is the sharp borders of the areas. This happens because the default behaviour in Altair is to end the density where the data ends, which often creates sharp borders for low numbers of observations.\nMany other plotting packages instead, extend the density beyond the observations in the dataset to make it appear smoother and it is therefore paramount to always ask how many observations there are before interpreting a density plot."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#densities-can-be-combined-with-plotting-individual-data-points",
    "href": "modules/module3/slides/module3_03.html#densities-can-be-combined-with-plotting-individual-data-points",
    "title": "Using density plots to visualize distributions",
    "section": "Densities can be combined with plotting individual data points",
    "text": "Densities can be combined with plotting individual data points\n\n(density.mark_area(opacity=0.7) +\n alt.Chart(movies[:10]).mark_tick(color='black', yOffset=140).encode(x='runtime'))\n\n\n\n\n\n\n\n\nSince it is so hard to tell how many observations are in a density plot, you should always check this separately. Strategies to do this include looking at the number of rows in the dataframe, creating a separate histogram, or layering the density plot together with a plot of the individual data points.\nHere we are using mark_tick to plot every single observation along the x-axis and making the density area transparent so that we can see the tick marks. By default, the ticks would be in the middle of the plot, so we are using yOffset to align them with the x-axis.\nWith as few as 10 observations, we actually don’t need the density at all and could instead just have shown the individual observations or created a histogram."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#scaling-densities-by-the-numbers-of-observations-is-possible-but-not-very-effective",
    "href": "modules/module3/slides/module3_03.html#scaling-densities-by-the-numbers-of-observations-is-possible-but-not-very-effective",
    "title": "Using density plots to visualize distributions",
    "section": "Scaling densities by the numbers of observations is possible but not very effective",
    "text": "Scaling densities by the numbers of observations is possible but not very effective\n\n(alt.Chart(movies[:10]).transform_density(\n    'runtime',\n    as_=['runtime', 'density'],\n    counts=True)\n .mark_area().encode(\n    x='runtime',\n    y='density:Q'))\n\n\n\n\n\n\n\n\nIn Altair, we could actually scale the density plots by the count of observations by specifying counts=True inside the transform_density.\nHowever, since a density is a continuous area counts are not as easy to interpret as in a histogram where there is an exact count for each discrete bin.\nAs we can see in this example, the y-axis has been scaled by 10, but it is still hard to interpret, are there 0.08 movies with a runtime of 110 min?\nAlthough densities can be scaled by count, it is often confusing, which means we must be careful when interpreting them and always check how many observations are in the data by plotting the individual data points!"
  },
  {
    "objectID": "modules/module3/slides/module3_end.html#module-learning-outcomes",
    "href": "modules/module3/slides/module3_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 3",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nSelect an appropriate distribution plot for the data.\nCreate density plots to compare a few distributions.\nCreate boxplots to compare many distributions.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module4/module4-01-visualizing_multidimensional_distributions.html",
    "href": "modules/module4/module4-01-visualizing_multidimensional_distributions.html",
    "title": "1. Visualizing Multidimensional Distributions",
    "section": "",
    "text": "1. Visualizing Multidimensional Distributions\n\nVideoSlides",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "1. Visualizing Multidimensional Distributions"
    ]
  },
  {
    "objectID": "modules/module4/module4-03-visualizing_categorical_distributions.html",
    "href": "modules/module4/module4-03-visualizing_categorical_distributions.html",
    "title": "2. Visualizing Categorical Distributions",
    "section": "",
    "text": "2. Visualizing Categorical Distributions\n\nVideoSlides",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "2. Visualizing Categorical Distributions"
    ]
  },
  {
    "objectID": "modules/module4/module4-05-exploratory_data_analysis.html",
    "href": "modules/module4/module4-05-exploratory_data_analysis.html",
    "title": "3. Exploratory Data Analysis",
    "section": "",
    "text": "3. Exploratory Data Analysis\n\nVideoSlides",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "3. Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "modules/module4/module4-07-eda_on_categorical_data.html",
    "href": "modules/module4/module4-07-eda_on_categorical_data.html",
    "title": "4. Exploratory Data Analysis on Categorical Data",
    "section": "",
    "text": "4. Exploratory Data Analysis on Categorical Data\n\nVideoSlides",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "4. Exploratory Data Analysis on Categorical Data"
    ]
  },
  {
    "objectID": "modules/module4/module4-09-what_did_we_just_learn.html",
    "href": "modules/module4/module4-09-what_did_we_just_learn.html",
    "title": "5. What did we just learn?",
    "section": "",
    "text": "5. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M4. Distributions and EDA**",
      "5. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#reading-in-the-data",
    "href": "modules/module4/slides/module4_01.html#reading-in-the-data",
    "title": "Visualizing Multidimensional Distributions",
    "section": "Reading in the data",
    "text": "Reading in the data\n\nimport altair as alt\nimport pandas as pd\n\nmovies_extended = pd.read_csv(\"data/movies-extended.csv\")\nmovies_extended\n\n\n\n\n\n\n\n\nTitle\nUS Gross\nWorldwide Gross\nUS DVD Sales\n...\nDirector\nRotten Tomatoes Rating\nIMDB Rating\nIMDB Votes\n\n\n\n\n0\nBoynton Beach Club\n3127472.0\n3127472.0\nNaN\n...\nNaN\nNaN\nNaN\nNaN\n\n\n1\nBroken Arrow\n70645997.0\n148345997.0\nNaN\n...\nJohn Woo\n55.0\n5.8\n33584.0\n\n\n2\nBrazil\n9929135.0\n9929135.0\nNaN\n...\nTerry Gilliam\n98.0\n8.0\n76635.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1187\nZodiac\n33080084.0\n83080084.0\n20983030.0\n...\nDavid Fincher\n89.0\nNaN\nNaN\n\n\n1188\nThe Legend of Zorro\n45575336.0\n141475336.0\nNaN\n...\nMartin Campbell\n26.0\n5.7\n21161.0\n\n\n1189\nThe Mask of Zorro\n93828745.0\n233700000.0\nNaN\n...\nMartin Campbell\n82.0\n6.7\n4789.0\n\n\n\n\n1190 rows × 16 columns\n\n\n\n\nWe’re continuing to work with the movies data set. Here we have done some additional preprocessing steps to the data and saved it to disk beforehand so that we can load it indirectly on this slide.\nThis is largely the same dataset as before, but we filtered out some additional NaNs and a few categories that contained problematic values."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#scatter-plots-are-effective-visualizations-for-2d-distributions",
    "href": "modules/module4/slides/module4_01.html#scatter-plots-are-effective-visualizations-for-2d-distributions",
    "title": "Visualizing Multidimensional Distributions",
    "section": "Scatter plots are effective visualizations for 2D distributions",
    "text": "Scatter plots are effective visualizations for 2D distributions\n\nalt.Chart(movies_extended).mark_point().encode(\n    alt.X('IMDB Rating'),\n    alt.Y('Rotten Tomatoes Rating'))\n\n\n\n\n\n\n\n\nIn the last module, we saw how to visualize the distribution of a single numerical dataframe column. What if we instead want to compare the distributions of two columns with each other?\nA question we could answer with this type of comparison is “Are movies rated similarly on different online platforms?”\nIn this slide, we are showing the movie rating from both https://www.imdb.com/ and https://www.rottentomatoes.com. These are both websites where people can rate movies.\nThere is clearly a pattern in this scatter plot, but how can we interpret it?\nThe first thing that stands out is the overall pattern of the points which is resembles a diagonal line with some variation around it.\nWhen the points in a scatter plot lines up in a pattern that resembles a diagonal line as in this chart, it means that there is a relationship between the two dataframe columns we have visualized.\nIn other words, we can clearly see that as one of the ratings goes up, so does the other and there are only a few exceptions to this.\nThe relationship in this plot would be considered strong because we can see clearly the diagonal trend that the points follow."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#non-linear-relationships-follow-a-predictable-pattern-that-is-not-a-straight-line",
    "href": "modules/module4/slides/module4_01.html#non-linear-relationships-follow-a-predictable-pattern-that-is-not-a-straight-line",
    "title": "Visualizing Multidimensional Distributions",
    "section": "Non-linear relationships follow a predictable pattern that is not a straight line",
    "text": "Non-linear relationships follow a predictable pattern that is not a straight line\n\nalt.Chart(movies_extended).mark_point().encode(\n    alt.X('IMDB Rating'),\n    alt.Y('IMDB Votes'))\n\n\n\n\n\n\n\n\nThe relationship in the previous slide followed a straight line and we would refer to it as a “linear” relationship.\nHowever, not all relationships are linear. In this slide, we can see that there appears to be a clear pattern between the rating and the number of votes a movie receives but it follows a bent curve rather than a straight line.\nThis still appears to be a pretty strong relationship, but it is a bit hard to tell because of the many points in a big chunk at the bottom.\nWhen a relationship is not following a straight line, we say that it is non-linear. There are many types of non-linear relationships, but we will not delve into them in this course."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#the-stronger-the-relationship-the-closer-together-the-points-are",
    "href": "modules/module4/slides/module4_01.html#the-stronger-the-relationship-the-closer-together-the-points-are",
    "title": "Visualizing Multidimensional Distributions",
    "section": "The stronger the relationship, the closer together the points are",
    "text": "The stronger the relationship, the closer together the points are\n\nalt.Chart(movies_extended).mark_point().encode(\n    alt.X('IMDB Rating'),\n    alt.Y('IMDB Rating'))\n\n\n\n\n\n\n\n\nIf the relationship between two columns was really strong, the points would be very close together and there would be little variation.\nIn this plot, we have visualized the same column for both the X and Y axis, which means the relationship is perfect.\nWe would never expect to see this strong of a relationship in real data, but it is good to know what are extreme cases.\nOn that topic, let’s see what a plot looks like when there appears to be no relationship between the plotted dataframe columns."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#when-there-is-no-relationship-there-is-also-no-pattern-in-the-plotted-points",
    "href": "modules/module4/slides/module4_01.html#when-there-is-no-relationship-there-is-also-no-pattern-in-the-plotted-points",
    "title": "Visualizing Multidimensional Distributions",
    "section": "When there is no relationship, there is also no pattern in the plotted points",
    "text": "When there is no relationship, there is also no pattern in the plotted points\n\nalt.Chart(movies_extended.reset_index()).mark_point().encode(\n    alt.X('IMDB Rating'),\n    alt.Y('index'))\n\n\n\n\n\n\n\n\nHere, we have plotted the IMDB Rating against the row number in the dataframe (remember that when you reset the index of a dataframe a new column is created with the previous index/row number).\nUnless the data had been ordered in a specific manner previously, we would expect there to be no relationship between these two dataframe columns and that is exactly what we see in this plot.\nThere is no distinct pattern here, just a cloud of points. In other words, by knowing the value on the x-axis, there is no way we could know the value on the y-axis.\nFor example, a movie with an IMDB Rating of 4-5 could have an index number anywhere from 0 to 1200.\nLet’s contrast this with the first visualization we created."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#a-strong-relationship-means-that-the-value-on-one-axis-gives-information-about-the-value-on-the-other-axis",
    "href": "modules/module4/slides/module4_01.html#a-strong-relationship-means-that-the-value-on-one-axis-gives-information-about-the-value-on-the-other-axis",
    "title": "Visualizing Multidimensional Distributions",
    "section": "A strong relationship means that the value on one axis gives information about the value on the other axis",
    "text": "A strong relationship means that the value on one axis gives information about the value on the other axis\n\nalt.Chart(movies_extended).mark_point().encode(\n    alt.X('IMDB Rating'),\n    alt.Y('Rotten Tomatoes Rating'))\n\n\n\n\n\n\n\n\nHere, knowing the IMDB Rating for a movie is informative for knowing the Rotten Tomatoes Rating.\nFor example, if we know that the IMDB Rating is 4-5, we can be quite sure that the Rotten Tomatoes Rating will not exceed 50, and there are just a few exceptions to this.\nHowever, we must be careful not to claim that there is a causal relationship between these two dataframe columns. All we know is that they have a strong relationship, we don’t know the details of why.\nThere are formal ways of measure how strong these relationships are, but they often come with some caveats and it is generally more informative to look at the visualizations to understand how the two columns are related to each other.\nRemember what we learned in module 1, people are generally better at detecting visual patterns than interpreting individual numbers summarizing these relationships."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#saturated-scatter-plots-are-difficult-to-interpret",
    "href": "modules/module4/slides/module4_01.html#saturated-scatter-plots-are-difficult-to-interpret",
    "title": "Visualizing Multidimensional Distributions",
    "section": "Saturated scatter plots are difficult to interpret",
    "text": "Saturated scatter plots are difficult to interpret\n\nalt.Chart(movies_extended).mark_point().encode(\n    alt.X('Production Budget'),\n    alt.Y('Worldwide Gross'))\n\n\n\n\n\n\n\n\nAs we have seen, scatter plots are generally effective for visualizing two-dimensional relationships. However, as with all plots, they have their shortcomings.\nMost notably, when the bulk of the points become concentrated in a small region of the chart, 2D scatter plots become saturated in the same way as the 1D scatter and rug plots we saw in the previous module.\nIn this slide we’re trying to answer the question: “Do high grossing movies tend to have a high production budget?”\nIn the scatter plot you can see that it is impossible to tell if there are more points close to 80 million or 0 on the x-axis, and likewise, 200 million or 0 on the y-axis.\nSo, although we can discern a trend for the points outside the saturated area we do not know how the data is spread out inside the blue blob.\nTo solve this issue, we can create a two-dimensional histogram in the form of a heatmap."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#a-heatmap-can-visualize-the-relationship-between-two-distributions-without-saturation",
    "href": "modules/module4/slides/module4_01.html#a-heatmap-can-visualize-the-relationship-between-two-distributions-without-saturation",
    "title": "Visualizing Multidimensional Distributions",
    "section": "A heatmap can visualize the relationship between two distributions without saturation",
    "text": "A heatmap can visualize the relationship between two distributions without saturation\n\nalt.Chart(movies_extended).mark_rect().encode(\n    alt.X('Production Budget', bin=alt.Bin(maxbins=60)),\n    alt.Y('Worldwide Gross', bin=alt.Bin(maxbins=60)),\n    alt.Color('count()'))\n\n\n\n\n\n\n\n\nWhat’s involved in creating a two-dimensional histogram?\nThis is similar to when we several heatmaps to compare multiple 1D distributions, but here we need to bin both the x and y-axis.\nThese bins will look like a grid or mesh overlayed on the image, similar to the pattern of the faint grey gridlines in the previous slide.\nWithin each rectangle of this grid, we will count the number of observations and represent the count value with a colour.\nThe result of these operations is the heatmap shown in this slide, which enables us to see a level of detail we could not perceive in the scatter plot.\nHere it is clear that there are many fewer movies with a production budget of 80 million compared to the area close to 0, and most movies seem to be around 10-15 million. Likewise, the grossing of most movies is around 0-50 million, not 200 million."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#a-2d-density-plot-can-also-visualize-the-relationship-between-two-distributions-without-saturation",
    "href": "modules/module4/slides/module4_01.html#a-2d-density-plot-can-also-visualize-the-relationship-between-two-distributions-without-saturation",
    "title": "Visualizing Multidimensional Distributions",
    "section": "A 2D density plot can also visualize the relationship between two distributions without saturation",
    "text": "A 2D density plot can also visualize the relationship between two distributions without saturation\n\n\nIn addition to representing 2D distributions as heatmaps, we can also represent them as density plots.\nAltair cannot yet make these plots, so here we’re showing an example created from another plotting library called seaborn, so that you can get a sense of what this visualization would look like for our data.\nIn a 2D density plot, each bin is now two dimensional and look like a bell in a clocktower or the top of a circus tent, rather than a bell-shaped one-dimensional curve.\nThis type of visualization gives us similar information as the heatmap in the previous slide and the advantages and disadvantages are similar to those between one-dimensional histograms and density plots.\nAs with 1D density plots, the values of the density themselves are not helpful, but we have included them here in the colour bar as an example."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#glancing-at-the-values-in-the-dataframe-is-a-good-first-step-to-get-familiar-with-a-new-dataset",
    "href": "modules/module4/slides/module4_05.html#glancing-at-the-values-in-the-dataframe-is-a-good-first-step-to-get-familiar-with-a-new-dataset",
    "title": "Exploratory Data Analysis",
    "section": "Glancing at the values in the dataframe is a good first step to get familiar with a new dataset",
    "text": "Glancing at the values in the dataframe is a good first step to get familiar with a new dataset\n\nimport pandas as pd\n\nmovies_extended = pd.read_csv(\"data/movies-extended-eda.csv\")\nmovies_extended\n\n\n\n\n\n\n\n\nMajor Genre\nMPAA Rating\nRunning Time min\nIMDB Rating\nIMDB Votes\n\n\n\n\n0\nAction\nR\n108.0\n5.8\n33584.0\n\n\n1\nComedy\nPG-13\n95.0\n5.8\n51109.0\n\n\n2\nAction\nPG-13\n106.0\n5.2\n15817.0\n\n\n...\n...\n...\n...\n...\n...\n\n\n998\nComedy\nR\n101.0\n7.0\n55687.0\n\n\n999\nAdventure\nPG\n129.0\n5.7\n21161.0\n\n\n1000\nAdventure\nPG-13\n136.0\n6.7\n4789.0\n\n\n\n\n1001 rows × 5 columns\n\n\n\n\nIn this slide deck, you will see how EDA allows us to identify interesting relationships that we want to study closer, suggest a hypothesis to test, assess assumptions of the data, and inform further data collection.\nThe very first thing we do in EDA, is often to glance at the dataframe by printing out a few values like in this slide.\nThis gives us an idea about which columns are numerical and categorical as well as the size of the dataframe.\nYou can also see that we don’t have the exact same dataframe columns as in the previous slide decks. We have left out a few since we will be including all dataframe columns in the same chart and want to make sure it fits on the slide."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#viewing-the-column-data-types-and-missing-values-protects-us-from-errors-later-on",
    "href": "modules/module4/slides/module4_05.html#viewing-the-column-data-types-and-missing-values-protects-us-from-errors-later-on",
    "title": "Exploratory Data Analysis",
    "section": "Viewing the column data types and missing values protects us from errors later on",
    "text": "Viewing the column data types and missing values protects us from errors later on\n\nmovies_extended.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1001 entries, 0 to 1000\nData columns (total 5 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   Major Genre       996 non-null    object \n 1   MPAA Rating       994 non-null    object \n 2   Running Time min  1001 non-null   float64\n 3   IMDB Rating       945 non-null    float64\n 4   IMDB Votes        945 non-null    float64\ndtypes: float64(3), object(2)\nmemory usage: 39.2+ KB\n\n\n\nNext, it is a good idea to check the type of data in each column and how many missing values there are.\nFrom looking at the values in the table, we already have an idea of what the column data types are, and this matches the output from the info method. The columns with categorical data are referred to as “objects” and the numerical columns are read in as decimal numbers or “floats”.\nAlthough it seems unnecessary in this case, it is good practice to perform this check since there are rare cases where pandas might interpret a column differently from what we think.\nA common example of this is when people use a text string to encode missing values, for example “missing”, “null”, or “nan” instead of leaving the value blank which is best practice. This can make pandas treat a column as an object, which we might not detect when printing only the first few rows of the dataframe.\nThis can also happen with dates, which might be parsed as numbers unless you specify parse_dates=['column_name'] to read_csv.\nSpeaking of missing values, this is the next thing to check for. Columns that are missing some values might need to be imputed or dropped for machine learning tasks, and when we perform statistical tests, we need to know how many observations we have with data.\nImportantly, patterns in missing values can also give hints to which columns have strong relationships between their values and indicate if that something went wrong in the data collection process, which we should investigate before performing our analysis.\nHere, it looks like there are some NaNs in many of the columns, and the IMDB ratings and votes seems to have the most: about 60 rows are missing a value.\nThe IMDB rating and the number of votes have the exact same amount of missing values, and it makes sense that movies without votes can’t have a rating. But if we didn’t know how these columns were related, how could we check?"
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#visualizing-missing-values-helps-us-identify-potential-issues-with-the-data",
    "href": "modules/module4/slides/module4_05.html#visualizing-missing-values-helps-us-identify-potential-issues-with-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Visualizing missing values helps us identify potential issues with the data",
    "text": "Visualizing missing values helps us identify potential issues with the data\n\nimport altair as alt\n\nalt.data_transformers.disable_max_rows();\n\nmovies_nans = movies_extended.isna().reset_index().melt(id_vars='index', var_name='column', value_name='NaN')\nmovies_nans\n\n\n\n\n\n\n\n\nindex\ncolumn\nNaN\n\n\n\n\n0\n0\nMajor Genre\nFalse\n\n\n1\n1\nMajor Genre\nFalse\n\n\n2\n2\nMajor Genre\nFalse\n\n\n...\n...\n...\n...\n\n\n5002\n998\nIMDB Votes\nFalse\n\n\n5003\n999\nIMDB Votes\nFalse\n\n\n5004\n1000\nIMDB Votes\nFalse\n\n\n\n\n5005 rows × 3 columns\n\n\n\n\nTo create a visualization of missing values for all columns, we must first reshape the data into a format where the column names become a single categorical column in the dataframe, which we can use on the y-axis in Altair. The index column will be used to give each column the same numbers on the x-axis.\nSince this reshape operation makes our dataframe longer than 5000 rows, we need to disable the max rows warning in Altair, which otherwise would prevent us from making this chart.\nWhenever we do this, we should also check the final size of our visualization if we save it to a file or in the notebook to ensure that it is not too large for what we can currently handle."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#visualizing-missing-values-helps-us-identify-potential-issues-with-the-data-1",
    "href": "modules/module4/slides/module4_05.html#visualizing-missing-values-helps-us-identify-potential-issues-with-the-data-1",
    "title": "Exploratory Data Analysis",
    "section": "Visualizing missing values helps us identify potential issues with the data",
    "text": "Visualizing missing values helps us identify potential issues with the data\n\nalt.Chart(movies_nans).mark_rect(height=17).encode(\n    x=alt.X('index:O', axis=None),\n    y='column',\n    color='NaN',\n    stroke='NaN').properties(width=800)\n\n\n\n\n\n\n\n\nBy visualizing the missing values for each column next to each other, we can quickly see if there are similar patterns between columns.\nA common cause for such correlations, could for example be due to the same day or hour missing for several columns when working with time-series data.\nThis information could help us decide whether we might want to remove an entire row from our analysis (when most column values for that observation are missing or look suspect) or if we should impute a missing value (if most column values for that observation look OK).\nHere we can confirm that the missing values from IMDB ratings and votes are indeed missing for the same rows in the data frame, since the orange lines show up in the same positions throughout the index, which suggests that these columns are linked in the data collection process.\nThe reason we specified the stroke encoding in this plot is to colour the outline of each rectangle, which is white by default.\nBefore continuing with our analysis we could consider dropping the NaN values, but it might also be a good idea to create all our visualizations both with and without them, to see if this impacts our conclusions.\nUltimately, domain expertise should also be involved in the decision to drop the NaN-values and understanding why they are present is important before deciding whether to get rid of them."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#a-statistical-summary-is-useful-to-complement-visualizations",
    "href": "modules/module4/slides/module4_05.html#a-statistical-summary-is-useful-to-complement-visualizations",
    "title": "Exploratory Data Analysis",
    "section": "A statistical summary is useful to complement visualizations",
    "text": "A statistical summary is useful to complement visualizations\n\nmovies_extended.describe()\n\n\n\n\n\n\n\n\nRunning Time min\nIMDB Rating\nIMDB Votes\n\n\n\n\ncount\n1001.000000\n945.000000\n945.000000\n\n\nmean\n110.312687\n6.279577\n43514.432804\n\n\nstd\n20.701090\n1.178046\n52241.047929\n\n\n...\n...\n...\n...\n\n\n50%\n107.000000\n6.300000\n26303.000000\n\n\n75%\n122.000000\n7.100000\n55248.000000\n\n\nmax\n222.000000\n8.900000\n465000.000000\n\n\n\n\n8 rows × 3 columns\n\n\n\n\nNow that we are aware of what data types we are working with and how the missing values are distributed, let’s start visualizing the data that is not missing!\nVisualization is a critical component throughout EDA as it is key in communicating information about the data to us.\nWe will start by visualizing the distributions of numerical data, in order to familiarize ourselves with how the values are spread out for each numerical column.\nBefore doing so let’s print out the summary statistics for these numerical columns.\nWhile it is difficult to make statements about how the data is distributed by only looking at these numbers, they are useful to have available for cross-reference when visualizing the data and also give us an idea of what to expect when creating our visualization.\nAfter visualizing the data, we can also go back and look at these numbers to ensure that they align and that we don’t have a typo somewhere causing an error."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#visualizing-the-distributions-of-all-numerical-columns-helps-us-understand-the-data",
    "href": "modules/module4/slides/module4_05.html#visualizing-the-distributions-of-all-numerical-columns-helps-us-understand-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Visualizing the distributions of all numerical columns helps us understand the data",
    "text": "Visualizing the distributions of all numerical columns helps us understand the data\n\nnumerical_columns = movies_extended.select_dtypes('number').columns.tolist()\n(alt.Chart(movies_extended)\n .mark_bar().encode(\n     alt.X(alt.repeat(), type='quantitative', bin=alt.Bin(maxbins=25)),\n     y='count()')\n .properties(width=250, height=150)\n .repeat(numerical_columns))\n\n\n\n\n\n\n\n\nSpecific to EDA visualizations is that we often want to create quick overview charts similar to the table we just printed. We worry less about the details such as axis labels and titles, since we are trying to understand the data ourselves through an interactive explorative process, rather than making the figures look appealing in a presentation (we will see how to do that later).\nTo create these overview visualizations, it is helpful to make the same type of plot for several dataframe columns and lay them out as subplots within a figure.\nPreviously, we have made subplots via faceting, which uses a categorical column to filter subsets of the data in each subplot, and all subplots have the same columns mapped to the X and Y axes.\nHere, we will see how we can create figures where the X and Y axes are different between subplots, and all the data is present in each one of them.\nTo achieve this in Altair, we say that we repeat the same Chart setup for multiple columns.\nInstead of typing each chart out manually, we specify which columns we want to use via the .repeat method of a Chart object, and indicate with alt.repeat() where these repeated columns should be used.\nSince we are not using the dataframe column directly, we also need to specify which type the repeated columns are.\nA great first step is to visualize the distribution of each of the quantitative dataframe columns to get an overview of how our data looks and examine it to see if there are any weird things going on (e.g. values that are way too small or large, values all bunched up in one place that could indicate measurement errors, etc). To do this, we here create a histogram chart and repeat it for each of the numerical columns.\nThis overview tells us that most movies have a runtime of around 90-130 min, but there are some that are shorter and some that are longer.\nMost movies have less than 80,000 votes, but there are some that have a really high number.\nThe distribution for the IMDB ratings is centred around 6, with few extreme values on either end and no notable shift in either direction.\nOur EDA is already helping us finding interesting aspects of the data!"
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#repeating-columns-of-both-x-and-y-lets-us-effectively-explore-pairwise-relationships-between-columns",
    "href": "modules/module4/slides/module4_05.html#repeating-columns-of-both-x-and-y-lets-us-effectively-explore-pairwise-relationships-between-columns",
    "title": "Exploratory Data Analysis",
    "section": "Repeating columns of both X and Y lets us effectively explore pairwise relationships between columns",
    "text": "Repeating columns of both X and Y lets us effectively explore pairwise relationships between columns\n\n# Scroll down on the plot to see the last row\n(alt.Chart(movies_extended)\n .mark_point(size=10).encode(\n     alt.X(alt.repeat('column'), type='quantitative'),\n     alt.Y(alt.repeat('row'), type='quantitative'))\n .properties(width=120, height=120)\n .repeat(column=numerical_columns, row=numerical_columns))\n\n\n\n\n\n\n\n\nEquipped with the information about each column’s data distribution, we move on to exploring the pairwise relationships between columns. This type of visualization will help us understand which columns are related to each other.\nFor example, we already saw earlier in this module that the ratings on IMDB and Rotten Tomatoes have a strong relationship when we create a scatter plot of these two dataframe columns. Here, we can ask that same question of all columns in the dataset.\nThis is helpful both for our general knowledge about the data and if we have a specific goal in mind, maybe we would want to predict the movie ratings, but we are not sure which other dataframe columns would be useful to have in the prediction model?\nInstead of looking at just one relationship at a time, we visualize all of them to be able to answer the same question for all pairs of columns.\nTo create this visualization, we need to use alt.repeat on both the axes, instead of just one as for the histograms.\nIn the last slide, we used alt.repeat without arguments, which means that we are repeating over all the columns. Here we specifically set the rows and columns attributes to ensure that our repeated chart will include all the pairwise combinations of the dataframe columns.\nIn the resulting visualization, the diagonal compares the column against itself, so this is not very interesting. The same pairwise comparisons are also repeated above and below the diagonal, so we will focus our attention only on the six plots below the diagonal.\nThis type of visualization is often referred to as a scatterplot matrix or pairplot.\nUnfortunately, these plots are saturated, so although we can see that there might be some correlative relationships, we should remake this plot as a 2D histogram heatmap, using the techniques we learned in the previous slide deck."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#heatmaps-can-be-used-for-repeated-charts-to-avoid-saturation",
    "href": "modules/module4/slides/module4_05.html#heatmaps-can-be-used-for-repeated-charts-to-avoid-saturation",
    "title": "Exploratory Data Analysis",
    "section": "Heatmaps can be used for repeated charts to avoid saturation",
    "text": "Heatmaps can be used for repeated charts to avoid saturation\n\n# Scroll down on the plot to see the last row\n(alt.Chart(movies_extended)\n .mark_rect().encode(\n     alt.X(alt.repeat('column'), type='quantitative', bin=alt.Bin(maxbins=30)),\n     alt.Y(alt.repeat('row'), type='quantitative', bin=alt.Bin(maxbins=30)),\n     alt.Color('count()', title=None))\n .properties(width=110, height=110)\n .repeat(column=numerical_columns, row=numerical_columns)).resolve_scale(color='independent')\n\n\n\n\n\n\n\n\nAs we learned earlier, we can create a heatmap to avoid the issues with saturation in the scatter plot.\nThanks to our repeated charts, we can quickly assess if there are strong relationships between any of the column pairs.\nIn addition to the relationship between the two ratings, the IMDB Rating and the Running Time appears to be related and the number of votes also seems to be related to the IMDB rating.\nPairs of columns that appear correlated in this visualization are good candidates to explore further e.g. with formal statistical testing to assess the strength of these correlations or to test in our machine learning models as predictors for another column\nWe should also use our domain expertise to understand why these columns might correlate and the nature of their relationship (for example, if one directly causes the other one to change values the relationship would be directly causative).\nHowever, as interesting to explore later could be columns that we had expected to be correlated, but appears not to be in this plot.\nNote that we set the colour title to None to save some space between the subplots, and since it is the same for each colour bar (“Count of records”).\nTo get more resolution of the counts for each column pair, we resolve the colour scale to be set individually for each subplot. Otherwise the high counts in the few bins of diagonals would drown out the counts in the other plots which would have the same colour almost everywhere."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#repeat-also-allows-us-to-explore-the-relationship-between-categorical-and-numerical-columns",
    "href": "modules/module4/slides/module4_05.html#repeat-also-allows-us-to-explore-the-relationship-between-categorical-and-numerical-columns",
    "title": "Exploratory Data Analysis",
    "section": "Repeat also allows us to explore the relationship between categorical and numerical columns",
    "text": "Repeat also allows us to explore the relationship between categorical and numerical columns\n\ncategorical_columns = movies_extended.select_dtypes('object').columns.tolist()\n(alt.Chart(movies_extended)\n .mark_boxplot().encode(\n     alt.X(alt.repeat('column'), type='quantitative'),\n     alt.Y(alt.repeat('row'), type='nominal', title=''))\n .properties(width=150)\n .repeat(column=numerical_columns, row=categorical_columns))\n\n\n\n\n\n\n\n\nIn addition to repeating charts with numerical data only, we can use the same principles to explore the relationships between the categorical and the numerical columns in our dataset.\nHere, we spread out the three categorical dataframe columns along with the columns of the plot to be able to answer questions regarding how the different categories compare, e.g. how do different genres impact movie runtime?\nThe categories labelled “null” are the ones which are missing a value in that categorical column in the dataframe, but still has values in the numerical column that is plotted on the x-axis.\nWe have also removed the “Title” item from the list of categorical columns, as well as dropped it from the dataframe, since we would have created a giant plot if thousands of titles were included.\nSo what is the answer to our question, how does genres impact movie runtime? It seems like Musicals, and Dramas have the longest run times. Whereas for Ratings, PG-13 and R-rated movies appear to run the longest.\nAs we have discussed before, it is often easier to compare plots where the values are sorted.\nFor a single boxplot, we learned previously that we can pass a list of the categories in the order we want to plot them.\nIn this case, we have different columns on the y-axis, so we would need to pass a list of all categories in all these three columns. We could use a loop with pandas to create this like so:\nrunning_time_order = []\nfor groupby_col in ['Major Genre', 'MPAA Rating']:\n    running_time_order.extend(\n        movies_extended\n        .groupby(groupby_col)\n        .median()\n        ['Running Time min']\n        .sort_values()\n        .index\n        .to_list())"
  },
  {
    "objectID": "modules/module4/slides/module4_end.html#module-learning-outcomes",
    "href": "modules/module4/slides/module4_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 4",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCreate heatmaps to visualize 2D distributions\nVisualize correlations and counts of categorical dataframe columns.\nUse repeated plot grids to investigate multiple data frame columns in the same plot.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module5/module5-01-effective_figures_for_communication.html",
    "href": "modules/module5/module5-01-effective_figures_for_communication.html",
    "title": "1. Effective Figures for Communication",
    "section": "",
    "text": "1. Effective Figures for Communication\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "1. Effective Figures for Communication"
    ]
  },
  {
    "objectID": "modules/module5/module5-03-descriptive_titles_and_labels.html",
    "href": "modules/module5/module5-03-descriptive_titles_and_labels.html",
    "title": "2. Descriptive Titles and Labels",
    "section": "",
    "text": "2. Descriptive Titles and Labels\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "2. Descriptive Titles and Labels"
    ]
  },
  {
    "objectID": "modules/module5/module5-05-defining_and_transforming_axis_ranges.html",
    "href": "modules/module5/module5-05-defining_and_transforming_axis_ranges.html",
    "title": "3. Defining and Transforming Axis Ranges",
    "section": "",
    "text": "3. Defining and Transforming Axis Ranges\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "3. Defining and Transforming Axis Ranges"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-effective_use_of_colour_categorical_data.html",
    "href": "modules/module5/module5-07-effective_use_of_colour_categorical_data.html",
    "title": "4. Effective Use of Colour for Categorical Data",
    "section": "",
    "text": "4. Effective Use of Colour for Categorical Data\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "4. Effective Use of Colour for Categorical Data"
    ]
  },
  {
    "objectID": "modules/module5/module5-09-effective_use_of_colour_quantitative_data.html",
    "href": "modules/module5/module5-09-effective_use_of_colour_quantitative_data.html",
    "title": "5. Effective Use of Colour for Quantitative Data",
    "section": "",
    "text": "5. Effective Use of Colour for Quantitative Data\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "5. Effective Use of Colour for Quantitative Data"
    ]
  },
  {
    "objectID": "modules/module5/module5-11-annotating_with_text_and_colour.html",
    "href": "modules/module5/module5-11-annotating_with_text_and_colour.html",
    "title": "6. Annotating With Text and Colour",
    "section": "",
    "text": "6. Annotating With Text and Colour\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "6. Annotating With Text and Colour"
    ]
  },
  {
    "objectID": "modules/module5/module5-13-what_did_we_just_learn.html",
    "href": "modules/module5/module5-13-what_did_we_just_learn.html",
    "title": "7. What did we just learn?",
    "section": "",
    "text": "7. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M5. Plots for Communication**",
      "7. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data",
    "href": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data",
    "title": "Effective Figures for Communication",
    "section": "Figure design allows us to tell different stories from the same data",
    "text": "Figure design allows us to tell different stories from the same data\nFrom Infoworld\n\n\nWhen designing figures for presentation, we have the possibility to tell different stories from the same underlying data.\nOn this slide, you can see an award-winning figure describing the “bloody toll” from the American war in Iraq. This figure has been purposely designed to draw your attention to the blood-like red colour and the downward-facing bars which brings up an association with dripping blood.\nThe title also clearly highlights the negative aspects of this data.\nNow let’s look at another figure of the same data."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data-1",
    "href": "modules/module5/slides/module5_01.html#figure-design-allows-us-to-tell-different-stories-from-the-same-data-1",
    "title": "Effective Figures for Communication",
    "section": "Figure design allows us to tell different stories from the same data",
    "text": "Figure design allows us to tell different stories from the same data\nFrom Infoworld\n\n\nThis figure paints an entirely different picture of the event. It focuses on the recent declining trend in deaths, uses a positive green colour, and has the bars facing upwards.\nBoth figures are correct and both use the same data, but they convey starkly distinct messages.\nThis also serves to illustrate that understanding the principles behind designing figures for communication does not only help you create effective visualizations, it is also of great help when interpreting figures made by others."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation",
    "href": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation",
    "title": "Effective Figures for Communication",
    "section": "Figure design should be adopted to the target audience and situation",
    "text": "Figure design should be adopted to the target audience and situation\nFrom Kieran Healy’s Data Visualization: A practical introduction\n\n\nThis is an elegant figure that goes into exquisite detail about how Napoleon’s army gradually shrank in numbers as the march against the Russian empire in the early 1800s.\nThe width of the line is the number of soldiers in the army and the colour represents whether they are marching against Moscow (gold/brown) or retreating back to France (black). The bottom of the chart shows how the temperature changed during the campaign.\nIt does take a few seconds to digest the graph when you first see it, but once you have familiarised yourself with it, you appreciate how you can see in detail the army’s progress as it moved through Europe.\nThis is a great visualization when the reader has time to sit down with the plot for a while and when you believe your target audience will appreciate this level of detail?\nBut what if you are presenting this as part of a slide deck in a board meeting and only can spend a few seconds describing the plot? It would likely be too complicated to digest and the take-home message might be lost."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation-1",
    "href": "modules/module5/slides/module5_01.html#figure-design-should-be-adopted-to-the-target-audience-and-situation-1",
    "title": "Effective Figures for Communication",
    "section": "Figure design should be adopted to the target audience and situation",
    "text": "Figure design should be adopted to the target audience and situation\nFrom Kieran Healy’s Data Visualization: A practical introduction\n\n\nIn the board meeting, this pie chart is likely more effective in communicating the take-home message: the Napolean army was decimated as a result of this military campaign.\nAlthough we said earlier in this course that we should generally avoid using pie charts, here the information is simple enough that a pie chart is very effective."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#breaking-an-axis-is-often-misleading",
    "href": "modules/module5/slides/module5_01.html#breaking-an-axis-is-often-misleading",
    "title": "Effective Figures for Communication",
    "section": "Breaking an axis is often misleading",
    "text": "Breaking an axis is often misleading\nFrom The Economist\n\n\nIn this module, we will also visit a few best practices in visualization design and learn why they are effective.\nWe can see one of these on this slide. Breaking the value axis of a chart can lead to that the differences between the values look much bigger than they are.\nIn the left chart of this slide, the value axis is broken resulting in the top bar being only 1.5x longer than the second-longest bar when the difference is in fact more than 5x as can be seen in the right-most chart.\nThis example is from an article in The Economist where they critique their past visualization mistakes, which is an effective way to learn."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#appropriate-choice-of-colours-makes-visualizations-much-more-effective",
    "href": "modules/module5/slides/module5_01.html#appropriate-choice-of-colours-makes-visualizations-much-more-effective",
    "title": "Effective Figures for Communication",
    "section": "Appropriate choice of colours makes visualizations much more effective",
    "text": "Appropriate choice of colours makes visualizations much more effective\n\n\n\nOn this slide, we have represented the values of one of the dataframe columns with different colour combinations. Using the correct colour combination might at first seem like a matter of aesthetics rather than an important part of data visualization, but it can have a profound impact on how we interpret plots.\nWithout knowing the details of how the colour combinations in this slide were created or even what makes for a good combination of colours, we can immediately see that it is easier to interpret the plot on the right.\nHaving the slight variation from light to dark blue is a more natural mapping for a range of values compared to the wide array of different colours used in the left plot.\nWe will learn why this is in a few slide decks!"
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#descriptive-figure-and-axis-titles-are-critical-for-effective-visualizations",
    "href": "modules/module5/slides/module5_01.html#descriptive-figure-and-axis-titles-are-critical-for-effective-visualizations",
    "title": "Effective Figures for Communication",
    "section": "Descriptive figure and axis titles are critical for effective visualizations",
    "text": "Descriptive figure and axis titles are critical for effective visualizations\n\n\nThis is the same figure we showed on the first slide, but with one small modification, can you see what it is?\nWhat we have done is removed the title from the top of the figure. This relatively small change makes the figure much less striking.\nWhile the graphics still stand out, we’re not hit with a powerful take-home message immediately when we look at the plot.\nEven if our audience would have the time to study this figure in detail and read all the text, it will likely not be as memorable without the striking title.\nLater in this module, we will learn not just how to create effective figure titles but also how to label our axes effectively."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#read-in-the-data-containing-the-daily-sum-of-donations-to-wikipedia-in-2020",
    "href": "modules/module5/slides/module5_05.html#read-in-the-data-containing-the-daily-sum-of-donations-to-wikipedia-in-2020",
    "title": "Defining and transforming axis ranges",
    "section": "Read in the data containing the daily sum of donations to Wikipedia in 2020",
    "text": "Read in the data containing the daily sum of donations to Wikipedia in 2020\n\nimport pandas as pd\nimport altair as alt\n\ndonations = pd.read_csv(\"data/donations.csv\", parse_dates=[\"date\"])\nalt.Chart(\n    donations, title=\"Wikipedia donations peak during Christmas\"\n).mark_circle().encode(\n    alt.X(\"date\", title=None),\n    alt.Y(\"sum\", axis=alt.Axis(format=\"$s\"), title=\"Amount donated per day\"),\n)\n\n\n\n\n\n\n\n\nWe will be working with a data set that contains the daily sum of all donations received by Wikipedia in the year 2020. When do you think Wikipedia receives the largest amount of donated money?\nFrom this overview of the data we can see that the most money is donated around Christmas and New Years’.\nThere also seems to be a higher amount donated during the fall then during spring and winter.\nHowever, we cannot see exactly which values the data points during the first half of the year has. Are they close to zero? Or 10,000? We can’t know from looking at this plot."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axis-by-filtering-the-data",
    "href": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axis-by-filtering-the-data",
    "title": "Defining and transforming axis ranges",
    "section": "We can zoom in to highlight a region of an axis by filtering the data",
    "text": "We can zoom in to highlight a region of an axis by filtering the data\n\ntitle_text = 'Wikipedia donations peak during Christmas'\ndonations_2020_until_july = donations[donations['date'].between(\"2020\", \"2020-07\")]\nalt.Chart(donations_2020_until_july, title=title_text).mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day'))\n\n\n\n\n\n\n\n\nZooming in on an axis is useful when we want to highlight a certain region. The easiest way to achieve this is often to filter the data with pandas before passing it alt.Chart.\nHere we create a new dataframe containing only the donations made in the first half of 2020, up until the month of July."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axes",
    "href": "modules/module5/slides/module5_05.html#we-can-zoom-in-to-highlight-a-region-of-an-axes",
    "title": "Defining and transforming axis ranges",
    "section": "We can zoom in to highlight a region of an axes",
    "text": "We can zoom in to highlight a region of an axes\n\nalt.Chart(donations_2020_until_july, title=title_text).mark_circle(clip=True).encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'),\n          title='Amount donated per day',\n          scale=alt.Scale(domain=[0, 100_000])))\n\n\n\n\n\n\n\n\nIt is not always practical to filter the data, so it is good to know how to change the axis range directly in Altair. For this, we could modify the domain of the axis’ scale.\nWhen we modify the scale, we need to set clip=True inside the mark. Without it, we would still see the circles extending beyond the range of the chart.\nThis also serves as a reminder to think twice about limiting the displayed points because it can skew the perception of the data as we saw with the bar chart in the previous slide deck.\nWhen we used alt.Axis previously, the changes we made were cosmetic, such as tick numbers, label formatting etc.\nNow that were are modifying the range of the actual displayed values, we need to use alt.Scale instead. Here we place alt.Scale within alt.Y to specify that we are changing the scale of the y-axis. It also works the same way with alt.Color and alt.Size, which changes the display of these in the legend.\nAfter zooming in on the y-axis as in this slide, we can more clearly see the variation in the lower value data points. We can see that more money is often donated at the beginning of each month, except for the month of July."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#axes-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "href": "modules/module5/slides/module5_05.html#axes-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "title": "Defining and transforming axis ranges",
    "section": "Axes can be anchored to the data range instead of to zero without explicitly setting the domain",
    "text": "Axes can be anchored to the data range instead of to zero without explicitly setting the domain\n\nalt.Chart(donations[donations['sum'] &gt; 2.5e6]).mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day'))\n\n\n\n\n\n\n\n\nYou might have noticed from previous modules that Altair often includes 0 in the axis, even if our data does not have any values close to 0. The reason for this is to enforce good habits and not create, for example, a bar plot that is cut off which makes the difference appear much bigger than they actually are.\nHowever, there are also good reasons for setting the range based on the extent of the data. when your data is compressed in a narrow range far from zero, e.g. plotting time on one axis and having all observations fall between 10 and 11 in the evening.\nIn this slide, we can see that showing only the days with high total donations only uses about half of the vertical space available in the chart."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#axis-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "href": "modules/module5/slides/module5_05.html#axis-can-be-anchored-to-the-data-range-instead-of-to-zero-without-explicitly-setting-the-domain",
    "title": "Defining and transforming axis ranges",
    "section": "Axis can be anchored to the data range instead of to zero without explicitly setting the domain",
    "text": "Axis can be anchored to the data range instead of to zero without explicitly setting the domain\n\nalt.Chart(donations[donations['sum'] &gt; 2.5e6]).mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day', scale=alt.Scale(zero=False)))\n\n\n\n\n\n\n\n\nIf we wanted to use the full range, we could set the domain explicitly like before, but the shortcut zero=False allows us to adjust the axis to the min and max values of the data with less typing.\nWe need to be careful when doing this since it can make small differences appear much bigger than they are. On the previous slide, the point at 4.7M was about twice as far from the x-axis as the point at 2.5M from the x-axis. In this slide, it is about 20 times further away from the x-axis!"
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#large-values-can-hide-variation-among-the-rest-of-the-data",
    "href": "modules/module5/slides/module5_05.html#large-values-can-hide-variation-among-the-rest-of-the-data",
    "title": "Defining and transforming axis ranges",
    "section": "Large values can hide variation among the rest of the data",
    "text": "Large values can hide variation among the rest of the data\n\nalt.Chart(donations, title='Wikipedia donations peak during Christmas').mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day'))\n\n\n\n\n\n\n\n\nSo far, we have seen how we can zoom in to reveal the detail of a specific region of the chart.\nWhat if we want to show all the chart, but still, be able to see details for the days with lower total donations?"
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#altair-allows-us-to-interactively-zoom-in-and-out-of-the-plot",
    "href": "modules/module5/slides/module5_05.html#altair-allows-us-to-interactively-zoom-in-and-out-of-the-plot",
    "title": "Defining and transforming axis ranges",
    "section": "Altair allows us to interactively zoom in and out of the plot",
    "text": "Altair allows us to interactively zoom in and out of the plot\n\nalt.Chart(donations, title='Wikipedia donations peak during Christmas').mark_circle().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', axis=alt.Axis(format='$s'), title='Amount donated per day')).interactive()\n\n\n\n\n\n\n\n\nOne of Altair’s strong suites is that it is not limited to static visualizations.\nBy simply appending the interactive() method to our chart we can use the mouse to zoom by scrolling and pan by clicking and dragging!\nThis allows us to interactively explore the data and zoom in on the points of interest as needed. We will learn more about interactive visualizations in the last module, this is just a sample of what is possible.\nNeat ey? Now let’s get back to the current task at hand, how can we solve the problem of a large axis range in a static figure? As sometimes, we need a static figure, e.g. when we print images on paper or display them in a static file-type, such as a PDF."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#a-log-transformed-axis-can-reveal-detail-across-a-large-range-of-values",
    "href": "modules/module5/slides/module5_05.html#a-log-transformed-axis-can-reveal-detail-across-a-large-range-of-values",
    "title": "Defining and transforming axis ranges",
    "section": "A log-transformed axis can reveal detail across a large range of values",
    "text": "A log-transformed axis can reveal detail across a large range of values\n\nalt.Chart(donations).mark_point().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (log-transformed)',\n          axis=alt.Axis(format='$s'), scale=alt.Scale(type='log')),\n    alt.Tooltip('week_day'))\n\n\n\n\n\n\n\n\nBy applying a logarithmic (log) transformation to the y-axis, we’re able to increase the range used for the smaller values by compressing the space used for larger values.\nThis means that log transformations are useful when there are large differences in the data values, such as in our case here.\nLog scales are also useful to show data that has been obtained from multiplication or division, such as ratios.\nThe default log transformation in Altair uses the base 10 which is the most common choice. Every step on a log scale is referred to as a difference of an “order of magnitude”.\nIt is important to remember that we log scaled axes are not as easy to interpret as linear ones, and it is easy to underestimate actual the difference between large and small values.\nThis is especially true when creating figures for communication with the general public rather than in a subject area where participants might be more used to seeing this transformation.\nIf you find yourself situation make sure that you clearly label the axis as log-transformed and add any explanatory text to help a general audience interpret your visualization."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#the-log-transformation-does-not-work-for-data-containing-the-value-zero",
    "href": "modules/module5/slides/module5_05.html#the-log-transformation-does-not-work-for-data-containing-the-value-zero",
    "title": "Defining and transforming axis ranges",
    "section": "The log transformation does not work for data containing the value zero",
    "text": "The log transformation does not work for data containing the value zero\n\ndonations.loc[0, 'sum'] = 0\nalt.Chart(donations).mark_point().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (log-transformed)',\n          axis=alt.Axis(format='$'), scale=alt.Scale(type='log')))\n\n\n\n\n\n\n\n\nThe way the logarithmic transform is defined means that it cannot be calculated for the value 0.\nWe can see this if we artificially introduce a 0 in our dataset.\nAll the data points are compressed at the top, because the log of 0 is interpreted as a value of negative infinity."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#the-symlog-transformation-avoids-the-problem-with-zeroes-in-the-data",
    "href": "modules/module5/slides/module5_05.html#the-symlog-transformation-avoids-the-problem-with-zeroes-in-the-data",
    "title": "Defining and transforming axis ranges",
    "section": "The symlog transformation avoids the problem with zeroes in the data",
    "text": "The symlog transformation avoids the problem with zeroes in the data\n\nalt.Chart(donations).mark_point().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (symlog-transformed)',\n          axis=alt.Axis(format='$s'), scale=alt.Scale(type='symlog')))\n\n\n\n\n\n\n\n\nFortunately, there is a symmetrical variant of the log transformation (symlog) which works around the issues with zeroes by defining a linear range for values close to 0, and a logarithmic range of all other values.\nWe can see that the y-axis looks different here as it explicitly includes the value zero, and the tick values are set differently for symlog compared to the regular log transform."
  },
  {
    "objectID": "modules/module5/slides/module5_05.html#remember-to-use-the-correct-mark-for-your-data",
    "href": "modules/module5/slides/module5_05.html#remember-to-use-the-correct-mark-for-your-data",
    "title": "Defining and transforming axis ranges",
    "section": "Remember to use the correct mark for your data",
    "text": "Remember to use the correct mark for your data\n\nalt.Chart(donations.drop(0)).mark_line().encode(\n    alt.X('date', title=None),\n    alt.Y('sum', title='Amount donated per day (log-transformed)',\n          axis=alt.Axis(format='$s'), scale=alt.Scale(type='log')))\n\n\n\n\n\n\n\n\nIn this slide, we’re dropping the artificial 0 we introduced earlier to bring attention to another important aspect of visualization: the choice of mark.\nSo far we have been plotting our time-series data using circles. This has been useful to illustrate the points above, but it is not the most effective choice for visualizing temporal data.\nBy changing the mark to a line it is much easier for us to follow the trend going from one point to another and we can immediately spot a curious pattern!\nWhat are those repeated ups and down? Are those random fluctuations or are there particular days of the month where people are more likely to donate?\nWe will return to this data in the last slide deck of this module to find out!"
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#repetition-of-hue-lightness-and-saturation",
    "href": "modules/module5/slides/module5_09.html#repetition-of-hue-lightness-and-saturation",
    "title": "Effective use of colour for quantitative data",
    "section": "Repetition of hue, lightness, and saturation",
    "text": "Repetition of hue, lightness, and saturation\n\n\nIn the last slide deck, we varied hues to represent categorical values, with a focus on the distinction between colour hues/categories. When choosing a colour scheme to represent quantitative data, we will instead focus on sequential, perceptually uniform changes in lightness.\nSequential changes in lightness ensures that uniform changes in the values of the data are perceived as uniform changes in the colour space. In other words, we want it to be intuitive how the colours relate to the numerical values they represent, so that we can accurately understand how the data values vary when looking at the changing colours."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#lightness-is-more-effective-than-hue-to-communicate-changes-in-quantitative-data",
    "href": "modules/module5/slides/module5_09.html#lightness-is-more-effective-than-hue-to-communicate-changes-in-quantitative-data",
    "title": "Effective use of colour for quantitative data",
    "section": "Lightness is more effective than hue to communicate changes in quantitative data",
    "text": "Lightness is more effective than hue to communicate changes in quantitative data\n\n\n\nIn the plots on this slide, we have encoded the same variable (Horsepower) to be represented by both the x-axis and the colour. This is rarely done in practice, but it is useful to contrast and understand colour schemes because we know that the colours of the points should change in a perceptually uniform manner as we move from left to right along the x-axis.\nIn the leftmost plot in this slide, we used the default categorical colour scheme. As you can see this is not at all well suited to represent numerical data as the sharp transitions between hues makes it appear as if there are groups in the data, whereas we know that these values are changing gradually from left to right on the x-axis.\nIn the plot to the right, we have used the default sequential colour scheme for quantitative data in Altair. This conveys the gradual change in the Horsepower values in a perceptually uniform manner. We can clearly see that colour is changing gradually from light to dark along the x-axis, although it can be hard to pinpoint exactly which number a particular colour is (remember that colour is not as good as position to convey an exact value even when it is easy to see the overall trend)."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#combining-lightness-variation-with-a-slight-variation-in-hue-highlights-detail-in-the-data",
    "href": "modules/module5/slides/module5_09.html#combining-lightness-variation-with-a-slight-variation-in-hue-highlights-detail-in-the-data",
    "title": "Effective use of colour for quantitative data",
    "section": "Combining lightness variation with a slight variation in hue highlights detail in the data",
    "text": "Combining lightness variation with a slight variation in hue highlights detail in the data\n\n\n\nThe leftmost plot here uses the same default colour scheme as in the previous slide.\nThe plot on the right has a colour scheme that adds a slight variation in hue while keeping the perceptually uniform variation in lightness.\nThe reason for this is to highlight small variations in the data when this is of great importance. We can see the effect of this by studying the values in the 60-80 range in both plots. It is hard to see the differences between these in the leftmost plot, but thanks to the hue transition from yellow to green in the rightmost plot we can more clearly perceive detail in this range.\nAlthough the hue shifts in these plots are more gradual than in the plot with the categorical colour scheme in the previous slide, it may still introduce a slight bias towards seeing groupings where there are none, which is something to keep in mind.\nIn practice, both of these colour schemes are used often to represent quantitative data."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#high-values-should-have-the-most-contrast-to-the-background",
    "href": "modules/module5/slides/module5_09.html#high-values-should-have-the-most-contrast-to-the-background",
    "title": "Effective use of colour for quantitative data",
    "section": "High values should have the most contrast to the background",
    "text": "High values should have the most contrast to the background\n\ncars = data.cars()\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Horsepower', title='Engine power (hp)',\n                    scale=alt.Scale(scheme='viridis', reverse=True)))\n\n\n\n\n\n\n\n\nTo decide whether the highest or lowest values should be at the lightest or darkest end of a sequential colour scheme, it is advisable to set it so that the most important values has the most contrast to the background.\nOften there is no difference in importance between high and low values; then the convention is to set the highest values to have the most contrast with the background, which is the case for most Altair colour schemes by default.\nHowever, for the “viridis” colour scheme that we are using here, goes from dark to light by default so we need to pass reverse=True to alt.Scale (this technique could be used to reverse any scale in Altair, including the value along one of the axes).\nThe Viridis colour scheme was designed by the developers of matplotlib (another Python plotting package). In addition to the colour schemes linked in the previous slide deck, more details and examples are available in the matplotlib documentation, and many of the core design principles are outlined in this entertaining talk, including the design choice behind Viridis.\nNote that we are using filled circular marks and the size parameter to enlarge the points slightly and make it easier to see the changes in colour that we will be discussing in this slide deck."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#some-colour-schemes-are-designed-specifically-for-people-with-colour-vision-deficiencies",
    "href": "modules/module5/slides/module5_09.html#some-colour-schemes-are-designed-specifically-for-people-with-colour-vision-deficiencies",
    "title": "Effective use of colour for quantitative data",
    "section": "Some colour schemes are designed specifically for people with colour vision deficiencies",
    "text": "Some colour schemes are designed specifically for people with colour vision deficiencies\n\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Horsepower', title='Engine power (hp)',\n                    scale=alt.Scale(scheme='cividis', reverse=True)))\n\n\n\n\n\n\n\n\nBoth viridis, the default blue colour scheme, and most of the quantitative colour schemes available in Altair are well perceived by people with colour vision deficiencies since the data variation is mostly represented as variation in lightness.\nHowever, there are also some colour schemes that are designed to look almost exactly the same for people with the most common colour vision deficiencies also when it comes to the hue variation.\n'cividis' is one of these colour schemes and you can see how it looks in this plot.\nNearly 10% of the population is colour vision deficient; red-green colour blindness, in particular, affects 8% of men and 0.5% of women. Guidelines for making your visualizations more accessible to those with reduced colour vision, will in many cases also improve the interpretability of your graphs for people who have standard colour vision.\nFortunately, many of these are followed by the default settings in Altair, and we don’t need to change the colour scheme for this reason.\nIf you are unsure how your plot will look for someone who sees colours differently than you, this website lets you upload an image and simulate different colour vision deficiencies."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#additional-hue-variation-brings-out-further-detail-but-distorts-the-perceptual-uniformity",
    "href": "modules/module5/slides/module5_09.html#additional-hue-variation-brings-out-further-detail-but-distorts-the-perceptual-uniformity",
    "title": "Effective use of colour for quantitative data",
    "section": "Additional hue variation brings out further detail but distorts the perceptual uniformity",
    "text": "Additional hue variation brings out further detail but distorts the perceptual uniformity\n\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Horsepower', title='Engine power (hp)',\n                    scale=alt.Scale(scheme='turbo')))\n\n\n\n\n\n\n\n\nIf minor variation in the data is of uttermost importance, it is possible to use sequential colour schemes with additional hues.\nIn this plot, we use a modern rainbow colour scheme to highlight small changes in the Horsepower variable. While both the previous colour schemes were gradually increasing in lightness, this is not the case for this rainbow map.\nHere the lightest colours are in the middle and the darkest at both extremes of the colour schemes. This is particularly negative for people with colour vision deficiencies, which can no longer rely on the gradual lightness change and the varying hues, therefore, makes this plot less accessible.\nIn addition to losing the overall intuitiveness of the colour scheme, the many hues mean that we’re likely to perceive changes in the colour in a non-uniform manner, and see groups where they are none.\nImportantly, the rainbow map we have used here is a modern colour scheme called “turbo”, which was recently developed by Google. Most rainbow colour schemes you will see on plots in the wild use a colour scheme called “jet”, which used to be the default in many plotting packages but is not a good choice for any data, because it introduces artificial banding and highlighting of values.\nThe take-home message here is that there are valid use cases for modern rainbow maps, but you should be confident that there is no better alternative before reaching for this tool, and be careful when interpreting rainbow-coloured plots in general.\nThe jet rainbow colourmap should be avoided for many reasons, including that the sharp transitions between colours introduce a visual threshold that do not represent the underlying continuous data. Another issue is luminance (brightness). For example, your eye is drawn to the yellow and cyan regions, because the luminance is higher. This can have the unfortunate effect of highlighting features in your data that don’t exist, misleading your viewers! Since higher values are not always lighter, this means that your graph is not going to translate well to greyscale. More details about jet can be found in this blog post and this series of posts. A better alternative when you really need small differences in your data to stand out is to use the turbo rainbow colour scheme."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#colour-is-most-effectively-used-to-represent-a-separate-dataframe-column",
    "href": "modules/module5/slides/module5_09.html#colour-is-most-effectively-used-to-represent-a-separate-dataframe-column",
    "title": "Effective use of colour for quantitative data",
    "section": "Colour is most effectively used to represent a separate dataframe column",
    "text": "Colour is most effectively used to represent a separate dataframe column\n\nalt.Chart(cars).mark_circle(size=50).encode(\n    alt.X('Horsepower', title='Engine power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),\n    color=alt.Color('Weight_in_lbs', title='Weight (lbs)'))\n\n\n\n\n\n\n\n\nIn the previous slides, we encoded the same dataframe column in both the x and color channel so that it was easy for us to directly compare the colours to the points position on the x-axis.\nHowever, this is rarely done in practice, where it is often more effective to encode a separate dataframe column as the colour of the points.\nIn this slide we have encoded the weight of the cars as the colour. As we talked about in a previous module, it is difficult to see exactly which value a colour represents, but we can effectively communicate roughly how heavy the cars are as well as clearly highlight trends in the data.\nIn this plot, the trend is that the points get gradually darker the further towards the bottom right corner they lie. This means that heavier cars are the ones with more powerful engines and poorer gas mileage."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#diverging-colour-schemes-are-suitable-for-plots-with-a-natural-midpoint",
    "href": "modules/module5/slides/module5_09.html#diverging-colour-schemes-are-suitable-for-plots-with-a-natural-midpoint",
    "title": "Effective use of colour for quantitative data",
    "section": "Diverging colour schemes are suitable for plots with a natural midpoint",
    "text": "Diverging colour schemes are suitable for plots with a natural midpoint\n\n\nIn this slide, you see the lightness variation among all the colour schemes we have covered. Categorical colours are discretely separated, perceptually uniform colour schemes vary lightness linearly throughout the range, whereas rainbow maps peak lightness in the middle and have dark colours at the extremes.\nThe colour scheme to the far right is called a diverging colour scheme, which are useful when there is a natural midpoint in the data as we will see next.\nThere is also one other type of colour scheme, cyclical, which starts and ends in both the same lightness and hue. This design is useful for values with natural cycles such as degrees of an angle of the month of the year, where the end and beginning are close to each other."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#temperature-data-can-be-represented-with-a-sequential-colour-scheme",
    "href": "modules/module5/slides/module5_09.html#temperature-data-can-be-represented-with-a-sequential-colour-scheme",
    "title": "Effective use of colour for quantitative data",
    "section": "Temperature data can be represented with a sequential colour scheme",
    "text": "Temperature data can be represented with a sequential colour scheme\n\nimport pandas as pd\n\ntoronto_temp = pd.read_csv(\n    \"data/weatherstats_toronto_daily.csv\", parse_dates=[\"date\"]\n)[[\"date\", \"avg_temperature\"]]\nalt.Chart(toronto_temp).mark_circle(size=50).encode(\n    alt.X(\"date\", title=None),\n    alt.Y(\"avg_temperature\", title=\"Average temperature (°C)\"),\n    color=alt.Color(\"avg_temperature\", title=\"Average temperature (°C)\"),\n)\n\n\n\n\n\n\n\n\nExamples of data that is effectively represented by diverging colour schemes include temperature, correlations, and differences, where zero often can be a natural midpoint.\nHere we are plotting data from the last few years of the average daily temperature (C) in Toronto, Canada downloaded from weatherstats.ca.\nAs you can see, a sequential colour scheme can be used to visualize this data, but it does not get a good sense for when the temperature was negative and when it was positive."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#a-diverging-colour-scheme-effectively-highlights-values-at-the-extreme-temperatures",
    "href": "modules/module5/slides/module5_09.html#a-diverging-colour-scheme-effectively-highlights-values-at-the-extreme-temperatures",
    "title": "Effective use of colour for quantitative data",
    "section": "A diverging colour scheme effectively highlights values at the extreme temperatures",
    "text": "A diverging colour scheme effectively highlights values at the extreme temperatures\n\nalt.Chart(toronto_temp).mark_circle(size=50).encode(\n    alt.X('date', title=None),\n    alt.Y('avg_temperature', title='Average temperature (°C)'),\n    color=alt.Color('avg_temperature',\n                    title='Average temperature (°C)',\n                    scale=alt.Scale(scheme='blueorange', domainMid=0)))\n\n\n\n\n\n\n\n\nWhen using a diverging colours scheme as in this slide, it is clear which days had the extreme negative and the extreme positive temperatures.\nThis is because diverging colour schemes vary in lightness from dark at the extremes to light in the middle, and use different hues for values on each side of the midpoint.\nBy default, the midpoint would be set in the middle of the max and min values in our data (so around +5 here). Since 0 is a natural midpoint, we specify this manually.\nThe default diverging colour scheme uses orange and blue hues, but there are many other effective combinations. You should avoid using green and red, because these are practically impossible to tell apart for people with the most common types of colour vision deficiencies."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#an-explicit-domain-can-be-defined-to-adjust-colours-at-the-extremes",
    "href": "modules/module5/slides/module5_09.html#an-explicit-domain-can-be-defined-to-adjust-colours-at-the-extremes",
    "title": "Effective use of colour for quantitative data",
    "section": "An explicit domain can be defined to adjust colours at the extremes",
    "text": "An explicit domain can be defined to adjust colours at the extremes\n\nalt.Chart(toronto_temp).mark_circle(size=50).encode(\n    alt.X('date', title=None),\n    alt.Y('avg_temperature', title='Average temperature (°C)'),\n    color=alt.Color('avg_temperature',\n                    title='Average temperature (°C)',\n                    scale=alt.Scale(scheme='blueorange', domain=[-30, 30])))\n\n\n\n\n\n\n\n\nWhen setting the midpoint of the diverging colour scheme, the extremes data values on either side are given the darkest lightness values.\nThis means that the positive side of the scale is longer, and only points 30 degrees away from the midpoint are coloured in the darkest orange colour,\nOn the other hand, for the negative values, it is sufficient to be only 20 degrees away from the midpoint to be colour in the darkest blue colour.\nThis colouring strategy is often effective, but it is also possible for us to set the explicit domain over which the colours are defined, so that points as many steps on either side of the midpoint are assigned the same lightness values.\nFor temperature data, either approach is fine and it depends on what we want to highlight.\nFor correlation data, which can never be over 1 or under -1, it would more often than not be sensible to set these limits as the domain values.\nIf you are interested in reading more about how colour choices determines what we see, this is an educational article."
  },
  {
    "objectID": "modules/module5/slides/module5_end.html#module-learning-outcomes",
    "href": "modules/module5/slides/module5_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 5",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nFollow guidelines for best practices in visualization design.\nAdjust axes extents and formatting.\nModify titles of figure elements.\nChoose appropriate color schemes for your data.\nUse pre-made and custom color schemes.\nSelectively highlight and annotate data with color and text.\nDirectly label data instead of using legends.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module6/module6-01-telling_stories_with_visualization.html",
    "href": "modules/module6/module6-01-telling_stories_with_visualization.html",
    "title": "1. Telling Stories with Visualization",
    "section": "",
    "text": "1. Telling Stories with Visualization\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "1. Telling Stories with Visualization"
    ]
  },
  {
    "objectID": "modules/module6/module6-03-visualizing_geographical_data.html",
    "href": "modules/module6/module6-03-visualizing_geographical_data.html",
    "title": "2. Visualizing geographical data",
    "section": "",
    "text": "2. Visualizing geographical data\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "2. Visualizing geographical data"
    ]
  },
  {
    "objectID": "modules/module6/module6-05-figure_layouts.html",
    "href": "modules/module6/module6-05-figure_layouts.html",
    "title": "3. Figure Layouts",
    "section": "",
    "text": "3. Figure Layouts\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "3. Figure Layouts"
    ]
  },
  {
    "objectID": "modules/module6/module6-07-what_did_we_just_learn.html",
    "href": "modules/module6/module6-07-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M6. Stories, Maps and Layouts**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#how-to-tell-a-data-story",
    "href": "modules/module6/slides/module6_01.html#how-to-tell-a-data-story",
    "title": "Telling stories with visualizations",
    "section": "How to tell a data story",
    "text": "How to tell a data story\n\nPeak your audience’s interest\nMake the reader curious about the next figure\nPresent facts in an engaging way without hyperbole\nTailor it to the audience you have in mind\n\n\nAn effective story often peaks the readers’ interest up front, and makes them want to learn more. To do this, we could start with a striking figure, an important problem that begs for a solution, or reveal data that challenges the reader’s previous knowledge.\nWhen making a data story exciting it is important that is remains based in fact. We do not want our story to resemble headlines of a clickbait article.\nWhen telling a story, it is also important to tailor it to the audience and context. This ensures that it is of the right technical difficulty and detail.\nTo practice storytelling, we will explore an example based on articles on deforestation from Our World in Data."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#a-tail-of-global-deforestation",
    "href": "modules/module6/slides/module6_01.html#a-tail-of-global-deforestation",
    "title": "Telling stories with visualizations",
    "section": "A tail of global deforestation",
    "text": "A tail of global deforestation\n\nimport pandas as pd\nimport altair as alt\n\nforest_loss = pd.read_csv('data/global-forest-loss.csv', parse_dates=['decade'])\ntitle = 'Forest loss is still increasing rapidly world wide'\nalt.Chart(forest_loss, title=title).mark_line().encode(\n    alt.X('decade', title=''),\n    alt.Y('cumulative_hectar_lost_millions',\n            title='Cumulative lost forest area (million ha)'))\n\n\n\n\n\n\n\n\nAs we can see in this slide, the total global forest loss during the last 300 years is about 1.5 billion hectares. That’s almost twice the area of Australia!\nTo put this into a historical perspective the world has lost 1/6 of its forest in the last 100 years, which is as much as in the previous 9000 years combined.\nAlthough we can see that global deforestation has been slowing down since the 1980s, it is still progressing at an unsustainable rate.\n95% of the deforestation today occurs in tropical regions. This is particularly alarming given that trees in the tropical rain forests are not easily replaced after they are cut down."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#half-of-the-tropical-deforestation-is-localized-to-only-two-countries",
    "href": "modules/module6/slides/module6_01.html#half-of-the-tropical-deforestation-is-localized-to-only-two-countries",
    "title": "Telling stories with visualizations",
    "section": "Half of the tropical deforestation is localized to only two countries",
    "text": "Half of the tropical deforestation is localized to only two countries\n\ntop_deforestation_regions = pd.read_csv('data/region-share-tropical-deforestation.csv')\ntitle = 'Brazil and Indonesia account for almost half of global deforestation'\nalt.Chart(top_deforestation_regions, title=title).mark_bar().encode(\n    x='Share of commodity-driven deforestation (%)',\n    y=alt.Y('Region', title='', sort='x'))\n\n\n\n\n\n\n\n\nPermanent loss of forest (or “deforestation”) is a big problem that leads to species extinction, land erosion, and accelerates climate change.\nAlthough the consequences of deforestation are of global impact, we can see in this chart that forest loss is not evenly distributed across the world.\nIn particular, Brazil and Indonesia stand. These the two countries account for roughly half of the commodity-driven deforestation around the world.\nNotably, this chart only shows deforestation that is driven by commodities, such as the need for new pastures for cattle or fields to grow crops, but this accounts for most of the tropical deforestation.\nIt would be easy to jump to conclusions upon seeing a chart like this and only blame the countries with high local deforestation rates, but it that really fair?\nHow much of this deforestation is really driven by local needs? And how much is due to exports to other countries?"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#a-large-part-of-deforestation-is-driven-by-exported-commodities",
    "href": "modules/module6/slides/module6_01.html#a-large-part-of-deforestation-is-driven-by-exported-commodities",
    "title": "Telling stories with visualizations",
    "section": "A large part of deforestation is driven by exported commodities",
    "text": "A large part of deforestation is driven by exported commodities\n\ndeforestation_exported = pd.read_csv('data/share-deforestation-exported.csv', parse_dates=['Year'])\ntitle = 'Exported commodities contribute heavily to deforestation'\nalt.Chart(deforestation_exported, title=title).mark_line().encode(\n    alt.X('Year', title=''),\n    alt.Y('share_deforestation_exported', title='Exported deforestation (%)'),\n    color='Region')\n\n\n\n\n\n\n\n\nThis chart shows the percentage share of deforestation that is due to exported goods from 2005 to 2013 for Brazil and Indonesia.\nAs we can see, a large part of the deforestation in both countries is driven by the demand from other countries. This is most striking in Indonesia, where the materials from around half the country’s deforestation ends up in exported goods.\nSo far, this story has shown us that global forest areas are at an all time low and likely still shrinking. Much of the deforestation appears to be localized to just a few countries, yet it is driven by global demands for forest products.\nThis could be the end of our story if the main narrative we want to communicate is that deforestation is truly a global problem that needs to be solved through international collaborations.\nHowever, our story seems to leave some questions unanswered that our audience will likely be asking, such as which are the commodities that drive most of the deforestation? Given that we have data to answer this question, let’s not end our story here!"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#demand-for-beef-is-the-biggest-reason-for-deforestation-in-brazil",
    "href": "modules/module6/slides/module6_01.html#demand-for-beef-is-the-biggest-reason-for-deforestation-in-brazil",
    "title": "Telling stories with visualizations",
    "section": "Demand for beef is the biggest reason for deforestation in Brazil",
    "text": "Demand for beef is the biggest reason for deforestation in Brazil\n\nbrazil_drivers = pd.read_csv(\"data/drivers-deforestation_2003-2013_brazil.csv\")\ntitle = \"Cattle pasture was the biggest deforestation driver in Brazil 2003-2013\"\nalt.Chart(brazil_drivers, title=title).mark_bar().encode(\n    alt.X(\"deforestation_hectares\", title=\"Deforested area (ha)\"),\n    alt.Y(\"driver\", title=\"\", sort=\"x\"),\n)\n\n\n\n\n\n\n\n\nThis slide shows the biggest drivers of deforestation in Brazil between the years 2003 and 2013.\nWe can see that loss of forest is dominated by the demand for beef, which leads to permanent clearing of forest to create pastures for cattle grazing.\nThere is also a smaller contributions from small scale clearings, fires, and commercial crops. Small scale clearings results in land used for combination of purposes such as residencies, orchards, croplands, and pastures.\nImportantly, our data does not contain information about how much of each commodity is due to demand outside Brazil, so we should refrain from drawing conclusions about this. However, export data for each commodity would be useful data to collect next if we were aiming to explore our story in this direction.\nAlthough beef is the major contributor to rain forest deforestation, it could be the case that our demand for more food has simply increased and cattle herds are an effective use of land to create food for human consumption. Let’s flip to the next slide to find out!"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#beef-is-highly-inefficient-use-of-land-to-generate-calories",
    "href": "modules/module6/slides/module6_01.html#beef-is-highly-inefficient-use-of-land-to-generate-calories",
    "title": "Telling stories with visualizations",
    "section": "Beef is highly inefficient use of land to generate calories",
    "text": "Beef is highly inefficient use of land to generate calories\n\nland_use = pd.read_csv('data/land-use-per-kcal.csv')\ntitle = 'Beef require the most land per 1000 kcal of food generated'\nalt.Chart(land_use, title=title).mark_bar().encode(\n    alt.X('Land use per 1000kcal (m2)'),\n    alt.Y('Commodity', sort='x', title=''))\n\n\n\n\n\n\n\n\nThe plot in this slide reveals that raising cattle for the purpose of beef production is one of the most inefficient ways to produce food for human consumption.\nArmed with this knowledge (and the data to back it up), we could suggest that one way to decrease deforestation in Brazil may be to decrease the global demand for beef, while increasing the demand for other protein-rich foods that can be grown in Brazil in a more efficient way.\nTogether with the large demand for beef products this inefficient use of land creates an unfortunate situation in Brazil where a lot of tropical forest is being cut down to make room for new pastures.\nWhen telling a story, it is important to not jump to conclusions or suggest that solutions to problems are simpler than what they might really be.\nSo far we have seen that beef is a major contributing factor to deforestation in Brazil, but there are many more aspect of the food production chain that we have not considered.\nChanging beef for other products could be highly beneficial, but it could also be challenging and costly up front to implement. In telling this story, it would be important to also include these uncertainties and potential challenges.\nLet’s continue our story by looking at the same breakdown for Indonesia, is beef production the biggest issue there as well?"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#palm-oil-is-the-biggest-contributor-to-deforestation-in-indonesia",
    "href": "modules/module6/slides/module6_01.html#palm-oil-is-the-biggest-contributor-to-deforestation-in-indonesia",
    "title": "Telling stories with visualizations",
    "section": "Palm oil is the biggest contributor to deforestation in Indonesia",
    "text": "Palm oil is the biggest contributor to deforestation in Indonesia\n\nindonesia_drivers = pd.read_csv('data/drivers-deforestation_2003-2013_indonesia.csv')\ntitle = 'Palm oil was the biggest contribtutor in Indonesia 2003-2013' \nalt.Chart(indonesia_drivers, title=title).mark_bar().encode(\n    alt.X('deforestation_hectares', title='Deforested area (ha)'),\n    alt.Y('driver', title='', sort='x'))\n\n\n\n\n\n\n\n\nThis slide shows the biggest drivers of deforestation in Indonesia between the years 2003 and 2013.\nHere, we see that most of the deforested land in Indonesia is used for palm oil plantations. Much of deforested land is also used for small scale clearings, timber plantations, and grasslands.\nAgain, it is important to remember that we don’t have the data for how much of each commodity is exported, so we cannot make any claims about this.\nPerhaps you have have read or heard negative things about palm oil in the past? It has been of focus of late in the media, due to its link to tropical deforestation.\nFrom this chart alone, we might want to recommend that decreasing palm oil production might be a good intervention to reduce deforestation in Indonesia.\nHowever, if this were to be done, we would need another oil crop would need to take its place to keep up with the world’s demand for vegetable oils.\nLet’s explore how efficient palm oil and its alternatives are when it comes to land use versus yield."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#palm-oil-is-the-most-efficient-use-of-land-for-vegetable-oil-production",
    "href": "modules/module6/slides/module6_01.html#palm-oil-is-the-most-efficient-use-of-land-for-vegetable-oil-production",
    "title": "Telling stories with visualizations",
    "section": "Palm oil is the most efficient use of land for vegetable oil production",
    "text": "Palm oil is the most efficient use of land for vegetable oil production\n\noil_land_use = pd.read_csv('data/area-land-needed-to-global-oil.csv')\ntitle = 'Palm trees are a the most efficient oil crop'\nalt.Chart(oil_land_use, title=title).mark_bar().encode(\n    alt.Y('Commodity', title='', sort='x'),\n    alt.X('Area needed to meet global vegetable oil demand (ha)'))\n\n\n\n\n\n\n\n\nThis chart shows how many hectares would be needed for the crops of common vegetable oils to meet the entire world’s oil demands.\nIt turns out that palm oil is the most efficient use of land for the amount of oil produced! For example, if we wanted to replace it with olive oil, we would need almost 10x the land to do so!\nSo does it make sense for Indonesia to keep clearing forests and creating more palm plantations because they are the most efficient oil crop?\nNo, our conclusions cannot stop here. Things are not so simple. The type of land where the oil crop grows also matters.\nReplacing tropical forests containing rich biodiversity with palm oil plantations has a more severe, negative impact on the environment compared to changing the type of oil crops being grown on land that has already been deforested and used for agriculture elsewhere in the world.\nTherefore it is important that palm oil plantages are grown in a sustainable way that is compatible with preserving the tropical forests in Indonesia.\nJust as with Brazil and it’s use of pasture from deforested land to raise cattle for beef, the story of palm oil is more complex then we can illustrate in a single visualization."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#summary-and-recap",
    "href": "modules/module6/slides/module6_01.html#summary-and-recap",
    "title": "Telling stories with visualizations",
    "section": "Summary and recap",
    "text": "Summary and recap\n\nPeak your audience’s interest\nMake the reader curious about the next figure\nPresent facts in an engaging way without hyperbole\nTailor it to the audience you have in mind\n\n\nThis slide recaps the main points about how to tell an effective story.\nWhen writing a data narrative, it can be effective to summarize what you have said in the end. This doesn’t have to involve showing the plots again, and you could choose to highlight some of the key messages in text.\nOur story of deforestation drivers in Indonesia and Brazil has informed our audience about the main reasons why tropical forests are being cut down today.\nWe tried peaking the reader’s interest by illustrating the scale of the problem in the beginning and then delved deeper into both areas that have been completely new to them and topics they might have read about previously.\nWe also made sure to state any caveats where our visualizations did not intend to reveal the full complexity of the situation, but highlight a few main findings.\nIf we evoked your curiosity and you want to learn more about this topic, you can visit this article about deforestation drivers from Our World in Data, which also reviews the latest research in this topic."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#recreating-the-chart-from-last-slide-deck",
    "href": "modules/module6/slides/module6_05.html#recreating-the-chart-from-last-slide-deck",
    "title": "Figure Composition",
    "section": "Recreating the chart from last slide deck",
    "text": "Recreating the chart from last slide deck\n\nimport altair as alt\nimport pandas as pd\nfrom vega_datasets import data\n\nstate_map = alt.topo_feature(data.us_10m.url, \"states\")\nstate_pop = pd.read_csv(\"data/us_population_coordinates_asthma-cases.csv\")\nstate_pop[\"asthma_cases_per_capita\"] = (\n    state_pop[\"number_of_asthma_cases\"] / state_pop[\"population\"]\n)\nchoropleth = (\n    alt.Chart(state_map)\n    .mark_geoshape()\n    .transform_lookup(\n        lookup=\"id\", from_=alt.LookupData(state_pop, \"id\", [\"asthma_cases_per_capita\"])\n    )\n    .encode(\n        color=alt.Color(\"asthma_cases_per_capita:Q\", title=\"Asthma cases per capita\")\n    )\n    .project(type=\"albersUsa\")\n    .properties(width=500, height=150)\n)\nchoropleth\n\n\n\n\n\n\n\n\nOn this slide we are recreating the choropleth pointplot map from the end of the last slide deck. We are saving it as an object so that we can use it to practice laying out plots together in a panel on the following slides.\nWe set the width of this map because we will be combining it with other figures later and we want them all to be of the same width for the figure panel to look aesthetically pleasing."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#a-barchart-is-able-to-represent-relative-differences-more-precisely",
    "href": "modules/module6/slides/module6_05.html#a-barchart-is-able-to-represent-relative-differences-more-precisely",
    "title": "Figure Composition",
    "section": "A barchart is able to represent relative differences more precisely",
    "text": "A barchart is able to represent relative differences more precisely\n\nbars = (alt.Chart(state_pop).mark_bar().encode(\n    alt.X('state', sort='-y', title=''),\n    alt.Y('asthma_cases_per_capita', title='Asthma cases per capita'))\n    .properties(width=500, height=75))\nbars\n\n\n\n\n\n\n\n\nAt the end of the last slide deck we mentioned that it would good to couple our map with a bar char since this would make it easier to compare the relative differences between the states more precisely.\nHere we create that bar chart and as you can see, we can now tell apart small differences between the states and we are able to clearly see the values also for states with small areas, such as Rhode Island which is barely visible on the map.\nWhile having the labels on the x-axis makes them harder to read it will make our bar plot fit in better with the map in the figure layout, which is why we have opted for this encoding here.\nWe’re setting a pretty low height so that this chart will work well in the multi-panel figures we are creating in later on in this slide deck."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#placing-plots-next-to-each-other-allows-us-to-make-direct-comparisons",
    "href": "modules/module6/slides/module6_05.html#placing-plots-next-to-each-other-allows-us-to-make-direct-comparisons",
    "title": "Figure Composition",
    "section": "Placing plots next to each other allows us to make direct comparisons",
    "text": "Placing plots next to each other allows us to make direct comparisons\n\n# alt.vconcat(choropleth, bars)\nchoropleth & bars\n\n\n\n\n\n\n\n\nTo place these two plots in a vertical layout we can use the ampersand (&) operator. You may have already seen us using this operator occasionally in previous modules.\nWe could also accomplish the same thing by using the alt.vconcat(choropleth, points_on_map) syntax. Here, we chose however to opt for the pipe operator as it is more efficient (keystroke-wise).\nNow we can study both figures in the same view, instead of flipping back and fourth between slides.\nThese figures also complement each other in the sense that the choropleth highlights small differences due to the colorscale not starting at zero and the bar chart shows the actual size of the differences since each bar starts from zero."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#plots-can-also-be-concatenated-horizontally",
    "href": "modules/module6/slides/module6_05.html#plots-can-also-be-concatenated-horizontally",
    "title": "Figure Composition",
    "section": "Plots can also be concatenated horizontally",
    "text": "Plots can also be concatenated horizontally\n\n# alt.hconcat(choropleth, bars)\nchoropleth.properties(width=250) | bars.properties(width=400)\n\n\n\n\n\n\n\n\nTo place plots in a panel stacked horizontally instead of vertically, we can use the pipe (|) operator.\nWe could also have used the alt.hconcat(choropleth, points_on_map), but again, using the operator is a bit more efficient.\nWe have to shrink the plot widths a bit to fit them on this slide. This makes it hard to read the bar chart x-labels so a horizontal layout is not as good as a vertical layout for this particular figure.\nIn general, whether to choose a horizontal or vertical layout depends on the available space you have for the figure. For example, in this lecture material we’re limited by the size of the slides and have to adjust our figure layouts to work well within this space.\nNote where the color legend for the plots get placed when we do this; it is placed to the right of both plots."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#vertical-and-horizontal-concatenation-can-be-combined",
    "href": "modules/module6/slides/module6_05.html#vertical-and-horizontal-concatenation-can-be-combined",
    "title": "Figure Composition",
    "section": "Vertical and horizontal concatenation can be combined",
    "text": "Vertical and horizontal concatenation can be combined\n\nus_map = (alt.Chart(state_map).mark_geoshape(color='lightgray', stroke='white')\n          .project(type='albersUsa'))\npoints = (alt.Chart(state_pop).mark_circle().encode(\n    longitude='longitude',\n    latitude='latitude',\n    size=alt.Size('number_of_asthma_cases', title='Total asthma case', scale=alt.Scale(range=(2,100))))\n    .properties(width=240, height=100))\n\nchoropleth_small = choropleth.properties(width=240, height=100)\nchoropleth_small | us_map + points & bars\n\n\n\n\n\n\n\n\nOften we want to create more complex figure layouts where visualizations are stacked both horizontally and vertically. Such layouts allow us to present connected, or related information near to one another, and can be useful if there is a key comparison we want to make between multiple visualizations.\nYes, we could always place each visualization on its own slide or page (when sharing figures on paper), however, our working memories are only so good. We often forget key details about visualizations we just saw when it is removed and we are presented with a new one.\nIn Altair, we can create the figure layout by combining the vertical and the horizontal concatenation operators.\nIn this slide, we create a pointmap to indicate the total amount of asthma cases in each state, and adjust the size range of the circles to avoid them overlapping on the map.\nNow we would like to place the barplot under the two maps by using the & operator, but as we can see in this slide, this places the barplot under only the rightmost map. Why is that?"
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#parentheses-can-be-used-to-indicate-groupings-in-complex-layouts",
    "href": "modules/module6/slides/module6_05.html#parentheses-can-be-used-to-indicate-groupings-in-complex-layouts",
    "title": "Figure Composition",
    "section": "Parentheses can be used to indicate groupings in complex layouts",
    "text": "Parentheses can be used to indicate groupings in complex layouts\n\n(choropleth_small | (us_map + points)) & bars\n\n\n\n\n\n\n\n\nThe reason that the plot in the previous slide did not look like we wanted it to, was that the & operator has higher priority than | operator.\nThe resulted in the choropleth and barplot being vertically concatenated before the point map was horizontally concatenated.\nWhat we really want is the horizontal concatenation between the maps to occur first, followed by the vertical concatenation of the barplot.\nJust as we use parentheses in mathematics to change the default order of mathematical operations, we can use parentheses to change the default order of concatenation operations.\nYou can see an example of that in this slide, where we place the parentheses around different parts of the expression to force the horizontal concatenation between the maps to occur first, and that leads us to get the barplot to show up below both the maps as desired.\nWe also add a parenthesis around the two charts that we are layering together, to make it clear which objects the + operator is operating on."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#redundant-colouring-can-make-it-clearer-which-charts-represent-the-same-values",
    "href": "modules/module6/slides/module6_05.html#redundant-colouring-can-make-it-clearer-which-charts-represent-the-same-values",
    "title": "Figure Composition",
    "section": "Redundant colouring can make it clearer which charts represent the same values",
    "text": "Redundant colouring can make it clearer which charts represent the same values\n\n(choropleth_small | (us_map + points)) & bars.encode(color='asthma_cases_per_capita')\n\n\n\n\n\n\n\n\nTo make it clearer that the bars and the choropleth map both represent the asthma cases, we could add redundant colouring to the bars.\nNow it is clear that the bars are the same as the choropleth and separate from the pointmap, whereas they has the same blue colour as the pointmap in the previous slide which could be confusing.\nWe still had the y-axis label correctly indicating what the bars represented in the previous slide so this redundant colouring is not strictly necessary, but it can help to remove ambiguity from your figures, particularly as they get more complex."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#titles-can-be-added-to-each-chart-in-the-layout-to-clarify-what-they-represent",
    "href": "modules/module6/slides/module6_05.html#titles-can-be-added-to-each-chart-in-the-layout-to-clarify-what-they-represent",
    "title": "Figure Composition",
    "section": "Titles can be added to each chart in the layout to clarify what they represent",
    "text": "Titles can be added to each chart in the layout to clarify what they represent\n\nchoropleth_with_title = choropleth_small.properties(title='Asthma cases per capita')\npointmap_with_title = (us_map + points).properties(title='Total ashtma cases')\nbars_with_title = (bars.encode(color='asthma_cases_per_capita').properties(title='Asthma cases per capita'))\nfigure_panel = (choropleth_with_title | pointmap_with_title) & bars_with_title\nfigure_panel_title = alt.TitleParams(text='Asthma cases among US states', dx=200)\nfigure_panel.properties(title=figure_panel_title)\n\n\n\n\n\n\n\n\nTo make our visualization easier to interpret, we can add descriptive titles. These are often particularly important when we create more complex figures since there are now several panels within each figure to keep track of.\nIf we have already taken steps to reduce the ambiguity of the charts in our figure (as we did in the previous slides), we might not need a title for each chart in the figure, but when in doubt it is better to add one title too many than one too few.\nWe should at least add an overall title to the figure as we learned in previous modules. Here we use dx to center this figure over the charts in the figure, rather than having it to the left or centered over the entire charts + legends.\nWe here make the overall title more general, but could also have highlighted a specific take home message, such as that there is no clear geographical distribution of asthma cases or that the relative differences between most states is rather small. Which title we chose would depend on the narrative we are building with the figure."
  },
  {
    "objectID": "modules/module7/module7-00-module_learning_outcomes.html",
    "href": "modules/module7/module7-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module7/module7-02-true_or_false_getting_truthful_with_interactivity.html",
    "href": "modules/module7/module7-02-true_or_false_getting_truthful_with_interactivity.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now look at the penguins data set again and see whether species differences in body shape also relates to species differences in culmen shape.\nWhich penguins are more abundant? Are there penguins that have a greater flipper length (flipper_length_mm) but with a smaller body mass (body_mass_g)? Does the mass of a penguin have a relationship to its flipper length?\nLet’s take a look!\n\n\n\n\n\n\nThe first scatter plot should show body mass (y-axis) vs flipper length (x-axis) and be named linked_scatter. Colour the points be species. The second plot should show culmen depth (y-axis) vs culmen length (x-axis) - this second scatter plot can be created by just overwriting the encoding of the first. Horizontally concatenate these two scatter plots.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished: - Create a selection interval and save it in an object named brush. - Create a scatter plot thats maps body mass on the y axis and flipper length on the x-axis. Map species to the colour channel and save this plot in an object named linked_scatter.  - In a second plot using linked_scatter as a base, map the culmen length (x-axis) by culmen depth (y-axis) and display them on top of each other by saving them in an object called together_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you creating a selection interval using alt.selection_interval()\nAre you using the data penguins_df to create linked_scatter?\nAre you plotting body_mass_g on the x-axis in linked_scatter?\nAre you setting the selection interval as an argument in condition?\nAre you setting brush in add_selection?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-02-true_or_false_getting_truthful_with_interactivity.html#your-first-interactive-plot",
    "href": "modules/module7/module7-02-true_or_false_getting_truthful_with_interactivity.html#your-first-interactive-plot",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now look at the penguins data set again and see whether species differences in body shape also relates to species differences in culmen shape.\nWhich penguins are more abundant? Are there penguins that have a greater flipper length (flipper_length_mm) but with a smaller body mass (body_mass_g)? Does the mass of a penguin have a relationship to its flipper length?\nLet’s take a look!\n\n\n\n\n\n\nThe first scatter plot should show body mass (y-axis) vs flipper length (x-axis) and be named linked_scatter. Colour the points be species. The second plot should show culmen depth (y-axis) vs culmen length (x-axis) - this second scatter plot can be created by just overwriting the encoding of the first. Horizontally concatenate these two scatter plots.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished: - Create a selection interval and save it in an object named brush. - Create a scatter plot thats maps body mass on the y axis and flipper length on the x-axis. Map species to the colour channel and save this plot in an object named linked_scatter.  - In a second plot using linked_scatter as a base, map the culmen length (x-axis) by culmen depth (y-axis) and display them on top of each other by saving them in an object called together_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you creating a selection interval using alt.selection_interval()\nAre you using the data penguins_df to create linked_scatter?\nAre you plotting body_mass_g on the x-axis in linked_scatter?\nAre you setting the selection interval as an argument in condition?\nAre you setting brush in add_selection?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-04-true_or_false_selecting_correctly.html#true-or-false-selecting-correctly",
    "href": "modules/module7/module7-04-true_or_false_selecting_correctly.html#true-or-false-selecting-correctly",
    "title": "2.1. Exercises",
    "section": "True or False: Selecting Correctly",
    "text": "True or False: Selecting Correctly",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-04-true_or_false_selecting_correctly.html#multi-select-for-multiple-choice-questions",
    "href": "modules/module7/module7-04-true_or_false_selecting_correctly.html#multi-select-for-multiple-choice-questions",
    "title": "2.1. Exercises",
    "section": "Multi-Select for Multiple Choice Questions",
    "text": "Multi-Select for Multiple Choice Questions",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-04-true_or_false_selecting_correctly.html#clicks-not-cliques",
    "href": "modules/module7/module7-04-true_or_false_selecting_correctly.html#clicks-not-cliques",
    "title": "2.1. Exercises",
    "section": "Clicks not Cliques",
    "text": "Clicks not Cliques\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now look at the penguins data set again and see how the Penguins of each species were studied on each island.\nLet’s take a look!\n\n\n\n\n\n\nCreate a grouped, horizontal bar chart where the number of penguins on each island is plotted for each species. You are aiming to have a plot that looks like you have 3 subplots, where each subplot is for each species. Add interactivity, so that you can select which island to highlight on the bar chart by clicking the legend.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nCreate a multiple selection tool that binds to the legend selecting the observations from the columns island. Name this object click.\nIn a horizontal bar plot named click_legend, map the counts of penguins on the x-axis and the island the penguins were onserved on the y axis. Make sure to sort the islands by increasing count values.\nColor the points by island and facet the plot by species using .Row().\nAdd a condition to the opacity channel that depends on the selection tool click giving an opacity of 0.9 if selected and 0.2 if not.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting fields=['island'] and binding to legend in the click selection tool?\nAre you setting sort='x' in the alt.Y() function?\nAre you plotting body_mass_g on the x-axis in linked_scatter?\nAre you setting the island to the colour channel??\nAre you setting alt.condition(click, alt.value(0.9), alt.value(0.2))?\nAre you remembering to call click in .add_selection() at the end of the plot?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-06-true_or_false_controls.html#true-or-false-controls",
    "href": "modules/module7/module7-06-true_or_false_controls.html#true-or-false-controls",
    "title": "3.1. Exercises",
    "section": "True or False: Controls",
    "text": "True or False: Controls",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-06-true_or_false_controls.html#minimap-multi-choice",
    "href": "modules/module7/module7-06-true_or_false_controls.html#minimap-multi-choice",
    "title": "3.1. Exercises",
    "section": "Minimap Multi-Choice",
    "text": "Minimap Multi-Choice",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/module7-06-true_or_false_controls.html#slipping-and-sliding-penguins",
    "href": "modules/module7/module7-06-true_or_false_controls.html#slipping-and-sliding-penguins",
    "title": "3.1. Exercises",
    "section": "Slipping and Sliding Penguins",
    "text": "Slipping and Sliding Penguins\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now look at the penguins data set again and see how the Penguins of each species were studied on each island.\nLet’s take a look!\n\n\n\n\n\n\nCreate a scatter plot from the Penguins data set that visualizes culmen depth (y-axis) vs culmen length (x-axis).\nTasks:\nFill in the blanks in the code below so that the following gets accomplished:\n\nCreate a scatter plot named slider_scatter that maps culmen length on the x-axis and culmen depth on the y-axis.\nColour the points by species.\nAdd a slider assigned to an object slider that allows you to set a threshold so that you can highlight the observations where the penguins body mass (in grams) is under the threshold specified by the slider and set the maximum slider value to the maximum value found in the body mass column. Name the slider “Body mass (g)”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.binding_range() to build your sliding tool?\nAre you setting the max of the slider to max=max(penguins_df['body_mass_g']) ?\nAre you using selection_single to make select_rating?\nAre you binding the selection_single to slider?\nAre you setting alt.datum.body_mass_g &lt; select_rating.body_mass_g as your expression in alt.condition()?\nAre you calling select_rating in .add_selection()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M7. Chart Interactivity**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module7/slides/module7_00.html#module-learning-outcomes",
    "href": "modules/module7/slides/module7_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nCreate selections within a chart.\nLink selections between chart to highlight and filter data.\nUse widgets to drive chart selections.\nShare interactive visualizations without running a full Python dashboard."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#selections-can-be-triggered-on-clicks-instead-of-dragging-with-the-mouse",
    "href": "modules/module7/slides/module7_03.html#selections-can-be-triggered-on-clicks-instead-of-dragging-with-the-mouse",
    "title": "Advanced Selections",
    "section": "Selections can be triggered on clicks instead of dragging with the mouse",
    "text": "Selections can be triggered on clicks instead of dragging with the mouse\n\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars()\nclick = alt.selection_multi()\nbars = (alt.Chart(cars).mark_bar().encode(\n    alt.X('count()', title='Number of cars'),\n    alt.Y('Origin', title='Region'),\n    alt.Color('Origin', title=None),\n    opacity=alt.condition(click, alt.value(0.9), alt.value(0.2)))\n.add_selection(click)).properties(width=300)\n\nbars\n\n\n\n\n\n\n\n\nTo demonstrate the functionality in this slide deck, we will continue to work with the car dataset from the previous deck.\nWhen creating certain visualizations, such as bar charts and maps, it is often more intuitive to be able to click the objects to highlight or select them, rather than dragging with the cursor to select an area.\nIn this slide we use selection_multi to create a selection based on what we click with our cursor If we hold the shift key, we can select multiple items.\nIf you do not want to allow for multiple selection in your visualization, you can instead opt to use selection_single instead of selection_multi.\nHere, we named our alt.selection_multi() object click, and linked it to a visible change in the chart, by passing it inside alt.condition to the opacity parameter.\nThis has the effect that when an object is clicked on, that object gets a high opacity value, and the objects that are not clicked on get a low opacity value.\nIn the last slide deck we used the colour instead of the opacity parameter with alt.condition when we used a selection interval to highlight points in our charts.\nWe could have also used opacity there as well and whether we change the colour or opacity on selection is mostly an aesthetic choice.\nIn this slide, we have assigned the chart to a variable name because we will reuse it in several later slides in this slide deck."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#combining-charts-with-different-selections",
    "href": "modules/module7/slides/module7_03.html#combining-charts-with-different-selections",
    "title": "Advanced Selections",
    "section": "Combining charts with different selections",
    "text": "Combining charts with different selections\n\nbrush = alt.selection_interval()\npoints = (alt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower', title='Enging power (hp)'),\n    alt.Y('Miles_per_Gallon', title='Fuel efficiency (miles / gal)'),\n    color=alt.condition(brush, 'Origin', alt.value('lightgray')))\n.add_selection(brush)).properties(width=300, height=200)\n\npoints & bars\n\n\n\n\n\n\n\n\nTo add two charts together, we can use what we learned previously about Altair’s layout operators. To concatenate the bar chart and scatterplot vertically, we’re here using the & operator.\nWhen we linked the two scatterplots together in the previous slide deck, we simply added the selection, without the need to specify which fields to use, why can’t we do that hear?\nThe reason this worked was because both those plots had one point for each observation in the data, so that we selected a point in one of the scatterplots the corresponding point for that same observation could automatically be highlighted in the other scatterplot.\nThe bar chart in this slide is made from counting the observations in the raw data and then drawing exactly three bars, one per region of origin. Since the individual observations do not exist in the bar chart it is impossible to automatically link the two charts together.\nIt could be very useful to create a linked selection between these charts, so that when we select a region of origin in the bar chart the points in the scatter plot that are from the same origin would be highlighted.\nThis way we could study observations from each Origin separately, so how can we perform this linkage in Altair?"
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#linking-selections-from-separate-charts-requires-explicit-columns-to-select-on",
    "href": "modules/module7/slides/module7_03.html#linking-selections-from-separate-charts-requires-explicit-columns-to-select-on",
    "title": "Advanced Selections",
    "section": "Linking selections from separate charts requires explicit columns to select on",
    "text": "Linking selections from separate charts requires explicit columns to select on\n\nclick = alt.selection_multi(fields=['Origin'])\nbars = bars.add_selection(click)\npoints = points.encode(opacity=alt.condition(click, alt.value(0.9), alt.value(0.2)))\n\npoints & bars\n\n\n\n\n\n\n\n\nTo link the three bars to the individual observations in the scatter plot, we need to be explicit about what should happen when a selection is made.\nFor example, to link a click of a bar to a selection in the scatterplot, we need to say which column in the dataframe should be used to select on.\nIn this case, \"Origin\" is the column that we want to use for the selection, as it is the common encoding between both charts.\nIf there were two or more data frame columns that were common encodings in both charts, then you would select the one that made more sense for the question you were asking.\nTo successfully link this selection we need to do three things: 1. Create a new selection that specifies which columns should be used for selections (the fields parameter). 2. Add this new selection to the bar plot 3. Add an encoding to the scatterplot that depends on the new click selections. Here we use opacity. Now that we click the bars the opacity of the corresponding points changes as we would expect!\nNote that we can still click and drag in the scatterplot since our brush selection is unchanged from before.\nThe same principles that we showed here can be applied to create a linked selection from the scatterplot to the barchart, which we will see an example of in a few slides."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#a-selection-can-be-bound-to-the-legend-instead-of-a-particular-chart",
    "href": "modules/module7/slides/module7_03.html#a-selection-can-be-bound-to-the-legend-instead-of-a-particular-chart",
    "title": "Advanced Selections",
    "section": "A selection can be bound to the legend instead of a particular chart",
    "text": "A selection can be bound to the legend instead of a particular chart\n\nclick_legend = alt.selection_multi(fields=['Origin'], bind='legend')\npoints = points.encode(opacity=alt.condition(click_legend, alt.value(0.9), alt.value(0.2)))\n\npoints.add_selection(click_legend)\n\n\n\n\n\n\n\n\nWe don’t always have a bar chart to drive the selections from. What if we only create a scatterplot, but still want to be able to select data from different origins?\nInstead of using a separate chart, we could use the legend to make the selections. We can tell Altair that we want to make the legend interactive, by binding selection_multi to it.\nWe then need to link this new selection to the points opacity encoding and add it to the plot.\nNow if you click the legend, it will select the corresponding observations in the scatterplot!"
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#legend-selections-can-be-added-to-multiple-charts",
    "href": "modules/module7/slides/module7_03.html#legend-selections-can-be-added-to-multiple-charts",
    "title": "Advanced Selections",
    "section": "Legend selections can be added to multiple charts",
    "text": "Legend selections can be added to multiple charts\n\nbars = bars.encode(opacity=alt.condition(click_legend, alt.value(0.9), alt.value(0.2)))\n(points & bars).add_selection(click_legend) \n\n\n\n\n\n\n\n\nThe syntax for linking legend interactivity to a layout of charts is the same as to a single chart, but we need to add the selection to both charts since the legend belongs to both of them.\nWe could do this one by one, or both at once as we do in this slide, and there is no difference in choosing one approach over the other."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#instead-of-highlighting-a-selection-can-be-used-for-filtering-data",
    "href": "modules/module7/slides/module7_03.html#instead-of-highlighting-a-selection-can-be-used-for-filtering-data",
    "title": "Advanced Selections",
    "section": "Instead of highlighting, a selection can be used for filtering data",
    "text": "Instead of highlighting, a selection can be used for filtering data\n\nbars = bars.transform_filter(brush)\n(points & bars).add_selection(click_legend) \n\n\n\n\n\n\n\n\nSo far we have seen how to change graphical encodings such as color and opacity to highlight observations or groups of observations. Another useful type of interactivity is to actually filter the data based on a selection, rather than just styling the chart appearance.\nFor example, we may use a brush selection on a scatter plot to highlight particular observations, and then wonder how many observations are in our brushed selection for each region? To answer this question, we can change the bar chart to update dynamically as we select points in the scatterplot!\nTransform filters can filter data similarly to what we might do in pandas and are often referred to as “dynamic queries”. Note that but this type of filtering is best used in this kind of interactive setting, as it is not as powerful as the filtering available to you via pandas.\nSince we have conditions in the charts’ encodings that depend on the legend_click selection variable, we need to also add this selection to the charts to avoid an error, even if it is not the focus of what we are learning in this slide.\nNow that we have select points by dragging in the scatter plot we can see that the barchart updates the count to reflect the number of points we have selected of each color, neat!"
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#fixing-the-extent-of-the-x-axis-makes-the-bars-easier-to-compare",
    "href": "modules/module7/slides/module7_03.html#fixing-the-extent-of-the-x-axis-makes-the-bars-easier-to-compare",
    "title": "Advanced Selections",
    "section": "Fixing the extent of the x-axis makes the bars easier to compare",
    "text": "Fixing the extent of the x-axis makes the bars easier to compare\n\nbar_chart_max = cars.groupby('Origin').size().max()\nbars = bars.encode(alt.X('count()', scale=alt.Scale(domain=[0, bar_chart_max])))\n(points & bars).add_selection(click_legend) \n\n\n\n\n\n\n\n\nIt is a bit non-intuitive that the x-axis keep changing its extent as we select different number of points, and it makes the bar heights harder to compare as we move the selection around. Ideally only the bars would change length, but the axis would stay the same.\nIn this slide we calculate the max number of cars from any region and then use this number to fix the extent of the x-axis. Now that we select in the scatterplot, only the lengths of the bars changes, but the range of the axis remains the same.\nIt is a bit unintuitive that the x-axis keeps changing its range as we make brush selections that contain different numbers of observations.\nThis also makes the bar heights harder to compare as we move the selection around. Ideally only the bars would change length, but the axis would stay the same.\nTo fix this, we here calculate the maximum number of cars from any region and then use this number to set the range of the x-axis. After doing this, brush selections of observations in the scatterplot, only change the lengths of the bars, while the range of the x-axis remains the same."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#interactive-features-work-with-all-charts",
    "href": "modules/module7/slides/module7_03.html#interactive-features-work-with-all-charts",
    "title": "Advanced Selections",
    "section": "Interactive features work with all charts",
    "text": "Interactive features work with all charts\n\nimport pandas as pd\n\nstate_map = alt.topo_feature(data.us_10m.url, \"states\")\nstate_pop = pd.read_csv(\"data/us_population_coordinates_asthma-cases.csv\")\nstate_pop[\"asthma_cases_per_capita\"] = (\n    state_pop[\"number_of_asthma_cases\"] / state_pop[\"population\"]\n)\n\nhover = alt.selection_single(fields=[\"state\"], on=\"mouseover\")\nchoropleth = (\n    alt.Chart(state_map)\n    .mark_geoshape()\n    .transform_lookup(\n        lookup=\"id\",\n        from_=alt.LookupData(state_pop, \"id\", [\"number_of_asthma_cases\", \"state\"]),\n    )\n    .encode(\n        color=alt.Color(\"number_of_asthma_cases:Q\", title=\"Asthma cases\"),\n        opacity=alt.condition(hover, alt.value(1), alt.value(0.1)),\n        tooltip=[\n            \"state:N\",\n            alt.Tooltip(\"number_of_asthma_cases:Q\", title=\"Asthma cases\"),\n        ],\n    )\n    .add_selection(hover)\n    .project(type=\"albersUsa\")\n    .properties(height=150, width=300)\n)\nchoropleth\n\n\n\n\n\n\n\n\nSelections work with all types of charts in Altair. In this slide we have recreated one of the maps we made in module 6, which communicates the number of asthma cases per state as a choropleth map.\nWe have added interactivity to this map in the form of a helpful tooltip that shows which state we are hovering over as well as the exact number of asthma cases in that state, which would be hard to read out precisely from the color mapping alone.\nWe used alt.Tooltip to change the title in the tooltip, just as when we change the title of an axis or legend.\nWe also added a selection_single interaction, but instead of binding it to cursor clicks (the default), we bound it to 'mouseover', which is when we are hovering over a state with our cursor.\nIn this slide we can use this interaction to highlight a particular state in the choropleth map and in the next slide we will see how we can also link it to another chart.\nNote that we set the dimensions of the plot to fit on the slide."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#linking-a-map-selection-to-another-chart",
    "href": "modules/module7/slides/module7_03.html#linking-a-map-selection-to-another-chart",
    "title": "Advanced Selections",
    "section": "Linking a map selection to another chart",
    "text": "Linking a map selection to another chart\n\npoints = (alt.Chart(state_pop).mark_circle(size=70).encode(\n    alt.X('asthma_cases_per_capita', title='Asthma cases / capita', scale=alt.Scale(zero=False)),\n    alt.Y('number_of_asthma_cases', title='Asthma cases'),\n    stroke=alt.condition(hover, alt.value('black'), alt.value('#ffffff')),\n    color='number_of_asthma_cases')).properties(height=150, width=300)\nchoropleth & points\n\n\n\n\n\n\n\n\nTo link an interaction on a map to another chart, we use the same logic as we did in previous slides for linking the barchart and scatterplot.\nHere we create a separate scatterplot where the stroke color (outline) of each points depends on whether we have selected that state on the map or not.\nBy default all states on the map are selected so all the points have a black outline. As we hover over a state in the map, the outline changes to white for the points whose states are not selected in the map.\nUsing the map to identify states can be more helpful than just adding a tooltip to the scatterplot since we might already have an intuition for where different states are located on the map and don’t have to go through each of the point’s tooltip looking for the state name of interest."
  },
  {
    "objectID": "modules/module7/slides/module7_03.html#two-way-interactivity-between-the-map-and-scatter-plot",
    "href": "modules/module7/slides/module7_03.html#two-way-interactivity-between-the-map-and-scatter-plot",
    "title": "Advanced Selections",
    "section": "Two way interactivity between the map and scatter plot",
    "text": "Two way interactivity between the map and scatter plot\n\nchoropleth & points.encode(tooltip='state').add_selection(hover)\n\n\n\n\n\n\n\n\nLinking the interactive elements from the map to the points begs the question of how we could link interaction the other way and control the map from the points.\nIn the case of our visualization, it could be helpful to show a tooltip of each state’s name and highlight the corresponding state on the map when hovering over the a point.\nIn this slide we add the same hover selection to the scatterplot. We don’t need to change the encoded dataframe columns since the opacity is already set to change when we use the hover object, regardless of whether it is used on the map or on the scatter plot.\nAs you can see, Altair’s grammar remains consistent between different types of plots, such as scatterplots, maps, and barcharts. This allows us to build on the same principles we learned earlier and expand our grammar of interactivity no matter which plots we work with."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#charts-are-easily-saved-as-html-files",
    "href": "modules/module7/slides/module7_07.html#charts-are-easily-saved-as-html-files",
    "title": "Sharing Altair Visualization",
    "section": "Charts are easily saved as HTML files",
    "text": "Charts are easily saved as HTML files\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\nchart = alt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower:Q'),\n    alt.Y('Miles_per_Gallon:Q'))\n\nchart.save('cars-scatterplot.html')\n\nThe easiest way to save Altair charts is as an HTML document via the save method. That is what we demonstrate here in this slide.\nAn HTML file then can either be incorporated in a web page or sent to anyone via email. When someone opens an HTML file containing an Altair chart in a web browser they will see the visualization, including any interactivity you have used!\nThis is all you need to know for sharing your visualizations to be viewed on a computer with others outside of Jupyter, but read on for more technical details about how this works and how you can save to other formats than HTML.\nOther formats than HTML can be important when you want to share the visualization on a paper medium as opposed to in a digital environment."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#how-are-altair-visualization-rendered",
    "href": "modules/module7/slides/module7_07.html#how-are-altair-visualization-rendered",
    "title": "Sharing Altair Visualization",
    "section": "How are Altair visualization rendered?",
    "text": "How are Altair visualization rendered?\n\nAltair does not create images to represent charts\nInstead if create Vega-Lite code\nYour browser knows how to render Vega-Lite code as graphics\n\n\nIt might surprise you that it is easier to save as an HTML document than an image file in PNG or JPG format. After all, plots are images aren’t they?\nTo understand this, let’s look into how Altair visualizations are constructed.\nIn the beginning we mentioned that Altair uses the JavaScript library Vega-Lite to generate its visualizations. This is great because we get access to many interactive features that build on web technologies such as JavaScript and HTML, and our visualizations can easily be incorporated in online contexts.\nThis also means that what Altair does under the hood is not to generate an image of the visualization, but the Vega-Lite code required to construct the chart.\nThis is similar to how graphical elements work on webpages. All the buttons, banners, etc that you see when you go to a web page are not images but HTML code that your browser can convert into a graphical elements such as buttons.\nVega-Lite code is rendered in a similar way. Modern browsers know how to draw graphical elements from the Vega-Lite code, so we never need to create any images.\nSo what does this Vega-Lite code look like?"
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#the-vega-lite-json-specification-for-charts",
    "href": "modules/module7/slides/module7_07.html#the-vega-lite-json-specification-for-charts",
    "title": "Sharing Altair Visualization",
    "section": "The Vega-Lite JSON specification for charts",
    "text": "The Vega-Lite JSON specification for charts\nprint(chart.to_json())\n{\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 400\n    }\n  },\n  \"data\": {\n    \"url\": \"https://vega.github.io/vega-datasets/data/cars.json\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"Horsepower\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"Miles_per_Gallon\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": \"circle\"\n}\nOpen the Chart in the Vega Editor\n\nInstead of creating a new programming language to store its code, Vega-Lite uses the established JSON file format.\nJSON is already widely used on the web as a storage format for text data, so this approach means that Vega-Lite does not need to reinvent the wheel. Instead, there are rules for which words are allows to appear in the JSON file for it to be valid Vega-Lite code, which is referred to as the “specification” (or “spec” for short).\nYou can see an example of how this looks for an Altair visualization by using the to_json method as we have done in this slide.\nYou can see that the words are the same we use in Altair, but the format of the JSON specification is a bit more verbose than the Altair syntax.\nYou can paste this JSON directly into Vega-Lite online editor and you will see that it renders correctly. We included a link for this in the slide that you can try.\nYou can also click the three dot action button and select the “Open in Vega Editor” entry to achieve the same result, try it out!"
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#the-json-spec-is-part-of-the-saves-html-file",
    "href": "modules/module7/slides/module7_07.html#the-json-spec-is-part-of-the-saves-html-file",
    "title": "Sharing Altair Visualization",
    "section": "The JSON spec is part of the saves HTML file",
    "text": "The JSON spec is part of the saves HTML file\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    .error {\n        color: red;\n    }\n  &lt;/style&gt;\n  &lt;script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm//vega@5\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm//vega-embed@6\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"vis\"&gt;&lt;/div&gt;\n  &lt;script&gt;\n    (function(vegaEmbed) {\n      var spec = {\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/cars.json\"}, \"mark\": \"circle\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"Horsepower\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"Miles_per_Gallon\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"};\n...\n\nIf you look at the HTML file we saved in the previous step you will see that the JSON spec from the previous slide is included as you can see in this slide.\nAlso included is some additional code that tells your browser to use Vega-Lite’s web libraries to render this JSON spec.\nWe cut the HTML off here to fit it on the slide, but if you open the file you will see that there is also a section on how to emit error messages."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#charts-can-be-rendered-offline",
    "href": "modules/module7/slides/module7_07.html#charts-can-be-rendered-offline",
    "title": "Sharing Altair Visualization",
    "section": "Charts can be rendered offline",
    "text": "Charts can be rendered offline\n\nLink to install the offline Vega-Lite extension in JupyterLab\nCode to include a fallback image representation of your chart for offline rendering:\n\nalt.renderers.enable(\"mimetype\")\n\nThis does not change how your chart appears, it only includes a an image-representation of the chart which is saved as a string of characters in the notebook.\n\n\nGiven that displaying the JSON spec correctly depends on a the Vega-Lite web libraries, our charts will only render if we have an internet connection.\nIf you are working offline and want to render charts in JupyterLab, there are a few different options.\nIf you want interactive chart elements to work, you need to install a JupyterLab extension that downloads the the Vega-Lite rendering library to your machine. The steps for installing this extension are outlined in the Altair documentation\nIf you are happy with seeing a static version of your charts when you are offline, you could instruct Altair to use the Vega-Lite libraries only if there is an active internet connection and otherwise use and image for the plot.\nTo do this, you can include the code from this slide on top of your notebook, just after your import statements. This will not cause any changes to the appearance of your chart."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#what-if-we-want-to-save-our-charts-as-images-instead",
    "href": "modules/module7/slides/module7_07.html#what-if-we-want-to-save-our-charts-as-images-instead",
    "title": "Sharing Altair Visualization",
    "section": "What if we want to save our charts as images instead?",
    "text": "What if we want to save our charts as images instead?\n\nThe three dots action button can be used to save charts as PNG or SVG manually.\nCharts can also be saved programmatically via the same syntax as before, e.g. chart.save('my-chart.pdf')\n\n\nIf we want to save a chart as a PNG or SVG file we can use the three dot action button as we saw in the very first module of this course. When we are clicking the “Save as PNG” entry in this menu, the browser converts the Vega-Lite spec into a PNG image that is downloaded to our computer.\nIf we want to save charts programmatically as either PNG, SVG, or PDF we need to use a helper package called vl-convert. This package let’s Altair access the save functionality of the browser in a similar way as when you click the thee dot action button.\nMore details on how to save charts and install vl-convert can be found in the Altair documentation."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#what-is-the-difference-between-saving-in-different-formats",
    "href": "modules/module7/slides/module7_07.html#what-is-the-difference-between-saving-in-different-formats",
    "title": "Sharing Altair Visualization",
    "section": "What is the difference between saving in different formats?",
    "text": "What is the difference between saving in different formats?\n\nPNG is a bitmap/raster format\n\nUse to store data in a fixed grid of pixels\nGood for photos and complex illustrations\nZooming in causes the image to become blurry/pixelated\nThe file size depends on the number of pixels\n\nSVG and PDF are a scalable graphics / vector formats\n\nStores data as text with mathematical formulas\nGood for simpler illustration\nZooming in retains perfect quality\nThe file size depends on the number of objects and their complexity\n\n\n\nIn additional to saving as PNG, we could also have saved as SVG or PDF by changing the file extension accordingly.\nWhat is the difference between these two options? PNG is a bitmap/raster format - Stores data in a grid of pixels of different colors - Zooming in causes the image to become blurry/pixelated - The file size depends on the number of pixels - Often ideal for photos and complex illustrations SVG and PDF are scalable graphics / vector formats - Stores data as text by describing objects with mathematical formulas - Zooming in retains perfect quality - The file size depends on the number of objects and their complexity - Often ideal for simpler illustration such as most charts Saving as HTML has similar advantages and disadvantages as SVG. In fact HTML uses SVG for creating the graphics."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#working-with-large-datasets",
    "href": "modules/module7/slides/module7_07.html#working-with-large-datasets",
    "title": "Sharing Altair Visualization",
    "section": "Working with large datasets",
    "text": "Working with large datasets\nprint(chart.to_json())\n{\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 400\n    }\n  },\n  \"data\": {\n    \"url\": \"https://vega.github.io/vega-datasets/data/cars.json\"\n  },\n  \"encoding\": {\n    \"x\": {\n      \"field\": \"Horsepower\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"Miles_per_Gallon\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": \"circle\"\n}\nView spec with the full data instead of the URL in the Vega Editor\n\nNow that we know how Altair creates charts, we can also understand why there is an issue with large datasets.\nYou can see the JSON chart spec printed in this slide again. Note that the data here is just a string value pointing to a URL because we used data.cars.url to create the chart.\nIf we had used a pandas dataframe (e.g. data.cars()) to create the chart (instead of a URL) all the data would be included in the chart specification.\nThis means that there would be almost 4500 lines of code in the JSON spec! Vega-Lite can handle this large files without issues, but is not enough room to show that in this slide. If you want to see how it you can click the link under the code in this slide."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#including-large-data-sets-in-chart",
    "href": "modules/module7/slides/module7_07.html#including-large-data-sets-in-chart",
    "title": "Sharing Altair Visualization",
    "section": "Including large data sets in chart",
    "text": "Including large data sets in chart\nWarning when plotting &gt; 5000 rows:\nMaxRowsError: The number of rows in your dataset is greater than the maximum\n              allowed (5000). For information on how to plot larger datasets\n              in Altair, see the documentation.\nDisable the warning:\nalt.data_transformers.disable_max_rows()\nMore details about how to work with large datasets can be found in the docs\n\nIncluding all the data is great for reproducibility and it works well with small to medium sized data. However, with large datasets the size of each chart would become really big, and with many charts in the same notebook the overall file size would be huge.\nTo avoid this happening by mistake Altair shows a warning when you try to plot a dataset with more than 5000 rows. If you are sure you want to plot a dataframe with more rows than that, you can disable the warning with the line of code on the top of this slide.\nHowever, as discussed in the last slide, your charts would still be very big because the data would be included in the spec for the chart. If you would like to avoid creating big plots, you can use a URL as we did in the first slide and in module three.\nAn URL is not always an option, and it is not convenient if you need to do some data wrangling with pandas first.\nIn the next slide we will discuss another way to manage this challenge."
  },
  {
    "objectID": "modules/module7/slides/module7_07.html#working-with-large-datasets-without-including-all-the-data-in-the-chart",
    "href": "modules/module7/slides/module7_07.html#working-with-large-datasets-without-including-all-the-data-in-the-chart",
    "title": "Sharing Altair Visualization",
    "section": "Working with large datasets without including all the data in the chart",
    "text": "Working with large datasets without including all the data in the chart\nUse the data server:\nalt.data_transformers.enable('vegafusion')\nOutput in the spec:\n\"data\": {\n    \"url\": \"http://localhost:21319/4d45d69bbd706eda330e96e79ad4bf46.json\"\n  },\nOptionally you could use the mimtype renderer with the data transformer to show plots without Python running:\nalt.renderers.enable('mimetype')\n\nHere, we’re using alt.data_transformers.enable(‘vegafusion’), which differs from what’s shown in the video. That’s because we’re working with the newer Altair version 5, which no longer supports ‘data_server’. In the video, however, Altair version 4 was used."
  },
  {
    "objectID": "modules/module8/module8-00-congratulations.html",
    "href": "modules/module8/module8-00-congratulations.html",
    "title": "0. Congratulations!",
    "section": "",
    "text": "0. Congratulations!\n\nVideoSlides",
    "crumbs": [
      "**Module Closing Remarks**",
      "0. Congratulations!"
    ]
  }
]