[
  {
    "objectID": "modules/module3/slides/module3_end.html#module-learning-outcomes",
    "href": "modules/module3/slides/module3_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 3",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nSelect an appropriate distribution plot for the data.\nCreate density plots to compare a few distributions.\nCreate boxplots to compare many distributions.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#histograms-can-give-different-results-depending-on-the-data",
    "href": "modules/module3/slides/module3_03.html#histograms-can-give-different-results-depending-on-the-data",
    "title": "Using density plots to visualize distributions",
    "section": "Histograms can give different results depending on the data",
    "text": "Histograms can give different results depending on the data\nFrom scikit-learn\n\n\nHow many observations are counted per bar in a histogram depends on exactly where on the axis the border between the bins are.\nIn the images on this slide, the actual observations are drawn with black tick marks on the bottom and they are the same in both subplots.\nThe reason the histograms look different is that the border between the groups is shifted in the rightmost picture.\nAs we see here, a histogram is not an as unbiased plot as we might think at first, especially not if we have few data points, where the inclusion or exclusion of just a few points makes a big difference for the bar height."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#centering-the-bins-on-the-data-can-help-create-more-accurate-distribution-plots",
    "href": "modules/module3/slides/module3_03.html#centering-the-bins-on-the-data-can-help-create-more-accurate-distribution-plots",
    "title": "Using density plots to visualize distributions",
    "section": "Centering the bins on the data can help create more accurate distribution plots",
    "text": "Centering the bins on the data can help create more accurate distribution plots\n\n\nInstead of setting fixed lines along the axis and then count points fully in one bin or another, we can create bins that are centred on the data and then add the bins together.\nWhen we center bins on the data, we often use bell-shaped bins instead of square ones as in the histogram. This removes noise or spikes in the plotted area, which could arise when using a square bin.\nThese spikes are often not informative for us when trying to get an idea of what the distribution looks like, and a smoother area is more conducive to conveying the overall shape of the data distribution.\nThe bell-shaped bins (also called kernels) are then added together as in the animation in this slide so that they sum up to an overall distribution line. Formally, this is called a “Kernel Density Estimate” (KDE), or just a “density plot”."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#reading-in-the-movies-dataset",
    "href": "modules/module3/slides/module3_03.html#reading-in-the-movies-dataset",
    "title": "Using density plots to visualize distributions",
    "section": "Reading in the movies dataset",
    "text": "Reading in the movies dataset\n\nimport pandas as pd\n\nmovies = pd.read_csv(\"../../data/movies.csv\")\nmovies\n\n\n\n\n\n\n\n\ntitle\nruntime\nbudget\nrevenue\ngenre\ncountry\nvote_average\n\n\n\n\n0\nFinding Nemo\n100\n94000000\n940335536\nAnimation\nUnited States of America\n3.86\n\n\n1\nPirates of the Caribbean: The Curse of the Bla...\n143\n140000000\n655011224\nFantasy\nUnited States of America\n3.81\n\n\n2\nThe Simpsons Movie\n87\n75000000\n527068851\nAnimation\nUnited States of America\n3.44\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n526\nThe Emoji Movie\n86\n50000000\n66913939\nAnimation\nUnited States of America\n0.63\n\n\n527\nA Dog's Purpose\n100\n22000000\n194647323\nFantasy\nUnited States of America\n3.61\n\n\n528\nBatman: The Killing Joke\n72\n3500000\n3775000\nAnimation\nUnited States of America\n2.94\n\n\n\n\n529 rows × 7 columns\n\n\n\n\nWe will continue with the movies dataset in this slide deck, to try to answer the question we posed at the end of the previous chapter: “Are there differences in movie runtimes between genres?”.\nAs we have seen previously, histograms are not effective for this type of comparison between distributions, no matter if they are stacked or layered.\nWe could use faceting to answer this question, but sometimes we want to dedicate the separate facets for another categorical dataframe column, as we will do later in this slide deck.\nWhile row and column-based faceting would be possible, those plots require a lot of space. Here we will instead explore how we can use density plots, to effectively visualize both single and multiple distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#creating-a-density-plot-in-altair-requires-two-step",
    "href": "modules/module3/slides/module3_03.html#creating-a-density-plot-in-altair-requires-two-step",
    "title": "Using density plots to visualize distributions",
    "section": "Creating a density plot in Altair requires two step",
    "text": "Creating a density plot in Altair requires two step\n\nimport altair as alt\n\n(alt.Chart(movies).transform_density(\n    'runtime',\n    # Give a name to the density values, which we can use when plotting\n    as_=['runtime', 'density'])\n .mark_area().encode(\n    x='runtime',\n    y='density:Q'))\n\n\n\n\n\n\n\n\nTo create a density plot, we need to complete two tasks: 1. Place the bell-shaped bins and add them together as in the animation a few slides ago. 2. Plot a line or area mark for the newly calculated sum of bins. In Altair, these operations are done in two explicit steps, using transform_density for the calculation.\nFirst, we specify which dataframe column we want to use for the calculation. Then we use the as_ parameter to name the newly calculated values, which we here refer to as 'density'.\nSince the 'density' values are not part of the pandas dataframe, Altair cannot ask pandas which data type it is. Therefore, we need to add ':Q' to indicate that the density has quantitative values, just as when we specified the data types in module 2.\nWe could also have calculated the sum of the bell-shaped bins as a separate step outside Altair and added it as a new column in our pandas dataframe, but it is more convenient to do both the steps in Altair.\nWe can see that this plot looks similar to the histogram we created in the last slide deck, and we would reach similar conclusions when studying it. Most movies peak around 100 min, but there is great variation all the way from ~25 to ~215 min.\nIn contrast to a histogram, the y-axis of a density plot is not very informative.\nThe definition of a density entails that the area under the curve should sum up to 1, which represents all the observations.\nTherefore the y-axis is simply adjusted based on the values on the x-axis, so that the area equals 1.\nInstead of looking at the y-axis, focus on the shape of the area and the x-axis, those are the more informative in a density plot."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#creating-a-grouped-density-plot-requires-an-explicit-density-grouping",
    "href": "modules/module3/slides/module3_03.html#creating-a-grouped-density-plot-requires-an-explicit-density-grouping",
    "title": "Using density plots to visualize distributions",
    "section": "Creating a grouped density plot requires an explicit density grouping",
    "text": "Creating a grouped density plot requires an explicit density grouping\n\n(alt.Chart(movies).transform_density(\n    'runtime',\n    groupby=['genre'],\n    as_=['runtime', 'density'])\n .mark_area().encode(\n     x='runtime',\n     y=alt.Y('density:Q').stack(False),\n     color='genre'))\n\n\n\n\n\n\n\n\nIf we want to split and colour the densities by a categorical dataframe column, we need to explicitly specify a dataframe column to the groupby parameter when calculating the density.\nSetting this parameter to the same column we use for the colour encoding will compute one density for each of the differently coloured areas. We also need to indicate that we don’t want the densities to be stacked on top of each other by setting stack to False in the Y-channel encoding.\nThis plot effectively conveys the differences between runtimes of movies from different genres.\nNotably, we can see that the peaks are different locations on the x-axis for the three genres. This indicates that the most common movie lengths are different between genres.\nThis difference appears to be around 20 min, but it does not necessarily tell us where the mean and median would fall, since that also depends on where the rest of the values are distributed.\nWe can see that the Animation genre has the highest peak, which means that the values are the most densely packed around the peak in this distribution compared to the others. But we can only see the range of the History distribution, since this is plotted on top of the others.\nLet’s make the areas less opaque so that we can see the range of all the distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#slightly-transparent-areas-reveal-more-details",
    "href": "modules/module3/slides/module3_03.html#slightly-transparent-areas-reveal-more-details",
    "title": "Using density plots to visualize distributions",
    "section": "Slightly transparent areas reveal more details",
    "text": "Slightly transparent areas reveal more details\n\n(alt.Chart(movies).transform_density(\n     'runtime',\n     groupby=['genre'],\n     as_=['runtime', 'density'])\n .mark_area(opacity=0.5).encode(\n     x='runtime',\n     y=alt.Y('density:Q').stack(False),\n     color='genre'))\n\n\n\n\n\n\n\n\nThe density areas don’t suffer the same issues as the histograms when made transparent. The continuous solid shape for each group is easier to follow even when it is semi-transparent and overlaps with the other areas.\nThe transparency gives us the advantage of knowing that there is not small density area completely hiding behind a bigger one and we can also see the range of all the distributions.\nFor example, we can tell that there are some Fantasy movies that are almost as long as the longest History movies, whereas there is not a single Animation movie that is longer than 120 minutes.\nHowever, if we had more distributions to compare, a semi-transparent density plot would become hard to decipher. In such cases, we could either filter the data to plot fewer distributions or facet them vertically as we saw with the histograms previously."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#density-plots-of-small-datasets-can-be-misleading",
    "href": "modules/module3/slides/module3_03.html#density-plots-of-small-datasets-can-be-misleading",
    "title": "Using density plots to visualize distributions",
    "section": "Density plots of small datasets can be misleading",
    "text": "Density plots of small datasets can be misleading\n\ndensity = (alt.Chart(movies[:10]).transform_density(\n    'runtime',\n    as_=['runtime', 'density'])\n .mark_area().encode(\n    x='runtime',\n    y='density:Q'))\ndensity\n\n\n\n\n\n\n\n\nSince density plots don’t show the number of observations, they can be misleading for small data sets where they will still appear smooth as if there were many data points to back up that smoothness.\nWhen looking at this plot, are you be able to tell that the density is made up of just ten observations?\nIn Altair, a hint that a density is made up of few observations is the sharp borders of the areas. This happens because the default behaviour in Altair is to end the density where the data ends, which often creates sharp borders for low numbers of observations.\nMany other plotting packages instead, extend the density beyond the observations in the dataset to make it appear smoother and it is therefore paramount to always ask how many observations there are before interpreting a density plot."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#densities-can-be-combined-with-plotting-individual-data-points",
    "href": "modules/module3/slides/module3_03.html#densities-can-be-combined-with-plotting-individual-data-points",
    "title": "Using density plots to visualize distributions",
    "section": "Densities can be combined with plotting individual data points",
    "text": "Densities can be combined with plotting individual data points\n\n(density.mark_area(opacity=0.7) +\n alt.Chart(movies[:10]).mark_tick(color='black', yOffset=140).encode(x='runtime'))\n\n\n\n\n\n\n\n\nSince it is so hard to tell how many observations are in a density plot, you should always check this separately. Strategies to do this include looking at the number of rows in the dataframe, creating a separate histogram, or layering the density plot together with a plot of the individual data points.\nHere we are using mark_tick to plot every single observation along the x-axis and making the density area transparent so that we can see the tick marks. By default, the ticks would be in the middle of the plot, so we are using yOffset to align them with the x-axis.\nWith as few as 10 observations, we actually don’t need the density at all and could instead just have shown the individual observations or created a histogram."
  },
  {
    "objectID": "modules/module3/slides/module3_03.html#scaling-densities-by-the-numbers-of-observations-is-possible-but-not-very-effective",
    "href": "modules/module3/slides/module3_03.html#scaling-densities-by-the-numbers-of-observations-is-possible-but-not-very-effective",
    "title": "Using density plots to visualize distributions",
    "section": "Scaling densities by the numbers of observations is possible but not very effective",
    "text": "Scaling densities by the numbers of observations is possible but not very effective\n\n(alt.Chart(movies[:10]).transform_density(\n    'runtime',\n    as_=['runtime', 'density'],\n    counts=True)\n .mark_area().encode(\n    x='runtime',\n    y='density:Q'))\n\n\n\n\n\n\n\n\nIn Altair, we could actually scale the density plots by the count of observations by specifying counts=True inside the transform_density.\nHowever, since a density is a continuous area counts are not as easy to interpret as in a histogram where there is an exact count for each discrete bin.\nAs we can see in this example, the y-axis has been scaled by 10, but it is still hard to interpret, are there 0.08 movies with a runtime of 110 min?\nAlthough densities can be scaled by count, it is often confusing, which means we must be careful when interpreting them and always check how many observations are in the data by plotting the individual data points!"
  },
  {
    "objectID": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "href": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nSelect an appropriate distribution plot for the data.\nCreate density plots to compare a few distributions.\nCreate boxplots to compare many distributions."
  },
  {
    "objectID": "modules/module3/module3-06-true_or_false_many_distributions.html#true-or-false-many-distributions",
    "href": "modules/module3/module3-06-true_or_false_many_distributions.html#true-or-false-many-distributions",
    "title": "3.1. Exercises",
    "section": "True or False: Many Distributions",
    "text": "True or False: Many Distributions",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-true_or_false_many_distributions.html#why-and-how-to-compare-multiple-distributions",
    "href": "modules/module3/module3-06-true_or_false_many_distributions.html#why-and-how-to-compare-multiple-distributions",
    "title": "3.1. Exercises",
    "section": "Why and How to Compare Multiple Distributions",
    "text": "Why and How to Compare Multiple Distributions\n\n\n\n\n\n\n0200,000,000400,000,000600,000,000800,000,0001,000,000,0001,200,000,0001,400,000,0001,600,000,0001,800,000,0002,000,000,0002,200,000,0002,400,000,0002,600,000,0002,800,000,000Worldwide Gross0.000000000.000000010.000000020.000000030.000000040.00000005densityActionAdventureBlack ComedyComedyConcert/PerformanceDocumentaryDramaHorrorMusicalRomantic ComedyThriller/SuspenseWesternMajor Genre",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-true_or_false_many_distributions.html#boxplots-and-penguins",
    "href": "modules/module3/module3-06-true_or_false_many_distributions.html#boxplots-and-penguins",
    "title": "3.1. Exercises",
    "section": "Boxplots and Penguins",
    "text": "Boxplots and Penguins\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nIn the last few slides, we were faceting and using colour channels to compare the body mass of different species of penguins. Let’s explore this but this time using a boxplot!\n\n\n\n\n\n\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make boxplots for the body mass values among the different penguin species.\nMake sure to give it an appropriate title and set the plot dimensions to a height of 200 and a width of 400.\nRemember to assign the species to the y-axis and the body_mass_g to the y-axis since we want to read the labels easily as we learned in the previous module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using mark_boxplot()?\nAre you setting alt.X('body_mass_g')?\nAre you setting alt.Y('species')?\nAre you setting a title, height and width in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-04-true_or_false_distributions.html",
    "href": "modules/module3/module3-04-true_or_false_distributions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nBringing back our trusty penguins data, we are going to try to make a density plot that will provide insights into the distribution of penguins mass among the different islands.\n\n\n\n\n\n\nCreate a density plot for the body_mass_g column for penguins located on different islands.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a plot assigned to an object named mass_density_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s facet based on species and see if that gives us some more insight.\nCreate a density plot for the body_mass_g column for penguins located on different islands but this time facet for species\nTasks:\n\nUse the data source penguins_df to make the plot and assign it to an object named mass_faceted_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island and penguin species. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title and set the width of the plot to 200 and height to 100.\nFacet the plot by the penguin species and display them all in a single column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island','species'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title, height and width in properties()?\nAre you faceting with .facet('species', columns=1)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-04-true_or_false_distributions.html#application-make-your-own-density-plot",
    "href": "modules/module3/module3-04-true_or_false_distributions.html#application-make-your-own-density-plot",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nBringing back our trusty penguins data, we are going to try to make a density plot that will provide insights into the distribution of penguins mass among the different islands.\n\n\n\n\n\n\nCreate a density plot for the body_mass_g column for penguins located on different islands.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a plot assigned to an object named mass_density_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s facet based on species and see if that gives us some more insight.\nCreate a density plot for the body_mass_g column for penguins located on different islands but this time facet for species\nTasks:\n\nUse the data source penguins_df to make the plot and assign it to an object named mass_faceted_plot.\nCalculate the KDE of the body_mass_g column and make sure to split it up by the categorical column island and penguin species. When you create your new values for the calculation make sure to name them density.\nSet the step size to 100.\nGive the area plot an appropriate opacity.\nMap body_mass_g and density to the x and y-axis and make sure to specify that density consists of quantitative values.\nMap the island to the colour (colour) channel.\nMake sure to give your plot a title and set the width of the plot to 200 and height to 100.\nFacet the plot by the penguin species and display them all in a single column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting groupby=['island','species'] and as_=['body_mass_g', 'density'] in transform_density()?\nAre you setting steps=100?\nAre you setting opacity=0.5 in mark_bar()?\nAre you specifying x='body_mass_g' or alt.X('body_mass_g')?\nAre you specifying y='density:Q' or alt.Y('density:Q')?\nAre you specifying color='island' or alt.Color('island')?\nAre you setting a title, height and width in properties()?\nAre you faceting with .facet('species', columns=1)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html",
    "href": "modules/module3/module3-02-true_or_false_distributions.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "hist_plot = alt.Chart(df_source).mark_bar(opacity=0.4).encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', ???),\n    color='genre')\n .facet('country')\n .resolve_scale(y='independent')\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s bring back our penguins that we introduced in the previous module.\n\n\n\n\n\n\nThe culmen, also sometimes referred to as the bill, is the upper ridge of a bird’s beak. Below, we’ve included a diagram made by Allison Horst which should help give you a bit of an idea of what these values are measuring.\n\n\n\n\n\nThe culmen measurements can useful for predicting the sex between penguin species, however, it may be interesting to see if it’s indicative of species as well!\nFor this question let’s create a stacked histogram of the values in the culmen_depth_mm column for different penguin species and determine if there is any type of relationship between the culmen depth and the species of penguin.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins to make a stacked histogram plot.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate.\nGive it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nUsing the penguins dataset again, we are going to try to create a layered histogram.\nWe want to understand how penguins’ culmen depth differs over different penguin species. This means we will need to layer the histogram shapes of the culmen_depth_mm column. We also want to facet on the sex column to see if this affects the distribution.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a layered histogram plot named culmen_layered_plot and make sure to give it an appropriate opacity.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate and any other arguments needed to make a layered plot.\nGive it an appropriate title and facet by the sex column making sure that there is only 1 column so the graphs are stacked vertically.\nMake sure to give each faceted plot an independent axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting opacity=0.5 in mark_bar()?\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you specifying stack=None in the alt.Y() helper function?\nAre you setting a title in properties()?\nAre you faceting by sex using .facet('sex', columns=1)?\nAre you giving the plots independent axis with .resolve_scale(y='independent')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html#multiple-choice-questions-on-single-column-plots",
    "href": "modules/module3/module3-02-true_or_false_distributions.html#multiple-choice-questions-on-single-column-plots",
    "title": "1.1. Exercises",
    "section": "",
    "text": "hist_plot = alt.Chart(df_source).mark_bar(opacity=0.4).encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', ???),\n    color='genre')\n .facet('country')\n .resolve_scale(y='independent')",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html#stacked-plotting-with-penguins",
    "href": "modules/module3/module3-02-true_or_false_distributions.html#stacked-plotting-with-penguins",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s bring back our penguins that we introduced in the previous module.\n\n\n\n\n\n\nThe culmen, also sometimes referred to as the bill, is the upper ridge of a bird’s beak. Below, we’ve included a diagram made by Allison Horst which should help give you a bit of an idea of what these values are measuring.\n\n\n\n\n\nThe culmen measurements can useful for predicting the sex between penguin species, however, it may be interesting to see if it’s indicative of species as well!\nFor this question let’s create a stacked histogram of the values in the culmen_depth_mm column for different penguin species and determine if there is any type of relationship between the culmen depth and the species of penguin.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins to make a stacked histogram plot.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate.\nGive it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you setting a title in properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-02-true_or_false_distributions.html#layered-plotting-with-penguins",
    "href": "modules/module3/module3-02-true_or_false_distributions.html#layered-plotting-with-penguins",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nBe patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nUsing the penguins dataset again, we are going to try to create a layered histogram.\nWe want to understand how penguins’ culmen depth differs over different penguin species. This means we will need to layer the histogram shapes of the culmen_depth_mm column. We also want to facet on the sex column to see if this affects the distribution.\nTasks:\nFill in the blanks in the code below so that the following gets accomplished.\n\nUse the data source penguins_df to make a layered histogram plot named culmen_layered_plot and make sure to give it an appropriate opacity.\nPlot the counts of the culmen_depth_mm and distinguish the penguin species using the colour channel.\nMake sure to set the maxbins argument to something appropriate and any other arguments needed to make a layered plot.\nGive it an appropriate title and facet by the sex column making sure that there is only 1 column so the graphs are stacked vertically.\nMake sure to give each faceted plot an independent axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you setting opacity=0.5 in mark_bar()?\nAre you setting alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=30))?\nAre you specifying stack=None in the alt.Y() helper function?\nAre you setting a title in properties()?\nAre you faceting by sex using .facet('sex', columns=1)?\nAre you giving the plots independent axis with .resolve_scale(y='independent')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-00-module_learning_outcomes.html",
    "href": "modules/module3/module3-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#how-does-life-expectancy-differ-between-regions",
    "href": "modules/module2/slides/module2_07.html#how-does-life-expectancy-differ-between-regions",
    "title": "Creating subplots via faceting",
    "section": "How does life expectancy differ between regions?",
    "text": "How does life expectancy differ between regions?\n\nimport pandas as pd\nimport altair as alt\n\ngm = pd.read_csv('../../data/world-data-gapminder.csv', parse_dates=['year'])\ngm2018 = gm[gm['year'] == '2018']\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nHere we have the life expectancy plot that we saw from the last slide deck.\nBut what if we wanted to see how each continent’s bar distribution “stacks up” compared to each other?"
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#stacked-histograms-make-it-hard-to-compare-between-groups",
    "href": "modules/module2/slides/module2_07.html#stacked-histograms-make-it-hard-to-compare-between-groups",
    "title": "Creating subplots via faceting",
    "section": "Stacked histograms make it hard to compare between groups",
    "text": "Stacked histograms make it hard to compare between groups\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region'))\n\n\n\n\n\n\n\n\nWe have previously seen how we can explore categorical dataframe columns by encoding them as the colour channel of our plots.\nAltair creates a stacked bar chart by default when we when encode a dataframe column as the color channel. Notice we are now using the helper functions we saw before but now with alt.Color. (This must be spelt without the “U”)\nJust like with the stacked area chart, this is good when the total height of each bar is the most important, but it is not ideal when the main focus of our visualization is to compare the coloured groups against each other.\nThe reason it is difficult to compare the length of the coloured segments against each other (both within a bar and between bars), is that they don’t share the same baseline so we can’t just compare the position of the top part of the bars, but have to try to estimate their lengths.\nFor these reasons, it is difficult to tell the difference between the regions in this plot and it is not an effective visualization."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#layered-histograms-are-also-difficult-to-compare",
    "href": "modules/module2/slides/module2_07.html#layered-histograms-are-also-difficult-to-compare",
    "title": "Creating subplots via faceting",
    "section": "Layered histograms are also difficult to compare",
    "text": "Layered histograms are also difficult to compare\n\nalt.Chart(gm2018).mark_bar(opacity=0.7).encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', stack=False),\n    alt.Color('region'))\n\n\n\n\n\n\n\n\nIf we tell Altair not to stack the bar along the y-axis, it will instead layer them behind each other. To be able to see all groups, we need to add some opacity to the bar mark.\nAlthough the bars share the same baseline here, they are still difficult to compare against each other, because there is so much overlap with different colours.\nLayered histograms and bar charts can be effective when there are few groups and clear separation between them, but that is not the case here and this plot is even harder to interpret than the previous one."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#creating-a-separate-subplot-for-each-region-facilitate-comparisons-between-them",
    "href": "modules/module2/slides/module2_07.html#creating-a-separate-subplot-for-each-region-facilitate-comparisons-between-them",
    "title": "Creating subplots via faceting",
    "section": "Creating a separate subplot for each region facilitate comparisons between them",
    "text": "Creating a separate subplot for each region facilitate comparisons between them\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region')\n).properties(width=200, height=150\n).facet('region')\n\n\n\n\n\n\n\n\nFaceting creates one facet/subplot for each group in the specified dataframe column. To ensure that the entire grid of facets fit on the slide, we’re also shrinking the dimensions of each subplot.\nFrom this chart, we can more easily compare the regions. For example, we can see that that most European countries have a higher life expectancy than most African countries.\nHowever, it is a little bit more demanding to see exactly how much of the two distributions are overlapping and we would need to look at the number of the axes while scanning left and right on the grid."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#laying-out-facets-vertically-makes-it-easier-to-compare-position-on-the-x-axis",
    "href": "modules/module2/slides/module2_07.html#laying-out-facets-vertically-makes-it-easier-to-compare-position-on-the-x-axis",
    "title": "Creating subplots via faceting",
    "section": "Laying out facets vertically makes it easier to compare position on the x-axis",
    "text": "Laying out facets vertically makes it easier to compare position on the x-axis\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()', title=None),\n    alt.Color('region')\n).properties(width=200, height=50\n).facet('region', columns=1)\n\n\n\n\n\n\n\n\nTo make it easier to compare overlap between histograms on the x-axis, we can lay out the facets vertically in a single column.\nThe vertical layout is preferred in this case since we are the most interested to compare position on the x-axis between the groups. If we instead wanted to compare position on the y-axis, a single row would have been better.\nHere, we immediately see that there is a long region of overlap between European and African countries, but that the bulk of each distribution is separated.\nCompare this with the stacked and layered histogram we made in the first few slides and you will realize just how much easier it is to compare the groups here!"
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#subplots-are-often-laid-out-in-even-grids",
    "href": "modules/module2/slides/module2_07.html#subplots-are-often-laid-out-in-even-grids",
    "title": "Creating subplots via faceting",
    "section": "Subplots are often laid out in even grids",
    "text": "Subplots are often laid out in even grids\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region')\n).properties(width=200, height=140\n).facet('region', columns=3)\n\n\n\n\n\n\n\n\nIf we are interested in comparing both x and y values between plots, or are presenting the visualization in a context where we do not have the room to create a single column or row for all the plots, a good alternative is to create an even (or near even) grid of facets, as in this slide.\nAs you can see, the default behaviour for Altair is to leave the last position empty, but include the x-axis line so that we can use it to read the plot in the top row."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#faceting-on-two-categorical-dataframe-columns-allows-us-to-answer-more-complex-questions",
    "href": "modules/module2/slides/module2_07.html#faceting-on-two-categorical-dataframe-columns-allows-us-to-answer-more-complex-questions",
    "title": "Creating subplots via faceting",
    "section": "Faceting on two categorical dataframe columns allows us to answer more complex questions",
    "text": "Faceting on two categorical dataframe columns allows us to answer more complex questions\n\nalt.Chart(gm2018[gm2018['income_group'].isin(['High', 'Low'])]).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('region')\n).properties(width=200, height=140\n).facet(column='region', row='income_group')\n\n\n\n\n\n\n\n\nInstead of using the columns parameter, we could specify one categorical dataframe column each for the row and column parameters (note no “s”). Altair will then spread the data out accordingly.\nWith this strategy, we can answer more complex questions such as “How does child mortality differ between low and high income countries in different continents?”.\nWe can see that the countries with low life expectancy in all regions are mostly low-income countries, whereas those with a high life expectancy are mostly high incomes countries (we have filtered the income groups to save space on the slide)."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#coloring-can-also-group-data-within-each-facet",
    "href": "modules/module2/slides/module2_07.html#coloring-can-also-group-data-within-each-facet",
    "title": "Creating subplots via faceting",
    "section": "Coloring can also group data within each facet",
    "text": "Coloring can also group data within each facet\n\nincome_order = ['High', 'Upper middle', 'Lower middle', 'Low']\nalt.Chart(gm2018[gm2018['region'].isin(['Africa'])]).mark_point().encode(\n    alt.X('children_per_woman'),\n    alt.Y('child_mortality'),\n    alt.Color('income_group', sort=income_order),\n).properties(width=200, height=140\n).facet('sub_region')\n\n\n\n\n\n\n\n\nSo far we have encoded the same dataframe column in both the facet and colour channels. This is technically redundant but can be helpful to emphasize the groups in the data.\nIf we wanted to drill down in the data further, we could instead separate each facet into groups by colouring according to another dataframe column.\nThis would allow us to answer questions of similar complexity as in the previous slide, without faceting into both rows and columns.\nHere we will connect back to what we discussed at the end of the last slide deck and answer the question “How does child mortality and the number of children per woman differ between income groups and subregions within Africa”.\nIn our faceted plot, we can first see that there are many more countries and much more spread among them in Sub-Saharan Africa than in Northern Africa. This visualization reveals that there is lower child mortality, fewer children per woman, and higher-income seem to be correlated.\nHowever, we would not want to draw any conclusions before performing formal statistical tests, and investigating the literature to understand if these relationships are also causative.\nIf there were so many categories that the colours become hard to tell apart, it would be worthwhile to try to facet by that dataframe column instead of encoding it as colour."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#as-with-histograms-stacked-colours-are-not-effective-for-categorical-bar-charts",
    "href": "modules/module2/slides/module2_07.html#as-with-histograms-stacked-colours-are-not-effective-for-categorical-bar-charts",
    "title": "Creating subplots via faceting",
    "section": "As with histograms stacked colours are not effective for categorical bar charts",
    "text": "As with histograms stacked colours are not effective for categorical bar charts\n\nalt.Chart(gm2018[gm2018['region'] == 'Africa']).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('sub_region'),\n    alt.Color('income_group', sort=income_order)\n).properties(width=200)\n\n\n\n\n\n\n\n\nIn the plot on the previous slide, we saw that there were many more countries within one of the sub-regions compared to the other, but exactly how many more?\nTo answer this question, we could create a stacked bar chart.\nLayering wouldn’t make sense here either, as that would just hide the bars behind each other. What we would want to do is adding a small offset to each colour so that they dodge each other and are placed side by side.\nThis offset functionality does not yet exist in Altair, but since it is a quite commonly used visualization, we will show you how to create it using facets instead."
  },
  {
    "objectID": "modules/module2/slides/module2_07.html#faceting-can-anchor-coloured-bars-to-the-same-baseline-and-facilitate-comparisons",
    "href": "modules/module2/slides/module2_07.html#faceting-can-anchor-coloured-bars-to-the-same-baseline-and-facilitate-comparisons",
    "title": "Creating subplots via faceting",
    "section": "Faceting can anchor coloured bars to the same baseline and facilitate comparisons",
    "text": "Faceting can anchor coloured bars to the same baseline and facilitate comparisons\n\nalt.Chart(gm2018[gm2018['region'] == 'Africa']).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('income_group', sort=income_order),\n    alt.Color('income_group', sort=income_order, legend=None)\n).properties(width=200\n).facet('sub_region')\n\n\n\n\n\n\n\n\nBy spreading the sub-regions out as facets, and encoding the same dataframe column in both the y and colour channel, we can create where the bars share the same baseline and are easy to compare.\nIn this chart, it is immediately clear how many countries there are for each region and income group.\nWe have removed the redundant colour legend in favour of the direct labels on the y-axis. We will talk more about direct labelling versus legends in a future module, but in general, direct labelling is often clearer.\nWe could combine this strategy by using row and column in facet, which would allow us to create visualizations that split data across three different channels: rows, columns, and colour.\nWhen visualizing so many dataframe columns, it is often useful to use colour for the most important comparison, since these groups will be the closest to each other making them easier to compare.\nIt is not always that simple and in general, you should be careful to avoid creating plots that are so complex that they are hard to interpret."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#global-development-data",
    "href": "modules/module2/slides/module2_03.html#global-development-data",
    "title": "Creating Area Charts",
    "section": "Global Development Data",
    "text": "Global Development Data\n\n\n\n\nColumn\n\n\nDescription\n\n\n\n\n\n\ncountry\n\n\nCountry name\n\n\n\n\nyear\n\n\nYear of observation\n\n\n\n\npopulation\n\n\nPopulation in the country at each year\n\n\n\n\nregion\n\n\nContinent the country belongs to\n\n\n\n\nsub_region\n\n\nSub-region the country belongs to\n\n\n\n\nincome_group\n\n\nIncome group as specified by the world bank in 2018\n\n\n\n\nlife_expectancy\n\n\nThe mean number of years a newborn would live if mortality patterns remained constant\n\n\n\n\nincome\n\n\nGDP per capita (in USD) adjusted for differences in purchasing power\n\n\n\n\nchildren_per_woman\n\n\nAverage number of children born per woman\n\n\n\n\nchild_mortality\n\n\nDeaths of children under 5 years of age per 1000 live births\n\n\n\n\npop_density\n\n\nAverage number of people per km2\n\n\n\n\nco2_per_capita\n\n\nCO2 emissions from fossil fuels (tonnes per capita)\n\n\n\n\nyears_in_school_men\n\n\nMean number of years in primary, secondary, and tertiary school for 25-36 years old men\n\n\n\n\nyears_in_school_women\n\n\nMean number of years in primary, secondary, and tertiary school for 25-36 years old women\n\n\n\n\n\nWe will be visualizing global health data to answer the question: How has the population for different regions around the world changed over time?\nThis dataset is more similar to those you will encounter in the wild than the sample dataset, we saw in the first module. We will be exploring this data in the assignments for the first two modules.\nIn later labs we will look at many other datasets, but we’re sticking to a familiar one for now so that we can focus on laying down a solid understanding of the visualization principles with data that we already know."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#read-in-and-glimpse-at-the-data-with-pandas",
    "href": "modules/module2/slides/module2_03.html#read-in-and-glimpse-at-the-data-with-pandas",
    "title": "Creating Area Charts",
    "section": "Read in and glimpse at the data with pandas",
    "text": "Read in and glimpse at the data with pandas\n\nimport pandas as pd\n\ngm = pd.read_csv(\"../../data/world-data-gapminder.csv\", parse_dates=[\"year\"])\ngm\n\n\n\n\n\n\n\n\ncountry\nyear\npopulation\nregion\n...\npop_density\nco2_per_capita\nyears_in_school_men\nyears_in_school_women\n\n\n\n\n0\nAfghanistan\n1800-01-01\n3280000\nAsia\n...\nNaN\nNaN\nNaN\nNaN\n\n\n1\nAfghanistan\n1801-01-01\n3280000\nAsia\n...\nNaN\nNaN\nNaN\nNaN\n\n\n2\nAfghanistan\n1802-01-01\n3280000\nAsia\n...\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n38979\nZimbabwe\n2016-01-01\n16200000\nAfrica\n...\n41.7\nNaN\nNaN\nNaN\n\n\n38980\nZimbabwe\n2017-01-01\n16500000\nAfrica\n...\n42.7\nNaN\nNaN\nNaN\n\n\n38981\nZimbabwe\n2018-01-01\n16900000\nAfrica\n...\n43.7\nNaN\nNaN\nNaN\n\n\n\n\n38982 rows × 14 columns\n\n\n\n\nAs we read in the data with pandas, we specify to read in the year column as a date, rather than an integer, which is the default behaviour.\nRemember that Altair uses the pandas data types to infer the data it is working with. Integers would show up on the Altair chart axes as 1,990, 2,000, etc whereas dates are shown as 1990, 2000, etc, so make sure to parse these columns as dates when using pandas."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#info-shows-column-data-types-and-missing-values",
    "href": "modules/module2/slides/module2_03.html#info-shows-column-data-types-and-missing-values",
    "title": "Creating Area Charts",
    "section": ".info() shows column data types and missing values",
    "text": ".info() shows column data types and missing values\n\ngm.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 38982 entries, 0 to 38981\nData columns (total 14 columns):\n #   Column                 Non-Null Count  Dtype         \n---  ------                 --------------  -----         \n 0   country                38982 non-null  object        \n 1   year                   38982 non-null  datetime64[ns]\n 2   population             38982 non-null  int64         \n 3   region                 38982 non-null  object        \n 4   sub_region             38982 non-null  object        \n 5   income_group           38982 non-null  object        \n 6   life_expectancy        38982 non-null  float64       \n 7   income                 38982 non-null  int64         \n 8   children_per_woman     38982 non-null  float64       \n 9   child_mortality        38980 non-null  float64       \n 10  pop_density            12282 non-null  float64       \n 11  co2_per_capita         16285 non-null  float64       \n 12  years_in_school_men    8188 non-null   float64       \n 13  years_in_school_women  8188 non-null   float64       \ndtypes: datetime64[ns](1), float64(7), int64(2), object(4)\nmemory usage: 4.2+ MB\n\n\n\nWhen reading in a new dataset, it is always a good idea to glimpse at a few rows like we did in the previous slide to get an idea of what the data looks like.\nAnother helpful practice is to use the .info() method to get an overview of the column data types and see if there are any NaNs (missing values).\nIf there are many missing values in a column, we would want to look into why that is. Later in the course, we will learn about how to visualize missing values to understand if there are patterns in which values are missing, which could affect our data analysis.\nIn this and the previous slide, we can also see that our dataset is pretty big, there are almost 40,000 rows!\nThe first time working with such large datasets in Altair can be a bit confusing because Altair saves the entire dataframe as part of the visualization, when working with pandas dataframes,\nThis is great because each visualization is reproducible in itself, we don’t need to go looking for the data if we come across a plot on the web, or worry that the authors didn’t upload it.\nHowever, for large datasets this causes the visualizations files to become really big, and Altair shows a warning for any dataset larger than 5000 rows.\nWe will talk about this in detail in a later module, and see different strategies for working with large datasets."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#working-with-large-data-in-altair-via-urls",
    "href": "modules/module2/slides/module2_03.html#working-with-large-data-in-altair-via-urls",
    "title": "Creating Area Charts",
    "section": "Working with large data in Altair via URLs",
    "text": "Working with large data in Altair via URLs\n\nchart = (\n    alt.Chart(\"https://website.com/data.csv\")\n    .mark_line()\n    .encode(x=\"column1:T\", y=\"column2:Q\")\n)\n\n\nIn this slide deck, we’re going to leverage the fact that Altair does not have to work with dataframes, but can also use a URL link that points to data that has been uploaded somewhere on the web. The slides show an example of what this syntax looks like in general.\nSince we have uploaded our dataset to the course online repository, we will read the data directly from there using this URL https://raw.githubusercontent.com/UBC-MDS/exploratory-data-viz/refs/heads/main/modules/data/world-data-gapminder.csv.\nThis is powerful since we can use any data online without downloading it first and it allows us to create Altair charts without worrying that the entire dataframe will be included! Since Altair knows the location of the data online, the chart is still reproducible as long as the data is not removed from its online location.\nThe drawback of not using a dataframe, is that Altair cannot rely on pandas to infer what type of data there is in each column, so we need to help it by indicating the datatype.\nThis is what the :T and :Q after the column names do and an explanation of all the data types in Altair can be found in the next slide."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#data-types-need-to-be-manually-specified-when-not-working-with-pandas",
    "href": "modules/module2/slides/module2_03.html#data-types-need-to-be-manually-specified-when-not-working-with-pandas",
    "title": "Creating Area Charts",
    "section": "Data types need to be manually specified when not working with pandas",
    "text": "Data types need to be manually specified when not working with pandas\n\n\n\n\nData Type\n\n\nShorthand Code\n\n\nDescription\n\n\nExamples\n\n\n\n\n\n\nOrdinal\n\n\nO\n\n\na discrete ordered quantity\n\n\n“dislike”, “neutral”, “like”\n\n\n\n\nNominal\n\n\nN\n\n\na discrete un-ordered quantity\n\n\neye color, postal code, university\n\n\n\n\nQuantitative\n\n\nQ\n\n\na continuous quantity\n\n\n5, 5.0, 5.011\n\n\n\n\nTemporal\n\n\nT\n\n\na time or date value\n\n\ndate (August 13 2020), time (12:00 pm)\n\n\n\n\n\nAltair recognizes the four main column types, which you can see in this slide (that you also saw in the Programming with Python course).\nOrdinal and nominal both describe categorical data.\nOrdinal implies that there is a natural order to the categories. for example, movie ratings with 1-5 stars would be an ordinal scale since a five-star rating is better than a single-star rating.\nIn contrast, there is no such order for nominal categories, for example colours, fruits, or countries.\nQuantitative data describes data that is continuous, which means that it is a number that can be described with infinite precision. For example, someone’s height could be said to be either 170 cm, 170.12 cm, 170.1281 cm, and so on depending on how accurately we can measure them.\nDates are generally temporal, but there are instances when it makes sense to defines them as ordinal or even nominal categories, for example when having just a few dates to compare between.\nArmed with this knowledge, let’s get started visualizing our data!"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#draw-a-line-chart-for-how-you-think-the-world-population-has-changed-since-the-1800s",
    "href": "modules/module2/slides/module2_03.html#draw-a-line-chart-for-how-you-think-the-world-population-has-changed-since-the-1800s",
    "title": "Creating Area Charts",
    "section": "Draw a line chart for how you think the world population has changed since the 1800s",
    "text": "Draw a line chart for how you think the world population has changed since the 1800s\n   \nTake a few minutes to first sketch out how you would expect your plot to appear before going to the next slide.\n\nNow that we have seen what the data table looks like, and which data type the values in each column are, let’s think about what we would want to visualize and why.\nSince the data reaches all the way back to the 1800s, it would be really interesting to plot how the world population has been growing up until today. We could use a line plot for this as we learned in the first module.\nDraw this out on paper yourself so that it is clear what you expect the plot before going to the next slide."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#our-sketched-out-plot",
    "href": "modules/module2/slides/module2_03.html#our-sketched-out-plot",
    "title": "Creating Area Charts",
    "section": "Our sketched out plot",
    "text": "Our sketched out plot\n\n\nIf we drew this visualization out on paper, we would expect something a little like this - a single line that increases from the 1800s up until today as the population increased. It’s a good idea to include axis labels too!"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#a-line-chart-is-a-good-choice-for-trends-over-time",
    "href": "modules/module2/slides/module2_03.html#a-line-chart-is-a-good-choice-for-trends-over-time",
    "title": "Creating Area Charts",
    "section": "A line chart is a good choice for trends over time",
    "text": "A line chart is a good choice for trends over time\n\nimport altair as alt\n\ngm_url = \"https://raw.githubusercontent.com/UBC-MDS/exploratory-data-viz/refs/heads/main/modules/data/world-data-gapminder.csv\"\n\nalt.Chart(gm_url).mark_line().encode(\n    x='year:T',\n    y='population:Q'\n)\n\n\n\n\n\n\n\n\nNext, we try to plot it in Altair using mark_line() and mapping year to the x-axis and population to the y-axis.\nBut the plot on this slide doesn’t look like a line plot, why is that?\nBecause every country has multiple entries, one for each year. We have plotted the population for every single country in every year and connected them all with a line.\nThat’s not what we want!"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#the-.sum-aggregate-method-will-show-us-the-trend-of-the-entire-world",
    "href": "modules/module2/slides/module2_03.html#the-.sum-aggregate-method-will-show-us-the-trend-of-the-entire-world",
    "title": "Creating Area Charts",
    "section": "The .sum() aggregate method will show us the trend of the entire world",
    "text": "The .sum() aggregate method will show us the trend of the entire world\n\nalt.Chart(gm_url).mark_line().encode(\n    x='year:T',\n    y='sum(population):Q')\n\n\n\n\n\n\n\n\nWe want to see how the world population has been changing.\nWe can calculate this by summing up all the countries’ populations for each year via the .sum() aggregation method in Altair.\nThat looks much better!\nInterestingly, it seems like the world population have been growing in two distinct phases: slowly before 1950, and more rapidly afterwards.\nWe will talk more about that in a few slides.\nWe can see here that Altair automatically changes the axis label for us to reflect the operation that we have performed on the data, here taking the “sum” of the countries.\nThis is often great to keep track of how we have aggregated the data, but is not always needed.\nIn this case, our plot could be made even clearer if the axis title read “World population” instead."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#changing-axes-titles-clarifies-makes-our-plot-easier-to-interpret",
    "href": "modules/module2/slides/module2_03.html#changing-axes-titles-clarifies-makes-our-plot-easier-to-interpret",
    "title": "Creating Area Charts",
    "section": "Changing axes titles clarifies makes our plot easier to interpret",
    "text": "Changing axes titles clarifies makes our plot easier to interpret\n\nalt.Chart(gm_url).mark_line().encode(\n    x='year:T',\n    y=alt.Y('sum(population):Q', title='World population'))\n\n\n\n\n\n\n\n\nTo change an axis title, we can use the helper functions alt.X and alt.Y, instead of x= and y=.\nThese have the role of customizing things like titles, orders, groups, and scales for the axes. When using just y='column', we’re still calling alt.Y() under the hood, we just save ourselves some typing.\nWe can also get rid of the y= and x= parts altogether as well which is even more efficient.\nWe will do a deep dive into titles for axis and other chart elements in a later module.\nFrom now on we will just use it to clarify when an automatic label might be confusing."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#area-charts-are-also-effective-at-visualizing-trends-over-time",
    "href": "modules/module2/slides/module2_03.html#area-charts-are-also-effective-at-visualizing-trends-over-time",
    "title": "Creating Area Charts",
    "section": "Area charts are also effective at visualizing trends over time",
    "text": "Area charts are also effective at visualizing trends over time\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='World population'))\n\n\n\n\n\n\n\n\nLet’s see how we can visualize the world population changes with an area chart instead of a line chart.\nThanks to Altair’s consistent visualization grammar, the modifications we need to make to the code are minor. Replace mark_line with mark_area and we’re done.\nFor showing a single trend over time, the choice between a line and area chart comes down to aesthetics. They are both effective choices for this purpose.\nHowever, when visualizing the trends over time for multiple groups, lines and areas have different advantages, as we will see next."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#area-charts-are-preferred-when-the-total-of-the-groups-is-the-most-important",
    "href": "modules/module2/slides/module2_03.html#area-charts-are-preferred-when-the-total-of-the-groups-is-the-most-important",
    "title": "Creating Area Charts",
    "section": "Area charts are preferred when the total of the groups is the most important",
    "text": "Area charts are preferred when the total of the groups is the most important\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='World population'),\n    color='region:N')\n\n\n\n\n\n\n\n\nThe y-axis range of this chart is the same as the one on the previous slide, so it is easy to see how the total world population has changed over time.\nFrom the stacked coloured regions, we also get a rough idea of how each region has grown, but it is hard to compare exactly, especially for regions that are not stacked next to each other.\nFor example, we can’t really tell if Europe or Africa, has the largest population in the most recent year."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#it-is-helpful-to-clarify-that-the-areas-are-stacked-on-top-of-each-other",
    "href": "modules/module2/slides/module2_03.html#it-is-helpful-to-clarify-that-the-areas-are-stacked-on-top-of-each-other",
    "title": "Creating Area Charts",
    "section": "It is helpful to clarify that the areas are stacked on top of each other",
    "text": "It is helpful to clarify that the areas are stacked on top of each other\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='Cumulative population of stacked regions'),\n    color='region:N')\n\n\n\n\n\n\n\n\nAltair stacks by areas by default, which is usually what we want when creating an area chart with groups.\nBut if someone saw our chart without knowing this, they might think that the areas are layered behind each other, so that we only see the top of the blue region peak out behind the orange region.\nTo prevent this misunderstanding, we can change the y-axis label to clearly state that areas are stacked.\nTaken together, stacked area charts are ideal when you want to focus on a total measurement and give a rough idea of the contributions from different groups."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#line-charts-are-preferred-when-the-individual-groups-are-the-most-important",
    "href": "modules/module2/slides/module2_03.html#line-charts-are-preferred-when-the-individual-groups-are-the-most-important",
    "title": "Creating Area Charts",
    "section": "Line charts are preferred when the individual groups are the most important",
    "text": "Line charts are preferred when the individual groups are the most important\n\nalt.Chart(gm_url).mark_line().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='Population'),\n    color='region:N')\n\n\n\n\n\n\n\n\nUsing a line chart is the preferred choice when we want to view the exact values of each group and don’t care as much about the total of the groups added together.\nFor example, here it is immediately clear that Africa has a bigger population than Europe and we can see that the populations shifted shortly after the year 2000.\nOn the other hand, it’s quite cognitively demanding to try to reconstruct the total world population by adding all the lines up together, especially over time!\nIn summary, split line charts are ideal when you want to compare the different groups accurately."
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#when-will-the-worlds-population-stop-growing",
    "href": "modules/module2/slides/module2_03.html#when-will-the-worlds-population-stop-growing",
    "title": "Creating Area Charts",
    "section": "When will the world’s population stop growing?",
    "text": "When will the world’s population stop growing?\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('sum(population):Q', title='World population'))\n\n\n\n\n\n\n\n\nGoing back to the area chart with one group, let’s look closer at the growth curve of the world’s population.\nFirst, there is a slow linear phase, but soon after the end of the second world war, it the growth starts increasing much more rapidly (but still in a straight line).\nWill the world population keep growing like this for much longer?"
  },
  {
    "objectID": "modules/module2/slides/module2_03.html#the-world-population-is-predicted-to-stabilize-at-around-11-billion",
    "href": "modules/module2/slides/module2_03.html#the-world-population-is-predicted-to-stabilize-at-around-11-billion",
    "title": "Creating Area Charts",
    "section": "The world population is predicted to stabilize at around 11 billion",
    "text": "The world population is predicted to stabilize at around 11 billion\n\nalt.Chart(gm_url).mark_area().encode(\n    alt.X('year:T'),\n    alt.Y('mean(children_per_woman):Q', title='Average children per woman worldwide'))\n\n\n\n\n\n\n\n\nFortunately, the world population is predicted to stabilize around 11 billion people at the end of the century.\nWhy? Because as living conditions improve around the world, child mortality is going down as can be seen in this visualization.\nIn countries where child mortality is high, women will often give birth to more children than they want in order to protect against losing some of their children.\nLower child mortality leads to more predictable family planning, which in turn often leads to smaller families. In the majority of countries where child mortality has been observed to decrease, the number of children per woman has followed and stabilized around two.\nIf you’re interested in knowing more about the world population predictions, you can use Gapminder’s online resources, for example this video on population growh and this one on why it will slow down."
  },
  {
    "objectID": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "href": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nChoose effective visual channels for information display.\nVisualize frequencies with bar plots.\nFacet plots to explore more variables simultaneously.\nCustomize axes labels and scales."
  },
  {
    "objectID": "modules/module2/module2-08-true_or_false_facets.html",
    "href": "modules/module2/module2-08-true_or_false_facets.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=True),\n    y='count()'\n).properties(width=300, height=150).facet(???)\n\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nOk, let’s facet our penguin dataset now.\n\n\n\n\n\n\nTasks:\n\nUsing bars, show the distribution of the body_mass_g values from the penguins_df dataset.\nMake sure to give it a title and set the dimensions to a height of 100 and a width of 150.\nFacet your plots by species for the columns and by island for the rows.\nSave your plot in an object named penguin_facet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_facet?\nAre you specifying alt.X('species', bin=alt.Bin(maxbins=15)) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-08-true_or_false_facets.html#facing-some-faceting-questions",
    "href": "modules/module2/module2-08-true_or_false_facets.html#facing-some-faceting-questions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=True),\n    y='count()'\n).properties(width=300, height=150).facet(???)",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-08-true_or_false_facets.html#faceting-with-penguins",
    "href": "modules/module2/module2-08-true_or_false_facets.html#faceting-with-penguins",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nOk, let’s facet our penguin dataset now.\n\n\n\n\n\n\nTasks:\n\nUsing bars, show the distribution of the body_mass_g values from the penguins_df dataset.\nMake sure to give it a title and set the dimensions to a height of 100 and a width of 150.\nFacet your plots by species for the columns and by island for the rows.\nSave your plot in an object named penguin_facet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_facet?\nAre you specifying alt.X('species', bin=alt.Bin(maxbins=15)) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=???),\n    y='count()').properties(title='The distribution of students per classroom')\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nAlright, let’s bring in a new dataset containing information on penguins. This data is available from Kaggle and originally available from Allison Horst’s GitHub Repository.\n\n\n\n\n\n\nWe are interested in obtaining the number of penguins we collected of each species.\nTasks:\n\nUsing a bar plot, visualize the count of penguins for each species using the dataframe penguins_df.\nChoose the appropriate rotation, given the axis labels.\nSort your bars in an appropriate order.\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_bar.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_bar?\nAre you specifying alt.Y('species', sort='x') on the y-axis?\nAre you specifying count() on the x-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now see what the distribution of penguin flipper length looks like.\nTasks:\n\nUsing bars, show the counts of the flipper_length_mm values using the penguins_df dataframe\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_hist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_hist?\nAre you specifying alt.X('flipper_length_mm', bin=True) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#testing-your-bar-knowledge",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#testing-your-bar-knowledge",
    "title": "3.1. Exercises",
    "section": "",
    "text": "alt.Chart(data_source).mark_bar().encode(\n    x=alt.X('students', bin=???),\n    y='count()').properties(title='The distribution of students per classroom')",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#practicing-bar-plots-with-penguins",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#practicing-bar-plots-with-penguins",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nAlright, let’s bring in a new dataset containing information on penguins. This data is available from Kaggle and originally available from Allison Horst’s GitHub Repository.\n\n\n\n\n\n\nWe are interested in obtaining the number of penguins we collected of each species.\nTasks:\n\nUsing a bar plot, visualize the count of penguins for each species using the dataframe penguins_df.\nChoose the appropriate rotation, given the axis labels.\nSort your bars in an appropriate order.\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_bar.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_bar?\nAre you specifying alt.Y('species', sort='x') on the y-axis?\nAre you specifying count() on the x-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#making-history-with-histograms",
    "href": "modules/module2/module2-06-true_or_false_bars_and_histograms.html#making-history-with-histograms",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s now see what the distribution of penguin flipper length looks like.\nTasks:\n\nUsing bars, show the counts of the flipper_length_mm values using the penguins_df dataframe\nMake sure to give it a title and set the dimensions to a height of 150 and a width of 300.\nSave your plot in an object named penguin_hist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_bar()?\nAre you assigning the plot to an object namedpenguin_hist?\nAre you specifying alt.X('flipper_length_mm', bin=True) on the x-axis?\nAre you specifying count() on the y-axis?\nAre you giving the plot a title and proper dimensions using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-04-true_or_false_area_and_lines.html",
    "href": "modules/module2/module2-04-true_or_false_area_and_lines.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year0510152025Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot A\n\n\n\n1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year012345678Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot B\n\n\n\n\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nRemember our vehicle dataset? We are going to take a look at how fuel efficiency has improved over the years. Let’s try answering the question “Over time, how has the average automobile fuel efficiency changed?”\n\n\n\n\n\n\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_area() or .mark_line()?\nAre you assigning the plot to an object namedfuel_efficiency?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s now take a look at each country manufacturer. How did the mean fuel efficiency change from the year 1070-1982 for each manufacturing origin?\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency_org.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you assigning the plot to an object namedfuel_efficiency_org?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you specifying colour = 'Origin'?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-04-true_or_false_area_and_lines.html#checking-your-area-of-expertise",
    "href": "modules/module2/module2-04-true_or_false_area_and_lines.html#checking-your-area-of-expertise",
    "title": "2.1. Exercises",
    "section": "",
    "text": "1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year0510152025Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot A\n\n\n\n1,8001,8201,8401,8601,8801,9001,9201,9401,9601,9802,0002,020year012345678Mean of children_per_womanAfricaAmericasAsiaEuroperegionPlot B",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-04-true_or_false_area_and_lines.html#practicing-your-plotting",
    "href": "modules/module2/module2-04-true_or_false_area_and_lines.html#practicing-your-plotting",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nRemember our vehicle dataset? We are going to take a look at how fuel efficiency has improved over the years. Let’s try answering the question “Over time, how has the average automobile fuel efficiency changed?”\n\n\n\n\n\n\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_area() or .mark_line()?\nAre you assigning the plot to an object namedfuel_efficiency?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s now take a look at each country manufacturer. How did the mean fuel efficiency change from the year 1070-1982 for each manufacturing origin?\nTasks:\n\nPlot an appropriate graph that visualizes the change of the mean Miles_per_Gallon over time.\nAssign your plot to an object named fuel_efficiency_org.\nMake sure to give it an appropriate title.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you assigning the plot to an object namedfuel_efficiency_org?\nAre you specifying mean(Miles_per_Gallon) on the y-axis?\nAre you specifying Year on the x-axis?\nAre you specifying colour = 'Origin'?\nAre you giving the plot a title using .properties()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-00-module_learning_outcomes.html",
    "href": "modules/module2/module2-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "href": "modules/module1/slides/module1_07.html#including-all-the-data-can-hinder-visualization-of-general-trends",
    "title": "Aggregations, lines, and layers",
    "section": "Including all the data can hinder visualization of general trends",
    "text": "Including all the data can hinder visualization of general trends\n\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars()\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nThroughout this course we will explore many different datasets, but for now, we will stick to the cars dataset to keep it simple and focus on introducing additional Altair functionality.\nLet’s refresh our memory with this plot from the previous module.\nWe noted that it appears that cars differ in their weight and mileage based on their country of origin. At least the American cars appear to stand out, but it is difficult to see any differences between Europe and Japan.\nVisualizing all data points as in this slide is helpful to detect patterns in the data.\nBut when showing all observations, it can be hard to pick up on general trends in the data, e.g. if there are any differences in the mean weight of cars made in either Japan or Europe.\nTo more effectively visualize such general trends in the data, we can create plots of statistical summaries, such as means and medians.\nIn Altair (and pandas) these are referred to as data aggregations."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "href": "modules/module1/slides/module1_07.html#data-aggregations-are-built-into-altair",
    "title": "Aggregations, lines, and layers",
    "section": "Data aggregations are built into Altair",
    "text": "Data aggregations are built into Altair\n\nalt.Chart(cars).mark_point().encode(\n    x='mean(Weight_in_lbs)',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nTo plot the means of weight and mileage, we could use pandas to first calculate the mean values, and then plot the resulting dataframe in Altair.\nThis is powerful since we can access all aggregations built into pandas, but it is a bit verbose for simple common operations, such as the mean.\nFortunately, Altair has shortcuts for plotting simple aggregations where you provide the name of the aggregation together with the name of the column inside a string as in the example in this slide.\nThe Altair documentation includes a table with all available aggregations.\nIn this visualization, we can detect small differences between the means of the Japanese and Europeans cars, which was not discernible when we plotted all the points.\nWhether this difference is big enough to reach a different conclusion than when inspecting the previous plots depends on our application and the purpose of the data exploration."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time",
    "text": "Plotting aggregations to visualize trends over time\n\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\n...\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n...\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n...\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n...\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n...\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n...\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n...\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nAggregations are often helpful when comparing trends over time, especially when there are multiple groups in the data. In the cars dataset, there is a Year column, indicating when the car was made.\nOften when there is a notion of time in the data, it is interesting to see how values in the dataframe change over time.\nIn this case, we might be interested in knowing whether newer cars are more fuel-efficient than older ones.\nPresumably, they should be, but does it differ depending on where the car was made?\nLet’s find out!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "href": "modules/module1/slides/module1_07.html#plotting-aggregations-to-visualize-trends-over-time-works-well",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting aggregations to visualize trends over time works well",
    "text": "Plotting aggregations to visualize trends over time works well\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\n\n\n\n\n\n\n\nTo visualize the mean mileage for each year of all cars, we want to perform the aggregation on the Miles_per_Gallon column while leaving the Year column intact.\nAs you can see this plot one value (the mean) for each year in the dataframe.\nHere we can see that the observations in this dataframe span the years 1970-1982 and it does indeed look like the mileage is getting better over time as we expected!"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "href": "modules/module1/slides/module1_07.html#plotting-all-data-to-visualize-trends-over-time-is-not-effective",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting all data to visualize trends over time is not effective",
    "text": "Plotting all data to visualize trends over time is not effective\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nAs a comparison with the previous slide, if we instead of the mean would plot all the data points for each year, it would be much more difficult to see the pattern over time as you can see here."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-points-to-visualize-trends-over-time-is-not-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting points to visualize trends over time is not ideal",
    "text": "Plotting points to visualize trends over time is not ideal\n\nalt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nIf we try to explore the mileage over time while grouping the cars according to their origin, it is a bit difficult to immediately recognize which points belong to which group.\nIn fact, using points for visualizing trends is not ideal, and lines are often preferred as we will see in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "href": "modules/module1/slides/module1_07.html#plotting-lines-to-visualize-trends-over-time-is-ideal",
    "title": "Aggregations, lines, and layers",
    "section": "Plotting lines to visualize trends over time is ideal",
    "text": "Plotting lines to visualize trends over time is ideal\n\nalt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\n\n\n\n\n\n\n\nOne key advantage of line plots is that they connect all the observations that belong to the same group presenting them as one unified graphical object (one line), which is easy for us to distinguish when looking at the plot instead of trying to connect the dots mentally.\nAnother advantage is that the slope of the line makes it easier to see if the value from one year to another is increasing or decreasing.\nAltair grammar lets us switch from a point plot to a line plot, by only changing mark_point() to mark_line(), and keeping the rest of the code as-is.\nIn this plot, we can clearly compare the mileage trends over time to conclude that cars from all origins improved their mileage, and that the trajectory and mileage values are the most similar between Europe and Japan."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "href": "modules/module1/slides/module1_07.html#combining-a-line-with-a-set-of-points-via-layers",
    "title": "Aggregations, lines, and layers",
    "section": "Combining a line with a set of points via layers",
    "text": "Combining a line with a set of points via layers\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\npoint = alt.Chart(cars).mark_point().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + point\n\n\n\n\n\n\n\n\nTo augment a line plot, it is sometimes helpful to add point marks for each data point along the line, to emphasize where the observations fall.\nThis is helpful since the line drawn between points could be misleading if we have very few points.\nFor example, if you see a straight line, does that mean there are just two points, one in each corner of the line?\nOr are there ten points spread out all along the line?\nTo combine two different types of graphical marks (line and point in this case), we will use Altair’s layering grammar.\nIn this slide, we start by defining each chart separately:\nfirst a line plot,  then a point plot.\nWe can then use the + (plus) operator to combine the two into a layered chart."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "href": "modules/module1/slides/module1_07.html#building-upon-previous-plots-can-save-time-when-combining-charts",
    "title": "Aggregations, lines, and layers",
    "section": "Building upon previous plots can save time when combining charts",
    "text": "Building upon previous plots can save time when combining charts\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point()\n\n\n\n\n\n\n\n\nWe can also create a layered plot by reusing a previous chart definition.\nRather than creating the point plot from scratch, we can start with the line plot, and then invoke the mark_point method.\nWe could also have typed mark_line(point=True), which is a special case for getting points on a line since it is such a common operation, but the layering grammar extends to other plots, so it is more helpful to focus on learning that."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "href": "modules/module1/slides/module1_07.html#showing-raw-values-together-with-the-mean-is-often-helpful",
    "title": "Aggregations, lines, and layers",
    "section": "Showing raw values together with the mean is often helpful",
    "text": "Showing raw values together with the mean is often helpful\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWhen we are combing plots in layers, we can not only change the mark, but also the encodings.\nThis way, we can create a layer with one point per observations, and with a line for the average values.\nFor this, we need to use encode again after creating the first plot, to instruct Altair to use the raw values instead of the mean for the points.\n(note that the axis now has two labels, we will see how to change that in a future lecture).\nThis type of visualization is helpful when we want to show both the underlying data and a statistical summary, which is often helpful for elucidating what the data tells us.\nIt is also a good check to make sure nothing unexpected is going on with the raw values as we saw in the introductory example with Anscombe’s quartet."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "href": "modules/module1/slides/module1_07.html#all-encodings-of-the-base-chart-are-propagated-unless-they-are-overwritten",
    "title": "Aggregations, lines, and layers",
    "section": "All encodings of the base chart are propagated unless they are overwritten",
    "text": "All encodings of the base chart are propagated unless they are overwritten\n\nline = alt.Chart(cars).mark_line().encode(\n    x='Year',\n    y='mean(Miles_per_Gallon)',\n    color='Origin')\n\nline + line.mark_point().encode(y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nWe have already seen that the x and y encoding remain the same in any subsequently created plots.\nHere, we’re showing that this also applies to the colour encoding to illustrate that any encoding will be propagated to all layers unless they are specifically overwritten.\nIf we would only have added colour to the point chart, there would still have been a single line instead of three."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "href": "modules/module1/slides/module1_01.html#what-is-the-purpose-of-visualizing-data",
    "title": "What is Data Visualization?",
    "section": "What is the purpose of visualizing data?",
    "text": "What is the purpose of visualizing data?\nVisualizing data can be used to\n\nAnswer a specific question\nExplore data more generally to generate new questions\n\nTo create an effective visualization, start by\n\nLooking at the data\nThinking about what you want to achieve by making the visualization\nDrawing it out with pen and paper\n\n\nWe often visualize data in order to help us answer a specific question we have about our dataset, but it can also help us generate new questions.\nBefore creating a visualization, it is important that you think about why you are making it, and what you want to achieve from creating this plot.\nIs there a specific question you are trying to answer, like comparing the relationship between two dataframe columns? Or are you creating a plot to help you understand the structure of your data more in general, such as plotting the distribution of each dataframe column?\nIn either case, it can be extremely helpful to draw out your plot with pen and paper first. This helps you think about if the plot you are creating makes sense or if there is another plot better suited for the task at hand.\nDrawing with pen and paper also makes it easier to write the code afterwards, since you clearly know what you are expecting the visualization to look like."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "href": "modules/module1/slides/module1_01.html#why-bother-visualizing-data-instead-of-showing-raw-numbers",
    "title": "What is Data Visualization?",
    "section": "Why bother visualizing data instead of showing raw numbers?",
    "text": "Why bother visualizing data instead of showing raw numbers?\nCan you see any differences in the general trends of these four sets of numbers?\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n10\n\n\n\n8.04\n\n\n\n\n\n\n\n\n\n10\n\n\n\n9.14\n\n\n\n\n\n\n\n\n\n10\n\n\n\n7.46\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.58\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n8\n\n\n\n6.95\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.14\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.77\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.76\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n13\n\n\n\n7.58\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.74\n\n\n\n\n\n\n\n\n\n13\n\n\n\n8.50\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.71\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n9\n\n\n\n8.81\n\n\n\n\n\n\n\n\n\n9\n\n\n\n8.77\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n11\n\n\n\n8.33\n\n\n\n\n\n\n\n\n\n11\n\n\n\n9.26\n\n\n\n\n\n\n\n\n\n11\n\n\n\n7.81\n\n\n\n\n\n\n\n\n\n8\n\n\n\n8.47\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n14\n\n\n\n9.96\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.10\n\n\n\n\n\n\n\n\n\n14\n\n\n\n8.84\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.04\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6\n\n\n\n7.24\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.13\n\n\n\n\n\n\n\n\n\n6\n\n\n\n6.08\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.25\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n4\n\n\n\n4.26\n\n\n\n\n\n\n\n\n\n4\n\n\n\n3.10\n\n\n\n\n\n\n\n\n\n4\n\n\n\n5.39\n\n\n\n\n\n\n\n\n\n19\n\n\n\n12.50\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n12\n\n\n\n10.84\n\n\n\n\n\n\n\n\n\n12\n\n\n\n9.13\n\n\n\n\n\n\n\n\n\n12\n\n\n\n8.15\n\n\n\n\n\n\n\n\n\n8\n\n\n\n5.56\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n7\n\n\n\n4.81\n\n\n\n\n\n\n\n\n\n7\n\n\n\n7.26\n\n\n\n\n\n\n\n\n\n7\n\n\n\n6.42\n\n\n\n\n\n\n\n\n\n8\n\n\n\n7.91\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n\n5\n\n\n\n5.68\n\n\n\n\n\n\n\n\n\n5\n\n\n\n4.74\n\n\n\n\n\n\n\n\n\n5\n\n\n\n5.73\n\n\n\n\n\n\n\n\n\n8\n\n\n\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy do we need visualizations to help answer our questions?\nIs it not enough to look at numbers in tables?\nTo understand why visualizations are so powerful, it is helpful to remember that to answer a question, we often have to put the data in a format that is easy for us humans to interpret.\nBecause our number systems have only been around for about 5,000 years, we need to assert effort and train ourselves to recognize structure in numerical data.\nVisual systems, on the other hand, have undergone refinement during 500,000,000 years of evolution, so we can instinctively recognize visual patterns and accurately estimate visual properties such as colours and distances.\nPractically, this means that we can arrive at correct conclusions faster from studying visual rather than numerical representations of the same data.\nFor example, have a look at the four sets of numbers in the table on the slide. Can you see the differences in the general trends between these four sets of numbers? This is a slightly modified version of the original, which was put together by statistician Francis Anscombe in the 70s."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "href": "modules/module1/slides/module1_01.html#although-summary-statistics-are-often-useful-they-dont-tell-the-whole-story",
    "title": "What is Data Visualization?",
    "section": "Although summary statistics are often useful, they don’t tell the whole story",
    "text": "Although summary statistics are often useful, they don’t tell the whole story\nC is the only set with a different mean and standard deviation\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\nX\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.11\n\n\n\n\n\n\n\n\n\n9.00\n\n\n\n7.50\n\n\n\n\n\n\n\n\n\n\n\n\n\nstd\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n1.15\n\n\n\n\n\n\n\n\n\n3.32\n\n\n\n2.03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummaries, such as the mean and standard deviation, are helpful statistical tools that are often useful for detecting the differences between datasets.\nHowever, since they collapse the data into just a few numbers, statistical summaries can’t tell the whole story about the data and there can be important differences between datasets that summaries fail to reveal.\nHere, the mean and standard deviation indicate that set C is slightly different from the other sets of data in terms of the centre of the sample distribution and the spread of that distribution, while the remaining three sets of data have a similar centre and spread."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "href": "modules/module1/slides/module1_01.html#plotting-the-data-immediately-reveals-patterns-in-the-data",
    "title": "What is Data Visualization?",
    "section": "Plotting the data immediately reveals patterns in the data",
    "text": "Plotting the data immediately reveals patterns in the data\nWe could not detect these patterns from only looking at the raw numbers or summary statistics\n\n\n\n\n\n\n\n\n\nHumans are not good at detecting patterns in raw numbers, and we don’t have good intuition about how different distributions of data can contribute to identical statistical summaries.\nBut guess what we excel at?\nDetecting visual patterns!\nIt is immediately clear to us how these sets of numbers differ once they are shown as graphical elements instead of textual objects.\nThis is one of the main reasons why data visualization is such a powerful tool for data exploration and communication.\nIn our example here, we would come to widely different conclusions about the behaviour of the data for the four different data sets.\nSets A and C are roughly linearly increasing at similar rates, whereas set B reaches a plateau and starts to drop, and set D has a constant X-value for all numbers except one big outlier."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "href": "modules/module1/slides/module1_01.html#more-examples-of-plotting-versus-statistical-summaries",
    "title": "What is Data Visualization?",
    "section": "More examples of plotting versus statistical summaries",
    "text": "More examples of plotting versus statistical summaries\n\nSource: Matejka and Fitzmaurice, 2017\n\nA more recent and dynamic illustration of how graphical representations are much easier for us to interpret compared to statistical summaries, is the Datasaurus GIF from Autodesk’s research team in this slide.\nIt displays several different datasets, all with the same mean, standard deviation and correlation between X and Y, but looking at the data graphically shows us how different these datasets actually are."
  },
  {
    "objectID": "modules/module1/module1-11-what_did_we_just_learn.html",
    "href": "modules/module1/module1-11-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "href": "modules/module1/module1-07-aggregations_lines_and_layers.html",
    "title": "3. Aggregations, Lines, and Layers",
    "section": "",
    "text": "3. Aggregations, Lines, and Layers\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "3. Aggregations, Lines, and Layers"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "href": "modules/module1/module1-03-how_can_we_visualize_data.html",
    "title": "2. How can we visualize data?",
    "section": "",
    "text": "2. How can we visualize data?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "2. How can we visualize data?"
    ]
  },
  {
    "objectID": "modules/module1/module1-01-what_is_data_visualization.html",
    "href": "modules/module1/module1-01-what_is_data_visualization.html",
    "title": "1. What is Data Visualization?",
    "section": "",
    "text": "1. What is Data Visualization?\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "1. What is Data Visualization?"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_00.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\nBy the end of the course, students are expected to be able to:\n\nUse the Altair grammar of graphics to create data visualizations.\nSelect an appropriate visualization for the data.\nPerform exploratory data analysis on a dataset.\nEffectively communicate findings with figures.\nInterpret data visualizations to answer questions and formulate follow-up questions.\n\n\nIn this module, you will learn how to use Altair to create data visualizations, choose the right visualizations for your data, explore datasets, and effectively communicate your analytical findings."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#prerequisites",
    "href": "modules/module0/slides/module0_00.html#prerequisites",
    "title": "Welcome!",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we proceed to Module 1, it is important to make sure you have a solid foundation of coding in Python."
  },
  {
    "objectID": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "href": "modules/module0/slides/module0_00.html#have-you-taken-programming-in-python-for-data-science",
    "title": "Welcome!",
    "section": "Have you taken Programming in Python for Data Science?",
    "text": "Have you taken Programming in Python for Data Science?\nMake sure you are familiar with basic Python programming concepts as they are essential for this course."
  },
  {
    "objectID": "modules/module0/module0-01-data_visualization.html",
    "href": "modules/module0/module0-01-data_visualization.html",
    "title": "1. Data Visualization",
    "section": "",
    "text": "1. Data Visualization\n\nVideoSlides",
    "crumbs": [
      "**M0. Visualization Intro**",
      "1. Data Visualization"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Data Visualization!",
    "section": "",
    "text": "Welcome to Data Visualization!\nThis course is part of the Key Capabilities for Data Science program and covers topics related to data visualization.\nIn this course we will learn how to (and how not to) visualize data. We will learn about the grammar of visualization and how it’s implemented in the “Altair” package to create our figures. In addition to common statistical visualizations, we will learn how to tell stories with data, create geographical visualizations, and bring out plots to life by adding interactive elements. Together, these skills will allow us to create effective data visualizations that strengthen our own exploratory data analysis skills and our ability to communicate insights to others. Select the first module in the sidebar to the left to get started.\nCourse prerequisites: Programming in Python for Data Science"
  },
  {
    "objectID": "modules/module0/module0-02-prerequisite_confirmation.html",
    "href": "modules/module0/module0-02-prerequisite_confirmation.html",
    "title": "1.1. Prerequisite Confirmation",
    "section": "",
    "text": "1.1. Prerequisite Confirmation",
    "crumbs": [
      "**M0. Visualization Intro**",
      "&nbsp;&nbsp; 1.1. Prerequisite confirmation"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module-learning-outcomes.html",
    "href": "modules/module1/module1-00-module-learning-outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "href": "modules/module1/module1-02-true_or_false_data_visualization.html#true-or-false-data-visualization",
    "title": "1.1. Exercises",
    "section": "True or False: Data Visualization",
    "text": "True or False: Data Visualization",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#test-your-knowledge-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#true-or-false-visualization-libraries",
    "title": "2.1. Exercises",
    "section": "True or False: Visualization Libraries",
    "text": "True or False: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "href": "modules/module1/module1-04-test_your_knowledge_visualization_libraries.html#your-first-plot",
    "title": "2.1. Exercises",
    "section": "Your First Plot",
    "text": "Your First Plot\nInstructions: Be patient when running a coding exercise for the first time, it can take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output and submit it to validate if you were correct.\nLet’s use the same vehicle dataset we saw in the lecture, but visualize the relationship between two different columns.\nThe data has already been imported for you in this exercise.\nHere is what it looks like:\n\n\n\n\n\n\nTasks:\n\nFill out the missing fields in the Altair plot in order to create a scatter plot.\nThe cars’ Horsepower should be on the y-axis and their Weight_in_lbs on the x-axis.\nColor the points by the Origin of the cars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nAre the column names expressed in quotes, e.g. y='Horsepower'?\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "href": "modules/module1/module1-08-questions_on_how_plots_are_created.html#test-your-knowledge-visualization-libraries",
    "title": "3.1. Exercises",
    "section": "Test Your Knowledge: Visualization Libraries",
    "text": "Test Your Knowledge: Visualization Libraries",
    "crumbs": [
      "**M1. Why Visualize Data?**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse Altair’s grammar of graphics.\nCreate point and line visualizations in Altair.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "href": "modules/module1/slides/module1_03.html#there-are-two-types-of-visualization-approaches",
    "title": "How Can We Visualize Data?",
    "section": "There are two types of visualization approaches",
    "text": "There are two types of visualization approaches\nWhen learning about data visualization, it is helpful to distinguish between the following two approaches to visualization:\n\nImperative\nDeclarative\n\n\nThere are a plethora of visualization packages in Python.\nThis rich selection can be beneficial but it is also confusing, especially when starting out and trying to decide which package to choose.\nWhen learning about data visualization, it is helpful to distinguish between plotting packages that follow either an imperative or a declarative visualization philosophy."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "href": "modules/module1/slides/module1_03.html#imperative-low-level-plotting-focuses-on-plot-mechanics",
    "title": "How Can We Visualize Data?",
    "section": "Imperative (low level) plotting focuses on plot mechanics",
    "text": "Imperative (low level) plotting focuses on plot mechanics\n\nFocus on plot construction details.\n\nOften includes loops, low-level drawing commands, etc.\n\nSpecify how something should be done\n\n“Draw a red point for every observation that has value X in column A, a blue point for every observation that has value Y in column A, etc.”\n\nMinute control over plotting details, but laborious for complex visualization.\n\n\nImperative (or low level) plotting packages focus on plot construction details such as how to implement the visualization in terms of for-loops, low-level drawing commands, etc.\nThis approach gives us minute control over what is plotted, but it becomes quite laborious when we need to plot larger dataframes, or create more complex visualizations."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "href": "modules/module1/slides/module1_03.html#the-data-we-will-be-plotting",
    "title": "How Can We Visualize Data?",
    "section": "The data we will be plotting",
    "text": "The data we will be plotting\n\n\n\n\nCountry\n\n\nArea\n\n\nPopulation\n\n\n\n\n\n\nRussia\n\n\n17098246\n\n\n144386830\n\n\n\n\nCanada\n\n\n9984670\n\n\n38008005\n\n\n\n\nChina\n\n\n9596961\n\n\n1400050000\n\n\n\n\n\nIn the example in the next slide, we will plot the area and the population for the three largest countries in the world to see how they compare. This is the table we are plotting."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-imperative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of imperative plotting",
    "text": "Example of imperative plotting\n# Pseudocode\ncolors = ['blue', 'red', 'yellow']\nplot = create_plot()\nfor row_number, row_data in enumerate(dataframe):\n    plot.add_point(x=row_data['Area'], y=row_data['Population'], color=colors[row_number])\n\n\n\n\n\n\n\n\n\nFor this example, we will use Python-inspired pseudocode, which is code that is made up and designed so that it is less complex and easier to read than real programming languages.\nThis helps us focus on understanding the concepts of plotting instead of getting hung up on the code syntax details of a particular package.\nYou can see that an imperative approach to plotting this data would be to first create the plot and then loop through the dataframe to add a point for each country one by one.\nTo colour the points, we need to manually create a sequence of colours that we can access inside the loop.\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou can see that one of the countries is bigger than the others, and one of the countries has a much larger population, but without seeing the code, it is not possible to know which colour represents which country.\nWe could add a legend by creating it explicitly and adding one coloured dot per iteration in the loop."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "href": "modules/module1/slides/module1_03.html#declarative-high-level-plotting-focuses-on-the-data",
    "title": "How Can We Visualize Data?",
    "section": "Declarative (high level) plotting focuses on the data",
    "text": "Declarative (high level) plotting focuses on the data\n\nFocus on data and relationships.\n\nOften includes linking columns to visual channels.\n\nSpecify what should be done\n\n“Assign colors based on the values in column A”\n\nSmart defaults give us what we want without complete control over minor plotting details.\n\n\nDeclarative (or high level) plotting packages declare links between dataframe columns and visual channels, such as the x-axis, y-axis, colour, etc.\nThis means that you can provide a high-level specification of what you want the visualization to include, and the plot details are handled automatically.\nIn summary, declarative visualization tools let you think about data and relationships, while imperative visualization tools focus on plot construction details."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "href": "modules/module1/slides/module1_03.html#example-of-declarative-plotting",
    "title": "How Can We Visualize Data?",
    "section": "Example of declarative plotting",
    "text": "Example of declarative plotting\n# Pseudocode\npoint_plot(data=dataframe, x='Area', y='Population', color='Country')\n\n\n\n\n\n\n\n\n\nThe visualization on this page is an example of what a plot could look like when run with real code similar to our pseudocode.\nYou will notice that this time the plot also includes a legend without us having to create it explicitly, which is a common convenience in declarative plotting packages."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "href": "modules/module1/slides/module1_03.html#a-high-level-grammar-of-graphics-helps-us-compose-plots-effectively",
    "title": "How Can We Visualize Data?",
    "section": "A high-level grammar of graphics helps us compose plots effectively",
    "text": "A high-level grammar of graphics helps us compose plots effectively\n\nSimple grammatical components combine to create visualizations.\nVisualization grammars often consist of three main components:\n\nCreate a chart linked to a dataframe.\nAdd graphical elements (such as points, lines, etc).\nEncode dataframe columns as visual channels (such as x, etc).\n\n\n# Pseudocode\nchart(dataframe).add_points().encode_columns(x='Area', y='Population', color='Country')\n\nThe declarative plotting concept can be implemented in different ways.\nIn the previous slide, we had a dedicated function for creating the pointplot, and there would be a separate function for creating a lineplot, barplot, etc.\nWith this approach, it is often not easy to combine plots together, unless there is a specific function for that purpose and the three bullets points on this slide are all executed by this single function.\nAnother way to use declarative plotting is via a visualization grammar.\nGenerally, a grammar governs how individual parts come together to compose more complex constructs.\nFor example, a linguistic grammar decides how words and phrases can be combined into coherent sentences. A data visualization grammar determines how to combine individual parts of the plotting syntax to create complete visualization.\nIn the example on this slide, you can see that the three bullet points are now broken down into one main function to create the chart linked to the data, and then we build upon this by adding the graphical elements (add_points()) and the encoding of the columns to properties of this chart (encode_columns()).\nBy combining these three grammatical components in different ways, we can build a wide range of visualizations, without memorizing a unique function for each plot type.\nThanks to this grammatical visualization approach, we also only require minimal changes to our code to change the type of plot."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "href": "modules/module1/slides/module1_03.html#the-python-plotting-landscape",
    "title": "How Can We Visualize Data?",
    "section": "The Python plotting landscape",
    "text": "The Python plotting landscape\n\n\nNow that we know the basic concepts of how data can be visualized, let’s select a Python package and get coding!\nIn this image, you can see the most commonly used Python plotting packages.\nThere are many more, but these are the ones you are the most likely to hear about, so it is good to know that they exist.\nThe text to the left in the image is a legend to explain the colours used for the different Python packages (blue for high level, declarative packages and orange for low-level, imperative packages).\nAs you can see there are several high and low-level language, so how do we chose?\nIn this course we will use Altair, because it is a powerful declarative visualization tool with a clear and consistent grammar that also allows us to add interactive components to our plots, such as tooltips and selections.\nWe have also included some of the most common visualization packages for the web which are built-in Javascript and coloured in white.\nThe reason we mention these is that the Altair library is a little bit of Python code connected to an already existing powerful JavaScript package called VegaLite, which in turns builds on D3, the most dominant visualization package on the web today.\nBy leveraging these well-established JavaScript visualization packages Altair can create plots that work natively on the web and includes interactive features without reinventing the wheel.\nSince Altair and VegaLite are relatively new visualization libraries, they don’t yet support every single plot type out there, but they more than make up for it with their ease of use and support for powerful interactive visualizations, as we will see later."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "href": "modules/module1/slides/module1_03.html#sample-data-can-be-found-in-altairs-companion-package-vega_datasets",
    "title": "How Can We Visualize Data?",
    "section": "Sample data can be found in Altair’s companion package vega_datasets",
    "text": "Sample data can be found in Altair’s companion package vega_datasets\n\nfrom vega_datasets import data\n\ncars = data.cars()\ncars\n\n\n\n\n\n\n\n\nName\nMiles_per_Gallon\nCylinders\nDisplacement\n...\nWeight_in_lbs\nAcceleration\nYear\nOrigin\n\n\n\n\n0\nchevrolet chevelle malibu\n18.0\n8\n307.0\n...\n3504\n12.0\n1970-01-01\nUSA\n\n\n1\nbuick skylark 320\n15.0\n8\n350.0\n...\n3693\n11.5\n1970-01-01\nUSA\n\n\n2\nplymouth satellite\n18.0\n8\n318.0\n...\n3436\n11.0\n1970-01-01\nUSA\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n403\ndodge rampage\n32.0\n4\n135.0\n...\n2295\n11.6\n1982-01-01\nUSA\n\n\n404\nford ranger\n28.0\n4\n120.0\n...\n2625\n18.6\n1982-01-01\nUSA\n\n\n405\nchevy s-10\n31.0\n4\n119.0\n...\n2720\n19.4\n1982-01-01\nUSA\n\n\n\n\n406 rows × 9 columns\n\n\n\n\nBefore we start visualizing data, we need to select a dataset and often also a question we want to answer.\nAltair works with dataframes in the “tidy” format (which we talked about in the Programming in Python for Data Science course), which means that they should consist of rows with one observation each and a set of named data columns with one feature each (you might also have heard these called fields or variables, but we will stick to columns for clarity).\nIn this course, we will often use data from the vega-datasets package, which has many plot-friendly practice datasets available as Pandas dataframes and can be loaded as demonstrated in this slide. We can use these datasets by importing the data module from the vega_datasets packages as in this slide. Here, our data contains the name of different cars and some attributes relating to each car. There are many interesting questions we could ask from this data set! For our first plot, let’s explore the relationship between how heavy a car is (the Weight_in_lbs column) and how good gas mileage it has (theMiles_per_gallon column).\nBefore starting to code the visualization, take a few seconds and think about what you would expect the relationship between these two columns to look like when you plot it."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "href": "modules/module1/slides/module1_03.html#adding-graphical-elements-via-marks",
    "title": "How Can We Visualize Data?",
    "section": "Adding graphical elements via marks",
    "text": "Adding graphical elements via marks\n\nimport altair as alt\n\nalt.Chart(cars).mark_point()\n\n\n\n\n\n\n\n\nHere we assigned a shorter name (alt) to the Altair library when importing it to save us some typing later. The Altair syntax is similar to the grammar of graphics pseudocode we saw a few slides ago. The fundamental object in Altair is the Chart, which takes a data frame as a single argument, e.g. alt.Chart(cars).\nAfter the chart object has been created, we can specify how the graphical element should look that we use to visualize the data. This is called a graphical mark in Altair, and in this slide, we have used mark_point() to show the data as points.\nSince we have not specified which columns should be used for the x and y axes, we appear to only see one point in this plot since all the data is plotted on top of each other in the same location.\nTo the right of the chart, there is a button with three dots on it. don’t worry about it right now, we will explain what this is for at the end of the chapter."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "href": "modules/module1/slides/module1_03.html#encoding-columns-as-visual-channels",
    "title": "How Can We Visualize Data?",
    "section": "Encoding columns as visual channels",
    "text": "Encoding columns as visual channels\nMapping a dataframe column to the x-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs')\n\n\n\n\n\n\n\n\nTo visually separate the points, we can encode columns in the dataframe as visual channels, such as the axes or colours of the plot.\nHere, we encode the column Miles_per_Gallon as the x-axis. For Pandas data frames, Altair automatically determines an appropriate data type for the mapped column, which in this case is quantitative (or numerical) and shows the numbers under the axis.\nYou can see that there are several short black lines spread out evenly on the x-axis. These are called axis ticks and help us see where the values of this dataframe column lie along the axis.\nThe faint gray lines are called grid lines and extend the locations of the axis ticks so that it is easy to compare their position to the points.\nThis is particularly useful when the points might be further away from the axis ticks, such as in the next slide."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-y-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the y-scale",
    "text": "Mapping a dataframe column to the y-scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon')\n\n\n\n\n\n\n\n\nBy spreading out the data along both the x and y-axis, we can answer our initial question about the relationship between car weight and gas mileage. as it appears that the heavier cars are the ones that have the poorest mileage.\nAlthough we might have expected this to be the case, visualizing all the data points also provides information on the nature of the relationship between weight and mileage.\nIt appears that the x-y points don’t simply follow a straight line, but rather a curved line that where the mileage drop quickly when moving away from the lightest cars, but then decreases more slowly throughout the remainder of the data.\nThis rich, easily interpretable display of information is one of the main advantages of visualizing data and later in the course, we will talk more about the different type of relationships, such as linear, exponential, etc."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-numerical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a numerical dataframe column to the colour scale",
    "text": "Mapping a numerical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Horsepower')\n\n\n\n\n\n\n\n\nIs there a relationship between horsepower and car weight, or fuel-efficiency?\nTo enrich this display of information further, we can colour the points according to a column in the dataframe. When we encode a column as the colour channel Altair will automatically figure out an appropriate colour scale to use, depending on whether the data is numerical, categorical, etc. Here we have indicated that we want to colour the points according to the car’s horsepower, which indicated how powerful its engine is.\nWe can see that the heavier cars have more powerful engines, than the lighter ones, but when using colour for a numerical comparison like this, makes it is harder to tell whether the relationship follows a straight line or is of another nature, so this encoding is mostly useful as an approximate indication of the horsepower.\nWe can also observe a relationship between the horsepower of a vehicle and the fuel efficiency. It appears that cars with greater horsepower (the points with a darker shade of blue) are less efficient with their fuel since miles per Gallon is much lower.\nIn the next module, we will learn more in detail about which encodings are most suitable for different comparisons."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-categorical-dataframe-column-to-the-colour-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a categorical dataframe column to the colour scale",
    "text": "Mapping a categorical dataframe column to the colour scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin')\n\n\n\n\n\n\n\n\nIn the previous slide, a continuous, gradually increasing colour scale was used to visualize the gradual increase in the numerical column Horsepower. In this slide, we instead chose to colour the points per the categorical column Origin (where the car was made).\nAs you can see, Altair detects that this column contains categorical data (with the help of pandas) and picks a different colour scale to facilitate distinction between the categories. As in the previous slide,\nAltair automatically adds a helpful legend, and we can see that the heavier, more powerful cars are primarily manufactured in the US, while the lighter more fuel-efficient ones are manufactured in Europe and Japan (remember that this is true for this particular dataset, and not necessarily all cars)."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-shape-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the shape scale",
    "text": "Mapping a dataframe column to the shape scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin')\n\n\n\n\n\n\n\n\nAlthough Altair’s colour scales are designed to be effective and easy to interpret, we can make the categories in our plot even more distinct by encoding the same categorical column as both colour and shape.\nThis also makes visualizations much easier to interpret and understand for anyone with visual colour deficiency (about 10% of the population). We will talk more in-depth about colour theory in a later module."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "href": "modules/module1/slides/module1_03.html#mapping-a-dataframe-column-to-the-size-scale",
    "title": "How Can We Visualize Data?",
    "section": "Mapping a dataframe column to the size scale",
    "text": "Mapping a dataframe column to the size scale\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nSometimes a visualization tries to do too much. In this example, we have added the size channel to indicate the engine power.\nAlthough Altair elegantly handles the dual legends, it is difficult for us to discern useful information from this plot. If you go back to the plot where we encoded weight in the colour channel, you can see that the plot is much clearer.\nLater we will learn more about how to efficiently load a visualization with an appropriate amount of information, and what the research indicates regarding which visual channels are the most efficient for communicating information visually."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "href": "modules/module1/slides/module1_03.html#the-action-button-can-be-used-to-save-the-plot",
    "title": "How Can We Visualize Data?",
    "section": "The action button can be used to save the plot",
    "text": "The action button can be used to save the plot\n\nalt.Chart(cars).mark_point().encode(\n    x='Weight_in_lbs',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin',\n    size='Horsepower')\n\n\n\n\n\n\n\n\nThis is the same visualization as from the last slide, and we will just use it as an example.\nThe button to the right of the chart with three dots on it is called the “action button”. and clicking it will bring up a menu.\nThe first two items in ’s menu can be used to save the chart, either in an image-based PNG-format or a text-based SVG-format.\nWe will also be learning about programmatic ways to save our charts later in the course.\nThe last three menu items relate to the library VegaLite, which is what we mentioned Altair is built upon, but we will not be using these in this course."
  },
  {
    "objectID": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 1",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nExplain the importance of data visualizations.\nUse the grammar of graphics presented here.\nTransform data directly in Altair instead of pandas.\nCombine graphical marks via layering.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module2/module2-01-effective_use_of_visual_channels.html",
    "href": "modules/module2/module2-01-effective_use_of_visual_channels.html",
    "title": "1. Effective Use of Visual Channels",
    "section": "",
    "text": "1. Effective Use of Visual Channels\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "1. Effective Use of Visual Channels"
    ]
  },
  {
    "objectID": "modules/module2/module2-03-area_charts.html",
    "href": "modules/module2/module2-03-area_charts.html",
    "title": "2. Area Charts",
    "section": "",
    "text": "2. Area Charts\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "2. Area Charts"
    ]
  },
  {
    "objectID": "modules/module2/module2-05-bar_charts_and_histograms.html",
    "href": "modules/module2/module2-05-bar_charts_and_histograms.html",
    "title": "3. Bar Charts and Histograms",
    "section": "",
    "text": "3. Bar Charts and Histograms\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "3. Bar Charts and Histograms"
    ]
  },
  {
    "objectID": "modules/module2/module2-07-creating_subplots_via_faceting.html",
    "href": "modules/module2/module2-07-creating_subplots_via_faceting.html",
    "title": "4. Creating Subplots via Faceting",
    "section": "",
    "text": "4. Creating Subplots via Faceting\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "4. Creating Subplots via Faceting"
    ]
  },
  {
    "objectID": "modules/module2/module2-09-what_did_we_just_learn.html",
    "href": "modules/module2/module2-09-what_did_we_just_learn.html",
    "title": "5. What Did We Just Learn?",
    "section": "",
    "text": "5. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M2. Visual Encoding Channels**",
      "5. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others",
    "href": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others",
    "title": "Effective Use of Visual Channels",
    "section": "Comparing sizes is easier for some geometrical objects than for others",
    "text": "Comparing sizes is easier for some geometrical objects than for others\n\n\nIn the image in this slide, try to estimate how many times larger the big circle is compared to the small one."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others-1",
    "href": "modules/module2/slides/module2_01.html#comparing-sizes-is-easier-for-some-geometrical-objects-than-for-others-1",
    "title": "Effective Use of Visual Channels",
    "section": "Comparing sizes is easier for some geometrical objects than for others",
    "text": "Comparing sizes is easier for some geometrical objects than for others\n\n\nIn the image in this slide, try to estimate how many times larger the big bar is compared to the small one."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#both-the-circles-and-rectangles-differ-by-7x",
    "href": "modules/module2/slides/module2_01.html#both-the-circles-and-rectangles-differ-by-7x",
    "title": "Effective Use of Visual Channels",
    "section": "Both the circles and rectangles differ by 7x",
    "text": "Both the circles and rectangles differ by 7x\n\n\nIn both cases, the answer is seven times bigger. Even if you guessed both of these exactly correct, most people find it is much easier to compare the length or position of the bars rather than the area of the circles.\nFor the circles, you might even have hesitated at exactly what to compare when we said “how many time larger”, were you supposed to compare the area or the diameter?\nThis is less ambiguous for bars as long as their widths are kept the same.\nThis is important to keep in mind, especially when communicating to others via visualization, but also when creating plots for yourself.\nThese two examples are originally from Jeffrey Heer’s PyData talk, who is a visualization researcher at the University of Washington and whose research group created the D3 and VegaLite packages which Altair is based on."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#summary-of-visual-channel-efficiency",
    "href": "modules/module2/slides/module2_01.html#summary-of-visual-channel-efficiency",
    "title": "Effective Use of Visual Channels",
    "section": "Summary of visual channel efficiency",
    "text": "Summary of visual channel efficiency\n\n\nEven if you got both these right yourself, the fact that many people prefer one over the other means that in order for you to create effective visualizations you need to know which visual channels are the easiest for humans to decode.\nLuckily, there has been plenty of research in this area, which can be summarized in the schematic on this slide.\nPosition is by far the best and therefore we should put our most important comparison there.\nUsing position often means that we can’t use other things such as length or angle (like the angle in a pie chart), but we can add size or colour to represent other relationships.\nEven if it is hard to tell exact information from these (is this colour/dot 2x darker/bigger than another?) they are good to give an idea of trends in the data."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#dont-use-3d-without-a-good-reason",
    "href": "modules/module2/slides/module2_01.html#dont-use-3d-without-a-good-reason",
    "title": "Effective Use of Visual Channels",
    "section": "Don’t use 3D without a good reason",
    "text": "Don’t use 3D without a good reason\nUnnecessary 3D makes plot interpretation harder\n\n\nThe biggest issue with using 3D is when it is used unnecessarily (like a 3D bar or pie chart), as the only way to compare position (like a 3D scatter plot), and when they are represented on a 2D medium like a paper where they can’t be rotated.\nIn this slide, we see a 3D bar chart, where it looks like the values of the bars are around A=0.7, B=1.7, C=2.7 and D=3.7.\nHowever, this is only because of the angle of the camera in the plot, the actual values here of A, B, C, and D are actually 1, 2, 3, and 4, respectively."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#meaningful-3d-can-facilitate-plot-interpretation",
    "href": "modules/module2/slides/module2_01.html#meaningful-3d-can-facilitate-plot-interpretation",
    "title": "Effective Use of Visual Channels",
    "section": "Meaningful 3D can facilitate plot interpretation",
    "text": "Meaningful 3D can facilitate plot interpretation\n\n\nSometimes 3D can be useful, like a topographical map or a protein folding visualization.\nIn this slide, you can see the interesting work is done with the Rayshader library that maps in 3D in an intuitive way that incorporates reasonable camera rotation around the objects.\nThe example to the right visualizes the bend in space-time via 3D position (depth), eliminating the need for an additional 2D plot as in the example to the left.\nBut be cautious, we will see in the next slides that even in systems such as blood vessels, which are naturally organized in three dimensions, it is still mentally more complex to interpret a 3D visualization accurately.\nResearcher Claus Wilke’s has authored a good chapter on this topic if you are interested to learn more."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#properly-designed-visualizations-help-saving-lives",
    "href": "modules/module2/slides/module2_01.html#properly-designed-visualizations-help-saving-lives",
    "title": "Effective Use of Visual Channels",
    "section": "Properly designed visualizations help saving lives",
    "text": "Properly designed visualizations help saving lives\n\n\nHow much these best practices actually matters might be a bit abstract until you gain personal experience from it, therefore, I want to include a concrete example of how changing visualization methods improved an important clinical outcome.\nHeart disease is the most common cause of death, yearly killing almost 9 million people, or as many as diabetes, dementia, neonatal conditions respiratory infections all together.\nBy detecting regions of low shear stress in the arteries around the heart, doctors can identify patients that are on their way to develop heart disease and take action early to improve the patient’s survival chances.\nTo evaluate the shear stress in the arteries, the regular practice is to use a digital 3D representation of the artery coloured according to the amount of shear stress which is what you can see in this picture.\nThe colormap changes from blue for the areas of interest (low stress) to cyan, green, yellow, and red for higher stress.\nA few years ago, a research group set out to test how effective this type of visualization was compared to a couple of alternatives.\nWhen using the visualization you see in this slide, about 40% of the areas of low shear stress were correctly identified by doctors."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#changing-the-colour-scale-almost-doubled-the-accuracy",
    "href": "modules/module2/slides/module2_01.html#changing-the-colour-scale-almost-doubled-the-accuracy",
    "title": "Effective Use of Visual Channels",
    "section": "Changing the colour scale almost doubled the accuracy",
    "text": "Changing the colour scale almost doubled the accuracy\n\n\nThe first thing this research group tested was the effect of testing the colour scale to one that is easier to interpret and makes the important areas of low shear stress stand out more, since they are highlighted in a bright red colour, and the rest are in black and white.\nBy this seemingly small modification, they identified that the percentage of correct analysis almost doubled, from 40% to 70%.\nWe will talk more about choosing the correct colour scales in the later modules of this course."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#changing-from-3d-to-2d-improved-the-further-accuracy",
    "href": "modules/module2/slides/module2_01.html#changing-from-3d-to-2d-improved-the-further-accuracy",
    "title": "Effective Use of Visual Channels",
    "section": "Changing from 3D to 2D improved the further accuracy",
    "text": "Changing from 3D to 2D improved the further accuracy\n\n\nThe next modification the researcher tested was to change from a 3D representation of the blood vessels to a 2D representation.\nAlthough a 3D representation is more anatomically correct here, it is also more cognitively demanding for us to process, and some areas can cover others so it is harder to get a quick overview of the vessels.\nIn the 2D visualization, the blood vessels and their branching points are shown in a schematic that is less cognitively demanding to interpret. This representation was also shown to be more effective, as 90% of the low shear stress areas were now correctly identified.\nOverall, these two tweaks more than doubled the outcome accuracy, from 40% to 90%.\nA huge increase from modification that might have seemed to be a mere matter of taste unless you knew visualization theory!\nSo, if anyone tells you that visualization of data is not as important as other components, you can tell them about this study and ask them what kind of visualization they want their doctor to look at when analyzing their arteries."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#subsetting-the-global-development-data",
    "href": "modules/module2/slides/module2_05.html#subsetting-the-global-development-data",
    "title": "Bar Charts and Histograms",
    "section": "Subsetting the global development data",
    "text": "Subsetting the global development data\n\nimport pandas as pd\n\ngm = pd.read_csv(\"../../data/world-data-gapminder.csv\", parse_dates=[\"year\"])\ngm2018 = gm[gm[\"year\"] == \"2018\"]\ngm2018\n\n\n\n\n\n\n\n\ncountry\nyear\npopulation\nregion\n...\npop_density\nco2_per_capita\nyears_in_school_men\nyears_in_school_women\n\n\n\n\n218\nAfghanistan\n2018-01-01\n36400000\nAsia\n...\n55.7\nNaN\nNaN\nNaN\n\n\n437\nAlbania\n2018-01-01\n2930000\nEurope\n...\n107.0\nNaN\nNaN\nNaN\n\n\n656\nAlgeria\n2018-01-01\n42000000\nAfrica\n...\n17.6\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n38543\nYemen\n2018-01-01\n28900000\nAsia\n...\n54.8\nNaN\nNaN\nNaN\n\n\n38762\nZambia\n2018-01-01\n17600000\nAfrica\n...\n23.7\nNaN\nNaN\nNaN\n\n\n38981\nZimbabwe\n2018-01-01\n16900000\nAfrica\n...\n43.7\nNaN\nNaN\nNaN\n\n\n\n\n178 rows × 14 columns\n\n\n\n\nIn this slide deck, we will continue to work with the gapminder dataset.\nTo make it more suitable for this slide deck let’s subset it to include observations from the year 2018 only.\nWhen filtering on a date using Pandas, we can either type out just the year portion or the entire date string in the format shown in the slide."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#creating-a-bar-chart-of-the-total-population-per-continent",
    "href": "modules/module2/slides/module2_05.html#creating-a-bar-chart-of-the-total-population-per-continent",
    "title": "Bar Charts and Histograms",
    "section": "Creating a bar chart of the total population per continent",
    "text": "Creating a bar chart of the total population per continent\n\nimport altair as alt\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X(\"region\"), \n    alt.Y(\"sum(population)\", title=\"Population\")\n)\n\n\n\n\n\n\n\n\nBar charts are often avoided when visualizing summary statistics where it is important to display the variation in the raw data.\nThis is the case for measures of central tendency, such as the mean and median, which are better represented with other visualizations that we will cover later in the course.\nBar charts are a good choice for representing individual values, such as the number of people living in a country at a specific point in time.\nSome summary statistics are displayed as single values, such as counts of observations and summations, and bar charts are suitable for these as well.\nWe will talk more about how to best represent summary statistics and variation in raw data when we learn about distributions in the next module.\nHere we are answering the question “How many people live in each continent?”, by creating a bar chart of a single value per continent representing the sum of the populations from the countries in that region.\nWe can see that more than half the world’s population is living in Asia, and Oceania is by far the least populated."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#horizontal-bar-charts-are-made-by-switching-the-x-and-y-encoding",
    "href": "modules/module2/slides/module2_05.html#horizontal-bar-charts-are-made-by-switching-the-x-and-y-encoding",
    "title": "Bar Charts and Histograms",
    "section": "Horizontal bar charts are made by switching the x and y encoding",
    "text": "Horizontal bar charts are made by switching the x and y encoding\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X(\"sum(population)\", title=\"Population\"),\n    alt.Y(\"region\")\n)\n\n\n\n\n\n\n\n\nIf we switched x and y, we would create a horizontal bar chart instead.\nAlthough vertical bar charts are more commonly seen, horizontal bar charts are preferred when the labels on the categorical axis become so long that they need to be rotated to be readable in a vertical bar chart.\nSince this is the case for our plot, we will continue to use horizontal bar charts in this slide deck."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#visualizing-counts-of-values-with-bar-charts",
    "href": "modules/module2/slides/module2_05.html#visualizing-counts-of-values-with-bar-charts",
    "title": "Bar Charts and Histograms",
    "section": "Visualizing counts of values with bar charts",
    "text": "Visualizing counts of values with bar charts\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X(\"count()\"),\n    alt.Y(\"region\"))\n\n\n\n\n\n\n\n\nWhat if we wanted to know how many countries there were within each continent?\nSince we already have filtered the data to contain only values from a single year, we know that each country will only occur once in the dataset.\nSo to answer this question, we could count the number of observations/rows in the dataframe for each continent.\nTo count observations in Altair, we can use the aggregation function count().\nWe don’t need to specify a column name for the y-axis, since we are just counting values in each categorical group on the y-axis.\nThe default axis value for counts is “Count of Records”, where “records” is another name for “observations”.\nAs previously, we can clarify what we are visualizing by setting a title which we will demonstrate in the next slide."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#setting-the-axis-title-clarifies-what-we-are-visualizing",
    "href": "modules/module2/slides/module2_05.html#setting-the-axis-title-clarifies-what-we-are-visualizing",
    "title": "Bar Charts and Histograms",
    "section": "Setting the axis title clarifies what we are visualizing",
    "text": "Setting the axis title clarifies what we are visualizing\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region'))\n\n\n\n\n\n\n\n\nHere we use the argument title within alt.X() to edit the title and add a bit of clarity."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#ordering-bars-makes-them-easier-to-interpret",
    "href": "modules/module2/slides/module2_05.html#ordering-bars-makes-them-easier-to-interpret",
    "title": "Bar Charts and Histograms",
    "section": "Ordering bars makes them easier to interpret",
    "text": "Ordering bars makes them easier to interpret\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region', sort='x'))\n\n\n\n\n\n\n\n\nBy default, Altair sorts categorical values in alphabetical order.\nFor most data, it becomes easier to interpret if the bars are sorted from high to low values. An exception to these guidelines is if the categorical axis has a natural order to it, such as weekdays, months, etc.\nThis makes it easier to see trends in the data, and to compare bars of similar height more accurately.\nTo sort the bars, we will use the arguments in the helper functions alt.X and alt.Y.\nAs with all arguments passed to Python functions, we can leave out the parameter names (x= and y=) if we pass the arguments in the order they are defined in the function signature.\nIn this example, we’re typing sort=‘x’ to specify that we want to sort according to the values on the y-axis.\nWhen sorting by value, it is often more visually appealing with the longest bar the closet to the axis line, as in this slide."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#the-longest-bar-should-be-the-closest-to-the-axis-line",
    "href": "modules/module2/slides/module2_05.html#the-longest-bar-should-be-the-closest-to-the-axis-line",
    "title": "Bar Charts and Histograms",
    "section": "The longest bar should be the closest to the axis line",
    "text": "The longest bar should be the closest to the axis line\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region', sort='-x'))\n\n\n\n\n\n\n\n\nIf we for some reason would want the reverse order, we could use the minus sign before the axis reference. This can be helpful in cases where you are making a vertical bar chart since it would then align the tallest bar next to the y-axis."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#a-custom-order-can-be-used-for-the-sort",
    "href": "modules/module2/slides/module2_05.html#a-custom-order-can-be-used-for-the-sort",
    "title": "Bar Charts and Histograms",
    "section": "A custom order can be used for the sort",
    "text": "A custom order can be used for the sort\n\nmy_order = ['Africa', 'Europe', 'Oceania', 'Asia', 'Americas']\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('count()', title='Number of countries'),\n    alt.Y('region', sort=my_order))\n\n\n\n\n\n\n\n\nSometimes there is a natural order to the values on the categorical axis that we want to use for the bars, for example days of the week or months of the year.\nFor situations like this, we can pass a list or array to the sort parameter.\nWe can either create this list manually as we did in this slide, or use the Pandas sort function if we, for example, wanted to sort in reverse alphabetical order.\nTo learn more about important considerations when plotting counts of categorical observations, you can refer to chapter 6 of Fundamental of Data Visualizations."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#using-bars-to-show-counts-of-quantitative-dataframe-columns",
    "href": "modules/module2/slides/module2_05.html#using-bars-to-show-counts-of-quantitative-dataframe-columns",
    "title": "Bar Charts and Histograms",
    "section": "Using bars to show counts of quantitative dataframe columns",
    "text": "Using bars to show counts of quantitative dataframe columns\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy'),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nSo far we have been counting observations in categorical groups (the continents).\nAnother common use of bar charts is to visualize the range and frequency/count of the values in our data. This is often referred to as estimating the “distribution” of the data, which we will talk more about in the next module.\nThis type of chart is so common that it has its own name: histogram.\nIn our data, we might want to answer the question “How long do people around the world live?” or in other words “What is the distribution of life expectancy for different countries?”.\nIf we create a histogram directly for the numerical values its appearance would be very spiky, as you can see in this slide.\nThis happens because there are very few values that are exactly the same.\nFor example, values like 67.2, 69.3, 69.5, etc, would all get their own bar instead of being in the same bar representing the interval 65-70.\nIf we had ordinal values, such as the numbers on a dice, then it would make sense to have one bar per value on the dice, but in the case of quantitative/continuous data as we have here, this is not a good strategy."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#in-a-histogram-each-bar-represents-a-range-of-values",
    "href": "modules/module2/slides/module2_05.html#in-a-histogram-each-bar-represents-a-range-of-values",
    "title": "Bar Charts and Histograms",
    "section": "In a histogram each bar represents a range of values",
    "text": "In a histogram each bar represents a range of values\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=True),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nInstead, we want to create intervals or “bins” that represent ranges of numerical values and then count all the observations within each of these ranges.\nTo enable binning of the x-axis in Altair, we can set bin=True inside alt.X.\nThis automatically calculates a suitable number of bins, and counts up all the values within each group before plotting a bar representing this count.\nIn contrast to bar charts, it is rarely beneficial to make horizontal histograms since the labels are numbers that don’t need to be rotated to be readable.\nYou can also see that we have not changed the title of the y-axis. There isn’t really a more informative title we can substitute for here since the length of each bar simply represents the count of observations/records in each bin.\nNow it is easier to see where the life expectancy of the countries fall. We can see that most countries seem to have a life expectancy between 75 and 80 years and that only very few have one under 60. However, these conclusions will depend on exactly how wide our bins are, which we will talk more about in the next module."
  },
  {
    "objectID": "modules/module2/slides/module2_05.html#narrower-bins-increase-the-resolution-along-the-axis",
    "href": "modules/module2/slides/module2_05.html#narrower-bins-increase-the-resolution-along-the-axis",
    "title": "Bar Charts and Histograms",
    "section": "Narrower bins increase the resolution along the axis",
    "text": "Narrower bins increase the resolution along the axis\n\nalt.Chart(gm2018).mark_bar().encode(\n    alt.X('life_expectancy', bin=alt.Bin(maxbins=30), title='Life expectancy'),\n    alt.Y('count()'))\n\n\n\n\n\n\n\n\nAlthough the automatically calculated number of bins is often appropriate, we might sometimes want to increase the resolution of our visualization by have narrower bins.\nWe can change the number of bins by passing alt.Bin(maxbins=30) to the bin parameter instead of passing the value True.\nNote that you will not get the exact number of bins that you set in maxbins and instead, Altair will find a number that aligns well with the axis ticks within the max you specified (the step parameter can be used to set and exact bin width if desired).\nHere we also changed the title because “binned” is not really necessary and it is largely clear from the axis already that each bar spans a range of numbers.\nWe will talk more about histograms and other ways to represent distributions in the next module, but it is important to remember that they are just a bar chart on a binned axis."
  },
  {
    "objectID": "modules/module2/slides/module2_end.html#module-learning-outcomes",
    "href": "modules/module2/slides/module2_end.html#module-learning-outcomes",
    "title": "What Did we Learn and What to Expect in Assignment 2",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nIn this module students will learn how to\n\nChoose effective visual channels for information display.\nVisualize frequencies with bar plots.\nFacet plots to explore more variables simultaneously.\nCustomize axes labels and scales.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module3/module3-01-how_to_visualize_data_from_a_single_column.html",
    "href": "modules/module3/module3-01-how_to_visualize_data_from_a_single_column.html",
    "title": "1. How To Visualize Data From a Single Column",
    "section": "",
    "text": "1. How To Visualize Data From a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "1. How To Visualize Data From a Single Column"
    ]
  },
  {
    "objectID": "modules/module3/module3-03-visualize_distributions_with_density_plots.html",
    "href": "modules/module3/module3-03-visualize_distributions_with_density_plots.html",
    "title": "2. Visualize Distributions with Density Plots",
    "section": "",
    "text": "2. Visualize Distributions with Density Plots\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "2. Visualize Distributions with Density Plots"
    ]
  },
  {
    "objectID": "modules/module3/module3-05-comparing_multiple_distributions.html",
    "href": "modules/module3/module3-05-comparing_multiple_distributions.html",
    "title": "3. Comparing Multiple Distributions",
    "section": "",
    "text": "3. Comparing Multiple Distributions\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "3. Comparing Multiple Distributions"
    ]
  },
  {
    "objectID": "modules/module3/module3-07-what_did_we_just_learn.html",
    "href": "modules/module3/module3-07-what_did_we_just_learn.html",
    "title": "4. What did we just learn?",
    "section": "",
    "text": "4. What did we just learn?\n\nVideoSlides",
    "crumbs": [
      "**M3. Visualizing Distributions**",
      "4. What did we just learn?"
    ]
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#the-movies-dataset",
    "href": "modules/module3/slides/module3_01.html#the-movies-dataset",
    "title": "Visualizing data from one column",
    "section": "The movies dataset",
    "text": "The movies dataset\n\nimport pandas as pd\n\nmovies = pd.read_csv(\"../../data/movies.csv\")\nmovies\n\n\n\n\n\n\n\n\ntitle\nruntime\nbudget\nrevenue\ngenre\ncountry\nvote_average\n\n\n\n\n0\nFinding Nemo\n100\n94000000\n940335536\nAnimation\nUnited States of America\n3.86\n\n\n1\nPirates of the Caribbean: The Curse of the Bla...\n143\n140000000\n655011224\nFantasy\nUnited States of America\n3.81\n\n\n2\nThe Simpsons Movie\n87\n75000000\n527068851\nAnimation\nUnited States of America\n3.44\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n526\nThe Emoji Movie\n86\n50000000\n66913939\nAnimation\nUnited States of America\n0.63\n\n\n527\nA Dog's Purpose\n100\n22000000\n194647323\nFantasy\nUnited States of America\n3.61\n\n\n528\nBatman: The Killing Joke\n72\n3500000\n3775000\nAnimation\nUnited States of America\n2.94\n\n\n\n\n529 rows × 7 columns\n\n\n\n\nThroughout this module, we will study a dataset of movies containing each movie’s title, runtime, budget, revenue, genre, country of production, and average user rating.\nUpon glancing at the dataframe table in this slide, there are several questions that might come to mind, e.g. - Are high-budget movies more profitable? - Do some countries make more movies of certain genres? - Are some genres rated higher than others? Before diving into these comparisons, we want to understand the data for each of the columns in our dataset.\nLet’s start by looking at the ratings the movies received and explore the best ways to visualize this data"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#visualizing-a-single-column-with-a-point-plot-along-one-axis",
    "href": "modules/module3/slides/module3_01.html#visualizing-a-single-column-with-a-point-plot-along-one-axis",
    "title": "Visualizing data from one column",
    "section": "Visualizing a single column with a point plot along one axis",
    "text": "Visualizing a single column with a point plot along one axis\n\nimport altair as alt\n\nalt.Chart(movies[:5]).mark_point().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nVisualizing data distributions are useful in understanding the values in a dataframe column, as doing this allows us to quickly and easily see both the range and frequency of the values.\nOne of the simplest visualizations to understand a distribution of a single dataframe column is to plot each individual observation as a point.\nThis could be thought of as a one-dimensional scatter plot, where the values are spread out along only one of the plot axes.\nThis visualization works well when there are just a few plots to visualize, and to illustrate this we have filtered the data in this slide."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#single-axis-plots-can-become-saturated-when-there-is-a-lot-of-data-to-plot",
    "href": "modules/module3/slides/module3_01.html#single-axis-plots-can-become-saturated-when-there-is-a-lot-of-data-to-plot",
    "title": "Visualizing data from one column",
    "section": "Single-axis plots can become saturated when there is a lot of data to plot",
    "text": "Single-axis plots can become saturated when there is a lot of data to plot\n\nalt.Chart(movies[:50]).mark_point().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nWhen there are more observations, it becomes difficult to see how many there are at different locations along the axis, since the circular marks are overlapping with each other.\nWhen it becomes hard to tell individual observations apart, we say that a plot becomes “saturated” or “overplotted”. We will talk more about this concept in the next module."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#thinner-marks-avoid-saturation",
    "href": "modules/module3/slides/module3_01.html#thinner-marks-avoid-saturation",
    "title": "Visualizing data from one column",
    "section": "Thinner marks avoid saturation",
    "text": "Thinner marks avoid saturation\n\nalt.Chart(movies[:50]).mark_tick().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nIt is often easier to separate individual observations when they are represented as thin tick marks instead of the circles in the previous slide.\nThe disadvantage of this plot type is that it can be a bit harder to see individual observations. However, when we are visualization many marks, we are often more interested in how the data is distributed in general, rather than looking at individual points.\nThis type of plot with vertical tick marks along one axis is so common that it is sometimes referred to by a special name: “rugplot”.\nInstead of solely remembering plot by their specific names, the visualization grammar of Altair lets us think about visualizations more intuitively by how they are composed, which makes it easy to see the similarities between these plots and the one on the previous slide."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#thinner-marks-also-saturate-for-large-data-sets",
    "href": "modules/module3/slides/module3_01.html#thinner-marks-also-saturate-for-large-data-sets",
    "title": "Visualizing data from one column",
    "section": "Thinner marks also saturate for large data sets",
    "text": "Thinner marks also saturate for large data sets\n\nalt.Chart(movies).mark_tick().encode(\n    x='runtime')\n\n\n\n\n\n\n\n\n\nWhen we increase the number of observations even further it becomes difficult to tell exactly how the data distribution looks, even with these thin marks.\nHere we require another strategy to visualize our data."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#using-histograms-to-visualize-distributions-avoids-saturation-issues",
    "href": "modules/module3/slides/module3_01.html#using-histograms-to-visualize-distributions-avoids-saturation-issues",
    "title": "Visualizing data from one column",
    "section": "Using histograms to visualize distributions avoids saturation issues",
    "text": "Using histograms to visualize distributions avoids saturation issues\n\nalt.Chart(movies).mark_bar().encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    y='count()')\n\n\n\n\n\n\n\n\n\nInstead of visualizing each individual observation, we can use the histograms we learned about in the last module. Histograms divide one axis into groups (or “bins”) and represent the count of observations in each group with a bar.\nIn this plot, we can directly see that most movies are around 100 min in length because all the highest bars are around this value. We would say that this distribution has a single peak of around 100 min.\nSome distributions have multiple peaks which are not necessarily in the center of the distribution, and some have no distinct peaks at all, but are instead more uniformly distributed.\nWe also see a wide variation in the length of movies in the plot, The shortest movie is just 20-30 min long, while the longest is somewhere between 2010 and 220 minutes.\nI wonder if we can explain some of the variation in the movie runtimes by grouping the data according to one of the categorical columns in the dataset. What do you think, which categories could contribute influence the movie length?"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#faceting-is-effective-when-comparing-multiple-distributions",
    "href": "modules/module3/slides/module3_01.html#faceting-is-effective-when-comparing-multiple-distributions",
    "title": "Visualizing data from one column",
    "section": "Faceting is effective when comparing multiple distributions",
    "text": "Faceting is effective when comparing multiple distributions\n\nalt.Chart(movies).mark_bar().encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    y='count()').facet('country')\n\n\n\n\n\n\n\n\n\nLet’s start by comparing the runtimes of movies produced in different countries. This is maybe not the first categorical column that you thought of, but don’t worry, we will look at additional ones later.\nAs we saw in the last module, faceting is a good way to compare multiple distributions and here we use it to create one histogram per production country.\nThis is a little bit of repetition, but we will discuss the histograms in more detail in these slides now that we have learned more about what they represent.\nYou can see that this particular dataset only contains movies made in the UK or the US. Because there are so many more movies made in the US compared to the UK, it is quite hard to tell if there are any meaningful differences between movies from the two countries.\nThe location of the two distributions on the x-axis look quite similar, but from these visualizations alone, we don’t have enough information to tell if the location, number of peaks, and the overall shape is the same between the two distributions."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#independent-y-axis-scales-let-us-study-each-distribution-in-more-detail",
    "href": "modules/module3/slides/module3_01.html#independent-y-axis-scales-let-us-study-each-distribution-in-more-detail",
    "title": "Visualizing data from one column",
    "section": "Independent y-axis scales let us study each distribution in more detail",
    "text": "Independent y-axis scales let us study each distribution in more detail\n\n(alt.Chart(movies).mark_bar().encode(\n    alt.X('runtime', bin=alt.Bin(maxbins=30)),\n    y='count()')\n .facet('country')\n .resolve_scale(y='independent'))\n\n\n\n\n\n\n\n\n\nBy default when faceting, the y-axis is the same for all the subplots. This is often the most suitable choice, because it makes it clear when the total number of observations differ between the groups.\nIf we want to drill down and compare the distribution shape more closely we could define the y-axes to be independent for each facet, as we have done in this slide.\nNow we can get a better view of the UK histogram, which looks like it possibly could be slightly bimodal (it might have two peaks), whereas the US one is clearly unimodal (it has one peak).\nHowever, since we have such few British movies in our dataset, we can’t state this with much confidence; it might just be an artifact from the small sample number, of from which intervals the bins are covering.\nTo be more certain about if there are any meaningful differences between these two histograms, we would need to have a larger sample set from the UK and create multiple visualizations each with a different number of maxbins to see if that changes the histogram appearance.\nMaybe there are other categorical dataframe columns that would better explain the spread in movie length seen in the initial histogram?\nIn the next module, we will explore if there are more distinct differences in movie length based on which genre the movies belong to rather than its production country."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#the-extended-movies-dataset",
    "href": "modules/module3/slides/module3_05.html#the-extended-movies-dataset",
    "title": "Comparing many distributions",
    "section": "The extended movies dataset",
    "text": "The extended movies dataset\n\nimport altair as alt\nfrom vega_datasets import data\n\nmovies_extended = data.movies().dropna(subset=['Major_Genre'])\nmovies_extended\n\n\n\n\n\n\n\n\nTitle\nUS_Gross\nWorldwide_Gross\nUS_DVD_Sales\n...\nDirector\nRotten_Tomatoes_Rating\nIMDB_Rating\nIMDB_Votes\n\n\n\n\n1\nFirst Love, Last Rites\n10876.0\n10876.0\nNaN\n...\nNone\nNaN\n6.9\n207.0\n\n\n2\nI Married a Strange Person\n203134.0\n203134.0\nNaN\n...\nNone\nNaN\n6.8\n865.0\n\n\n3\nLet's Talk About Sex\n373615.0\n373615.0\nNaN\n...\nNone\n13.0\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3198\nZoom\n11989328.0\n12506188.0\n6679409.0\n...\nPeter Hewitt\n3.0\n3.4\n7424.0\n\n\n3199\nThe Legend of Zorro\n45575336.0\n141475336.0\nNaN\n...\nMartin Campbell\n26.0\n5.7\n21161.0\n\n\n3200\nThe Mask of Zorro\n93828745.0\n233700000.0\nNaN\n...\nMartin Campbell\n82.0\n6.7\n4789.0\n\n\n\n\n2926 rows × 16 columns\n\n\n\n\nFor this exercise, we will use an extended movies dataset containing additional genres.\nWe load in that dataset from the vega sample repository and drop all the rows that have a NaN value in the column \"Major Genre\", since we are only interested in comparing the movies that we know belong to a genre.\nThe question we will try to answer in this slide deck is “Which genres have the highest worldwide gross?”."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-histograms",
    "href": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-histograms",
    "title": "Comparing many distributions",
    "section": "Many distributions can’t be effectively compared with histograms",
    "text": "Many distributions can’t be effectively compared with histograms\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('Worldwide_Gross', bin=alt.Bin(maxbins=30)),\n    alt.Y('count()'),\n    alt.Color('Major_Genre'))\n\n\n\n\n\n\n\n\nAs we have seen, histograms are not very effective for comparing multiple distributions, and not at all with this many different groups.\nMost genres have a low worldwide gross and because our histograms are stacked on top of each other the left-most bar dominates with around 2000 movies. It extends the y-axis so that it is hard to see how many observations there are for the highest x-values (but we know there are some since the axis extends that far)."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-densities-either",
    "href": "modules/module3/slides/module3_05.html#many-distributions-cant-be-effectively-compared-with-densities-either",
    "title": "Comparing many distributions",
    "section": "Many distributions can’t be effectively compared with densities either",
    "text": "Many distributions can’t be effectively compared with densities either\n\n(alt.Chart(movies_extended).mark_area().transform_density(\n    'Worldwide_Gross',\n    groupby=['Major_Genre'],\n    as_=['Worldwide_Gross', 'density'])\n .encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('density:Q'),\n    alt.Color('Major_Genre')))\n\n\n\n\n\n\n\n\nAlthough we saw previously that a layered density chart is better than a stacked histogram, it is not effective in comparing this many distributions either. Particularly not when the bulk of the distribution is concentrated in a small area, such as the low x-values in this plot.\nThis density chart shares many of the issues with the histogram from the previous slide, and this visualization is a poor choice for our data.\nWe could try faceting vertically with one density or histogram per facets, but there would be a lot of subplots with this many genres and they might not be that easy to compare when they are in facets far apart.\nSo how can we create an effective comparison between all the genres?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#bar-charts-are-effective-for-comparing-a-single-value-per-group-but-hides-variation",
    "href": "modules/module3/slides/module3_05.html#bar-charts-are-effective-for-comparing-a-single-value-per-group-but-hides-variation",
    "title": "Comparing many distributions",
    "section": "Bar charts are effective for comparing a single value per group but hides variation",
    "text": "Bar charts are effective for comparing a single value per group but hides variation\n\nalt.Chart(movies_extended).mark_bar().encode(\n    alt.X('mean(Worldwide_Gross)'),\n    alt.Y('Major_Genre'))\n\n\n\n\n\n\n\n\nWe could use a barplot if we were only interested in comparing a single value from each distribution, such as the mean or median.\nHowever, this is generally not a good idea because any plot that only shows a single value from a distribution will hide the variation in the data, which could lead us to arrive at incorrect conclusions as you will see in the next slide."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#showing-a-single-value-can-lead-to-incorrect-conclusions",
    "href": "modules/module3/slides/module3_05.html#showing-a-single-value-can-lead-to-incorrect-conclusions",
    "title": "Comparing many distributions",
    "section": "Showing a single value can lead to incorrect conclusions",
    "text": "Showing a single value can lead to incorrect conclusions\nBeyond Bar and Line Graphs: Time for a New Data Presentation Paradigm\n\n\nThis image illustrates how the same bar chart (A) could have been generated from three different distributions (B, C, or D).\nIf we just looked at the bar chart, we could not tell which of the distributions it came from, but looking at the points directly we would arrive at a widely different conclusion regarding our data.\nIn sample B, the points seem to on average be slightly different between the two groups, although there is significant overlap between the distributions.\nIn sample C there seems to be one outlier data point that increases the mean significantly for its group, but most of the other points are pretty similar between the two groups.\nIn D, both groups have their data distributed bimodally (in two peaks). Maybe this means that there is a third group in this data to which all the high values belong too?\nAll this valuable information about our data, is lost when visualizing it as a bar chart. Remember, bar charts are best suited for displaying individual values such as counts, proportions, and sums.\nTo arrive at more accurate conclusions we need to present a richer representation of the data such as a histogram or a density plot, which are great as long as we don’t have too many distributions to compare.\nBut which visualizations could we use to accurately represent the distributions while still remaining effective for comparing many distributions in the same plot?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#showing-individual-observations-gives-a-richer-representation-than-bar-charts",
    "href": "modules/module3/slides/module3_05.html#showing-individual-observations-gives-a-richer-representation-than-bar-charts",
    "title": "Comparing many distributions",
    "section": "Showing individual observations gives a richer representation than bar charts",
    "text": "Showing individual observations gives a richer representation than bar charts\n\nalt.Chart(movies_extended).mark_tick().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre'))\n\n\n\n\n\n\n\n\nOne approach would be to show the individual observations, such as in this chart. This is a compact plot, which makes it easy to compare the different genres, since they are close to each other in the chart.\nWe can also clearly see the reason why the x-axis goes up to such a large max value: There are two movies that grossed highly above the rest!\nWhich are these movies?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#tooltips-are-helpful-for-answering-questions-about-specific-observations",
    "href": "modules/module3/slides/module3_05.html#tooltips-are-helpful-for-answering-questions-about-specific-observations",
    "title": "Comparing many distributions",
    "section": "Tooltips are helpful for answering questions about specific observations",
    "text": "Tooltips are helpful for answering questions about specific observations\n\nalt.Chart(movies_extended).mark_tick().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre'),\n    alt.Tooltip('Title:N'))\n\n\n\n\n\n\n\n\nAltair really shines in answering questions like this! In addition to having a robust visualization grammar, it also provides a grammar for interactive features.\nWe will dive deep into more complex interactivity in the last module in this course, but for now, we can simply add a tooltip and answer the question we just posed by hovering with the mouse over the two highest grossing movies. Try it!\n(We need the :N because there are some title values that makes Altair not recognize this dataframe column as nominal otherwise)\nAlthough this visualization is useful in getting information about the individual movies, it is hard to tell exactly how many data points there are in the areas that are completely blue. Is there just enough so that we don’t see any of the white background or are there thousands of observations stacked on top of each other?\nThis plot is saturated, something we will discuss in detail in the next module. We could use transparency to alleviate this issue to some extend, but it is more effective to use colour for representing the counts, such as in a heatmap."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#heatmaps-can-compare-multiple-distributions-without-saturation",
    "href": "modules/module3/slides/module3_05.html#heatmaps-can-compare-multiple-distributions-without-saturation",
    "title": "Comparing many distributions",
    "section": "Heatmaps can compare multiple distributions without saturation",
    "text": "Heatmaps can compare multiple distributions without saturation\n\n(alt.Chart(movies_extended).mark_rect().encode(\n    alt.X('Worldwide_Gross', bin=alt.Bin(maxbins=100)),\n    alt.Y('Major_Genre'),\n    alt.Color('count()')))\n\n\n\n\n\n\n\n\nA heatmap of the number of observations is very similar to a histogram, but the count is mapped to the colour instead of to the height on the y-axis.\nThis heatmap shows the histogram for each of the genres right next to each other so that they are easy to compare and contrast, by looking at the varying colours.\nWe can see that some genres appear to have most of their observations close to zero, such as Comedy and Drama, whereas others are more spread out, such as Adventure movies.\nThis is a pretty effective visualization, but since the colour scale is the same for each genre and some genres have many more observations than others, it can be difficult to accurately interpret the distribution of those genres that have few observations.\nFor example, we wouldn’t be able to distinguish between regions with 10-20 and 40-50 observations since the colours are so similar.\nRemember that comparing positions is more effective than comparing colours, so how can we use position to compare multiple distributions?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-show-several-key-statistics-from-a-distribution",
    "href": "modules/module3/slides/module3_05.html#boxplots-show-several-key-statistics-from-a-distribution",
    "title": "Comparing many distributions",
    "section": "Boxplots show several key statistics from a distribution",
    "text": "Boxplots show several key statistics from a distribution\nJhguch at en.wikipedia via Wikimedia Commons\n \n\n\nA boxplot is a mix between showing individual values and a few key summary statistics.\nInstead of showing just the mean or median as with a bar plot, a box plot shows 5 summary statistics.\nThe box represents three values, the median in the middle and the lower and upper quartile at the edges This means that 50% of the data points lie within the box.\nThe lines extending from the box are called whiskers and they can represent a few different statistics. Sometimes, they are showing the min and the max (the range) of our data.\nHowever, it is more common that they show the furthest points that are still within 1.5 x the “interquartile” range from the edges of the box. The interquartile range is the distance between the edges of the box.\nConventionally, any observations that fall outside the whiskers, are drawn out as individual points and are sometimes referred to as “outliers”, which are occasionally discarded.\nHowever, what really is an outlier in your data and what you should do with them depends on the question you are asking. Maybe these data points are the most important in your dataset or they could be measurement errors. You should always look further and think carefully before discarding data as outliers.\nHow does it look when we use boxplots to answer our question?"
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-can-effectively-compare-multiple-distributions",
    "href": "modules/module3/slides/module3_05.html#boxplots-can-effectively-compare-multiple-distributions",
    "title": "Comparing many distributions",
    "section": "Boxplots can effectively compare multiple distributions",
    "text": "Boxplots can effectively compare multiple distributions\n\nbar = alt.Chart(movies_extended).mark_bar().encode(\n    alt.X('mean(Worldwide_Gross)'),\n    alt.Y('Major_Genre'))\n\nbox = alt.Chart(movies_extended).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre'))\n\nbox | bar\n\n\n\n\n\n\n\n\nHere we show a boxplot next to the barplot we created initially. The | operator works similarly to the + operator, but instead of layering charts on top of each other, it puts them next to each other.\nWe can see that the box plots provide us with the same clear positional comparison as in the barplot, but we now also have access to additional information about each genres’ distribution. We can ensure ourselves that the distributions are roughly the same shape and view potential outliers.\nWe can directly answer the question we posed at the beginning: the Adventure genre generates the highest revenue both in terms of the medians and the overall position of the boxes.\nIt seems like Action is the second most highly grossing genre, but after that, it becomes hard to compare. We could make this visualization even more effective by sorting the boxes according to their median value."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#sorted-boxplots-more-effective-for-comparing-similar-distributions",
    "href": "modules/module3/slides/module3_05.html#sorted-boxplots-more-effective-for-comparing-similar-distributions",
    "title": "Comparing many distributions",
    "section": "Sorted boxplots more effective for comparing similar distributions",
    "text": "Sorted boxplots more effective for comparing similar distributions\n\ngenre_order = movies_extended.groupby(\n    'Major_Genre')['Worldwide_Gross'].median().sort_values().index.tolist()\nalt.Chart(movies_extended).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre', sort=genre_order))\n\n\n\n\n\n\n\n\nAltair does not support sorting boxplots via the “x” or “-x” shortcut.\nInstead, we need to create a list of the genres, ordered by value.\nWe can do this with pandas by grouping the dataframe, computing the median for the grossing columns, sorting the values, and then extracting the index as a list.\nNow the visualization is very effective! It is easy to compare genres with similar grossing since they are right next to each other in the plot.\nIf we wanted to look closer at the differences between the bulk of the distributions we could exclude the two most highly grossing movies."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#zooming-in-facilitates-comparison-of-small-differences",
    "href": "modules/module3/slides/module3_05.html#zooming-in-facilitates-comparison-of-small-differences",
    "title": "Comparing many distributions",
    "section": "Zooming in facilitates comparison of small differences",
    "text": "Zooming in facilitates comparison of small differences\n\nfiltered_movies = movies_extended[movies_extended['Worldwide_Gross'] &lt; 1_500_000_000]\nalt.Chart(filtered_movies).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre', sort=genre_order))\n\n\n\n\n\n\n\n\nHere we can compare the distributions more clearly, and it really looks like there are no large differences in the medians between the five genres behind Adventure and Action.\nWe will need to keep in mind that there are two additional data points that we have excluded from this visualization, but neither the median line nor the box would be much affected by excluding just a few values from a large population.\nIf we would have shown the mean instead of the median, this could have been an issue since the mean can be affected significantly from just a few extreme values."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-can-be-scaled-by-the-number-of-observations",
    "href": "modules/module3/slides/module3_05.html#boxplots-can-be-scaled-by-the-number-of-observations",
    "title": "Comparing many distributions",
    "section": "Boxplots can be scaled by the number of observations",
    "text": "Boxplots can be scaled by the number of observations\n\nalt.Chart(movies_extended).mark_boxplot().encode(\n    alt.X('Worldwide_Gross'),\n    alt.Y('Major_Genre', sort=genre_order),\n    alt.Size('count()'))\n\n\n\n\n\n\n\n\nThe size of the boxes can be made proportional to the count of observations in that group.\nThis helps us see if there are many more observations underlying some of the boxes versus others. In our plot, we can see that the “comedy” genre has the most movies whereas there are few documentaries and black comedies.\nHowever, it also makes it hard to tell where the lines of the median and the boxes are for many of the distributions. A better alternative could be to not scale the boxes and instead, include a bar chart with the number of observations per genre together with the boxplot."
  },
  {
    "objectID": "modules/module3/slides/module3_05.html#boxplots-are-not-able-to-accurately-represent-data-with-multiple-peaks",
    "href": "modules/module3/slides/module3_05.html#boxplots-are-not-able-to-accurately-represent-data-with-multiple-peaks",
    "title": "Comparing many distributions",
    "section": "Boxplots are not able to accurately represent data with multiple peaks",
    "text": "Boxplots are not able to accurately represent data with multiple peaks\nFrom Autodesk research\n\n\nWhile boxplots are effective for visualizing multiple distributions, they also have their shortcomings.\nOne of their main downsides is that they are not effective in showing distributions with multiple peaks. This can be seen in the animation in this slide, where variation in the raw data does no result in any change in the boxplots.\nTwo effective visualizations for many distributions that also handle multiple peaks are violin plots (as shown in this slide) and stripplots.\nViolinplots are similar to density plots put next to each other, and stripplots prevent overlap by distributing the points in a cloud instead of a straight line.\nThere are also sina plots, which combine the best of violin plots and strip plots together.\nThese are all highly effective, but not yet available to make easily in Altair, so we will not be teaching them here.\nBoxplots are still very effective in comparing multiple distributions, and when there are even more distributions than what we have here, e.g. 50+, then boxplots are often easier to interpret than the alternatives mentions above, since they are simpler."
  }
]