---
format:
  live-html
---

<script src='../../src/quiz.js'></script>  <!-- Only needed once per page -->

# 3.1. Exercises

## True or False: Concatenating Plots

<div id='mcq1'></div> 
<script>
    generateQuiz(
        'mcq1',
        'True or False',
        'Using <code>alt.hconcat()</code> and <code>&</code> will both arrange plots side by side horizontally.',
        {
        'True': '<code>&</code> concatenates plots vertically.',
        'False': ''
        },
        'False',
    );
</script>

<div id='mcq2'></div> 
<script>
    generateQuiz(
        'mcq2',
        'True or False',
        'When concatenating plots, each visualization in the presentation should have its own separate titles',
        {
        'True': 'When plotting for communication, sometimes having a single title for multiple plots communicates your insights most effectively.',
        'False': ''
        },
        'False',
    );
</script>

## Lay it All Out!

Bringing back the hotel data that we saw from exercise 4, We've made a couple of different layouts with 3 visualizations. 

(Attribution: These plots were created using [a Kaggle dataset](https://www.kaggle.com/jessemostipak/hotel-booking-demand?select=hotel_bookings.csv) where the data was originally obtained from the article [Hotel Booking Demand Datasets](https://www.sciencedirect.com/science/article/pii/S2352340918315191), written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.)

<div id='mcq3'></div> 
<script>
    generateQuiz(
        'mcq3',
        'Question 1',
        'Looking at the presentation below which code will produce the layout shown?',
        {
        '<code>plot_A | plot_B & plot_C</code>': 'Remember that the <code>&</code> operator has a higher priority than <code>|</code>!',
        '<code>plot_A | (plot_B & plot_C)</code>': 'Maybe switch up where the brackets should be?',
        '<code>(plot_A | plot_B) & plot_C</code>': '',
        '<code>(plot_A & plot_B) | plot_C</code>': 'I think you got the symbols mixed up!'
        },
        '<code>(plot_A | plot_B) & plot_C</code>',
    );
</script>

![](../../static/module6/layout1.svg){width=60%}

<div id='mcq4'></div> 
<script>
    generateQuiz(
        'mcq4',
        'Question 4',
        'How would we combine the plots <code>plot_A</code>, <code>plot_B</code> and <code>plot_C</code> to create the layout below (Hint: Two options are possible!).',
        {
            '<code>plot_A | plot_B & plot_C</code>': 'Good work! We could also have done <code>plot_A | (plot_B & plot_C)</code>',
            '<code>plot_A | (plot_B & plot_C)</code>': 'Nice! <code>plot_A | plot_B & plot_C</code> could also work, since the <code>&</code> operator has a higher priority than <code>|</code>!',
            '<code>plot_A & (plot_B | plot_C)</code>': ' I think you are mixing up your symbols!',
            '<code>(plot_A | plot_B) & plot_C</code>': 'Check if youâ€™ve got brackets in the right place!'
        },
        ['<code>plot_A | plot_B & plot_C</code>', '<code>plot_A | (plot_B & plot_C)</code>'],
    );
</script>

![](../../static/module6/layout2.svg){width=60%}

## Placing Penguins Properly

**Instructions:**    
Be patient when running a coding exercise for the first time, it can take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output
and submit it to validate if you were correct.**


We've worked with the penguin dataset quite a lot in this course and it only makes sense now to combine some of the plots we've made already into one combined presentation. 

```{pyodide}
import altair as alt
import pandas as pd

penguins_df = pd.read_csv('data/penguins.csv')
penguins_df.info()
```

Here we have 4 plots that we have made in the previous modules (or similar to these) that we want to combine together so that the first plots lies at the top of the presentation followed by a second row that contains 2 plots side by side and end with a bottom row with the last plot. It should appear something like this:

![](../../static/module6/penguin_layout.svg){width=70% fig-align="center"}

**Tasks:**

Fill in the blanks in the code below so that the following gets accomplished:

- From the given plots `mass_density_plot`, `masss_boxplot`, `penguin_heatmap` and `culmen_facet_plot`, arrange them so they look like the image above. 

```{pyodide}
#| setup: true
#| exercise: combined_plot
import altair as alt
import pandas as pd
from src.utils import assert_chart_equal
```

```{pyodide}
#| exercise: combined_plot
# Scroll to the bottom of this cell to layout the next 4 plots
# Loading in the data
penguins_df = pd.read_csv('data/penguins.csv').dropna(subset=['sex', 'species'])

# Density plot
mass_density_plot = alt.Chart(penguins_df).transform_density(
     'body_mass_g',
     groupby=['species'],
     as_=['body_mass_g', 'density'],
     steps=100
     ).mark_area(opacity=0.5).encode(
          alt.X('body_mass_g', title='Mass (grams)'),
          alt.Y('density:Q', title='Density'),
          alt.Color('species', title='Species', legend=alt.Legend(orient="right"))
          ).properties(width=400, height=100)

# Boxplot
mass_boxplot = alt.Chart(penguins_df).mark_boxplot(opacity=0.5).encode(
    alt.X('culmen_length_mm', title='Culmen length (mm)', scale=alt.Scale(zero=False)),
    alt.Y('species'),
    alt.Color('species', legend=None)
    ).properties( height=100, width=180)

# Heatmap
penguin_heatmap = alt.Chart(penguins_df).mark_rect().encode(
    alt.X('flipper_length_mm', bin=alt.Bin(maxbins=30), title='Flipper length (mm)'),
    alt.Y('body_mass_g', bin=alt.Bin(maxbins=30), title='Penguin mass (g)'),
    alt.Color('count()', title='Quantity', scale=alt.Scale(scheme='blues'))
    ).properties(width=150, height=100)

# Histograms   
culmen_facet_plot = alt.Chart(penguins_df.dropna(subset=['sex', 'species'])).mark_bar(opacity=0.5).encode(
    alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=40), title= 'Culmen depth (mm)'),
    alt.Y('count()', stack=None, title='Number of penguins'),
    alt.Color('species', title = 'Species')
    ).properties(width=180, height=100
    ).facet('sex', title='').resolve_scale(y='independent')
    
# Titles for full visualization
titles = alt.TitleParams(
    "We've discovered many insights from the Penguins dataset",
     subtitle = ["We've learned that the Adelie and Chinstrap penguin",
                 " species are have similar culmen depth and body mass, however quite different culmen length"],
     fontSize=18, align='center', anchor='middle')

# Organize the plots above so it looks like the example provided above.
combined_plot = (____).____(title=titles)

combined_plot
```

```{pyodide}
#| exercise: combined_plot
#| check: true
penguins_df = pd.read_csv('data/penguins.csv').dropna(subset=['sex', 'species'])

mass_density_plot = alt.Chart(penguins_df).transform_density(
     'body_mass_g',
     groupby=['species'],
     as_=['body_mass_g', 'density'],
     steps=100
     ).mark_area(opacity=0.5).encode(
          alt.X('body_mass_g', title='Mass (grams)'),
          alt.Y('density:Q', title='Density'),
          alt.Color('species', title='Species', legend=alt.Legend(orient="right"))
          ).properties(width=400, height=100)

mass_boxplot = alt.Chart(penguins_df).mark_boxplot(opacity=0.5).encode(
    alt.X('culmen_length_mm', title='Culmen length (mm)', scale=alt.Scale(zero=False)),
    alt.Y('species'),
    alt.Color('species', legend=None)
    ).properties( height=100, width=180)

penguin_heatmap = alt.Chart(penguins_df).mark_rect().encode(
    alt.X('flipper_length_mm', bin=alt.Bin(maxbins=30), title='Flipper length (mm)'),
    alt.Y('body_mass_g', bin=alt.Bin(maxbins=30), title='Penguin mass (g)'),
    alt.Color('count()', title='Quantity', scale=alt.Scale(scheme='blues'))
    ).properties(width=150, height=100)
 
culmen_facet_plot = alt.Chart(penguins_df.dropna(subset=['sex', 'species'])).mark_bar(opacity=0.5).encode(
    alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=40), title= 'Culmen depth (mm)'),
    alt.Y('count()', stack=None, title='Number of penguins'),
    alt.Color('species', title = 'Species')
    ).properties(width=180, height=100
    ).facet('sex', title='').resolve_scale(y='independent')

titles = alt.TitleParams(
    "We've discovered many insights from the Penguins dataset",
     subtitle = ["We've learned that the Adelie and Chinstrap penguin",
                 " species are have similar culmen depth and body mass, however quite different culmen length"],
     fontSize=18, align='center', anchor='middle')

solution = (mass_density_plot & (mass_boxplot | penguin_heatmap) & culmen_facet_plot
).properties(title=titles)

assert_chart_equal(solution, result)
```

:::: { .hint exercise="combined_plot"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you specifying `culmen_facet_plot` first and combining `mass_boxplot` and  `penguin_heatmap` together with brackets followed by `mass_density_plot`?
- Are you using the `&` operator to stack charts vertically and `|` to align them side by side?

:::
::::

:::: { .solution exercise="combined_plot" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Scroll to the bottom of this cell to layout the next 4 plots
# Loading in the data
penguins_df = pd.read_csv('data/penguins.csv').dropna(subset=['sex', 'species'])
# Density plot
mass_density_plot = alt.Chart(penguins_df).transform_density(
     'body_mass_g',
     groupby=['species'],
     as_=['body_mass_g', 'density'],
     steps=100
     ).mark_area(opacity=0.5).encode(
          alt.X('body_mass_g', title='Mass (grams)'),
          alt.Y('density:Q', title='Density'),
          alt.Color('species', title='Species', legend=alt.Legend(orient="right"))
          ).properties(width=400, height=100)
# Boxplot
mass_boxplot = alt.Chart(penguins_df).mark_boxplot(opacity=0.5).encode(
    alt.X('culmen_length_mm', title='Culmen length (mm)', scale=alt.Scale(zero=False)),
    alt.Y('species'),
    alt.Color('species', legend=None)
    ).properties( height=100, width=180)
# Heatmap
penguin_heatmap = alt.Chart(penguins_df).mark_rect().encode(
    alt.X('flipper_length_mm', bin=alt.Bin(maxbins=30), title='Flipper length (mm)'),
    alt.Y('body_mass_g', bin=alt.Bin(maxbins=30), title='Penguin mass (g)'),
    alt.Color('count()', title='Quantity', scale=alt.Scale(scheme='blues'))
    ).properties(width=150, height=100)
# Histograms   
culmen_facet_plot = alt.Chart(penguins_df.dropna(subset=['sex', 'species'])).mark_bar(opacity=0.5).encode(
    alt.X('culmen_depth_mm', bin=alt.Bin(maxbins=40), title= 'Culmen depth (mm)'),
    alt.Y('count()', stack=None, title='Number of penguins'),
    alt.Color('species', title = 'Species')
    ).properties(width=180, height=100
    ).facet('sex', title='').resolve_scale(y='independent')
# Titles for full visualization
titles = alt.TitleParams(
    "We've discovered many insights from the Penguins dataset",
     subtitle = ["We've learned that the Adelie and Chinstrap penguin",
                 " species are have similar culmen depth and body mass, however quite different culmen length"],
     fontSize=18, align='center', anchor='middle')
# Organize the plots above so it looks like the example provided above.
combined_plot = (mass_density_plot & (mass_boxplot | penguin_heatmap) & culmen_facet_plot
).properties(title=titles)
combined_plot
```

:::
::::

