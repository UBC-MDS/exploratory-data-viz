---
engine: knitr
execute:
  echo: true
format:
  live-html
resources:
  - utils.py
---

{{< include ../../_extensions/r-wasm/live/_knitr.qmd >}}

# 4. Exercises

## Test Your Knowledge: Visualization Libraries

**Question 1**<br>
*What is another way of describing high-level visualization libraries?*

a) Imperative
a) Declarative
a) Immediate
a) Definitive


::: {.callout-tip title="Solution" collapse="true"}
The correct answer is **"Declarative"**.<br>
- "Imperative" refers to low-level plotting.<br>
- "Immediate" and "Definitive" are also incorrect choices—we included them as distractors.
:::

**Question 2**<br>
*What kind of components are combined in declarative plotting to create visualizations?*

a) Dictionary Keys
a) Block Components
a) Grammatical Components
a) Grouping Components

::: {.callout-tip title="Solution" collapse="true"}
The correct answer is **"Grammatical Components"**.<br>
Explanation for the incorrect answer choices:<br>
- "Dictionary Keys": This refers to a data structure, not a plotting structure.<br>
- "Block Components": Consider a more language-oriented approach.<br>
- "Grouping Components": This term doesn't have a clear definition—we made it up!
:::

<br><br>

## True or False: Visualization Libraries

**True or False**<br>
*A low-level visualization library focuses on plot construction details.*

a) True
a) False


::: {.callout-tip title="Solution" collapse="true"}
The right answer is **"True"**.<br>
If you got this wrong, you may have confused it with high-level visualization.
:::

**True or False**<br>
*A high-level visualization library focuses on data and relationships.*

a) True
a) False

::: {.callout-tip title="Solution" collapse="true"}
The right answer is **"True"**.
:::

<br><br>

## Your First Plot

**Instructions:**
Be patient when running a coding exercise for the first time, it can take a few minutes.

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output
and submit it to validate if you were correct.**


Let's use the same vehicle dataset we saw in the lecture, but visualize the relationship between two different columns.

The data has already been imported for you in this exercise.

Here is what it looks like:

```{pyodide}
import altair as alt
from vega_datasets import data

cars = data.cars()

print(cars.columns)
cars.head()
```

**Tasks:**<br>

- Fill out the missing fields in the Altair plot in order to create a scatter plot.<br>
- The cars' `Horsepower` should be on the y-axis and their `Weight_in_lbs` on the x-axis.<br>
- Color the points by the `Origin` of the cars.

```{pyodide}
#| setup: true
#| exercise: your_first_plot
from utils import *
import altair as alt
from vega_datasets import data

cars = data.cars()
```

```{pyodide}
#| exercise: your_first_plot
alt.Chart(______).mark_point().encode(
    x=______,
    y=______,
    color=_____
)
```

```{pyodide}
#| exercise: your_first_plot
#| check: true

solution = alt.Chart(cars).mark_point().encode(
    x='Weight_in_lbs',
    y='Horsepower',
    color='Origin'
)
assert_chart_equal(solution, result)

```

::: { .hint exercise="your_first_plot"}
::: { .callout-note collapse="false"}
## Hint 1

Are the column names expressed in quotes, e.g. `y='Horsepower'`?

:::
:::

::: { .solution exercise="your_first_plot" }
::: { .callout-tip collapse="false"}
## Fully worked solution:

```{pyodide}
alt.Chart(cars).mark_point().encode(
    x='Weight_in_lbs',
    y='Horsepower',
    color='Origin'
)
```

:::
:::

