---
format: revealjs
title: Exploratory Data Analysis on Categorical Data
title-slide-attributes:
  data-notes: |
   To perform EDA on categorical data we look at the counts of observations for each of the categories, as we have learned previously.
---

```{python}
# | echo: false
%run src/utils.py
```

## A statistical summary is useful to complement visualizations

```{python}
import pandas as pd

movies_extended = pd.read_csv("data/movies-extended-eda.csv")
movies_extended.describe(exclude="number")
```

::: {.notes}
Since we have already seen the dataset rows and info in the last slide deck, we start by describing the data here.

In addition to generally receiving more information about our data, categorical counts are helpful when building machine learning classification models. Having an unbalanced data set for the dataframe column we are trying to predict (i.e., uneven numbers of things in the various categories) would mean that we need to compensate for this in our downstream analysis.

There are many other examples in statistical analysis, where uneven categories can change how you need to do your analysis. Failing to account for this would lead to less accurate and possibly misleading results.

As for the numerical columns above, we start by printing information about the most frequently occurring categorical values in each of the columns. We use exclude to indicate that we want to use all other columns except the numerical ones.

We can already see what the most commons values are for each column, but let’s visualize these in a bar chart and cross-reference this table with our plot on the next slide.
:::

## Visualizing the counts of all categorical columns helps us understand the data

```{python}
import altair as alt

categorical_columns = movies_extended.select_dtypes('object').columns.tolist()
(alt.Chart(movies_extended)
 .mark_bar().encode(
     alt.X('count()'),
     alt.Y(alt.repeat(), type='nominal', sort='x'))
 .properties(width=200, height=150)
 .repeat(categorical_columns))
```

::: {.notes}
To answer how the counts are distributed between different categorical values, we will create a bar chart for each categorical dataframe column.

The syntax here is very similar to when we created the histograms, but we don’t use any bins, and the axis type is now nominal instead of quantitative.

We can see that most movies are dramas and comedies, and fall within the R and PG-13 ratings.

We could have included the title column here to check that no two movies have the same title. After that, we can safely skip that subplot since it is rather messy with hundreds of titles.

However, since this is EDA and not a plot created for communication, we could also have left it in and carried on
:::

## Repeat can also be used to explore the counts of combinations of categorical columns

```{python}
(alt.Chart(movies_extended).mark_circle().encode(
    alt.X(alt.repeat('column'), type='nominal', sort='-size', title=None),
    alt.Y(alt.repeat('row'), type='nominal', sort='size', title=None),
    alt.Color('count()', title=None),
    alt.Size('count()', title=None))
 .repeat(row=categorical_columns, column=categorical_columns)
 .resolve_scale(color='independent', size='independent'))
```

::: {.notes}
The same repeat principles can be used to count combinations of categoricals, helping us get more resolution into where the data lies.

This plot should be read similarly to the pairplot we made earlier, so we only look at the one plot below the diagonal. In this case, it means we could have just made a single plot, but if you have more than two categories to repeat over, there would be additional plots under the diagonal.

In this plot, we can see that comedies rated PG-13 and dramas rated R are the most common combinations in our data.

In fact, there are so many more of these than some of the others that we should be careful if we proceed to perform any statistical tests on this data as some analysis methods are not robust against samples sizes that are this unequal and we need to adapt our analysis strategy accordingly
:::

## Altair’s grammar allows us to repeat facetted charts

```{python}
movies_extended['Top Rated'] = movies_extended['IMDB Rating'] > 8
(alt.Chart(movies_extended[movies_extended['MPAA Rating'].isin(["G", "R"])])
 .mark_boxplot().encode(
     alt.X('Running Time min', type='quantitative'),
     alt.Y(alt.repeat('row'), type='nominal'))
 .facet(column='MPAA Rating')
 .repeat(row=['Major Genre', 'Top Rated']))
```

::: {.notes}
Thanks to the flexible grammar of graphics in Altair,
we are able to repeat complex charts,
such as those already containing facets.

In this case,
we are interested in comparing the counts of the Major Genres and Create Types
within each of the `G` and `R` MPAA RAtings.

To achieve this,
we first facet the chart and then repeat it,
combing the principles we have learned so far in the course.

Now we can answer questions such as
which the most popular genres are
within each of the ratings.

As we might have expected,
the top genres differ depending on the MPAA Rating,
and there are many genres that are not even present for the family-rated G movies.
:::

# Let's apply what we learned!