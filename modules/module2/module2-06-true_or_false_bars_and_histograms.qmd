---
format:
  live-html
resources:
  - ../utils.py
  - ../data
---

<script src='../../src/quiz.js'></script>  

# 3.1. Exercises

## True or False: Bars and Histograms

<div id='mcq1'></div> 
<script>
    generateQuiz(
        'mcq1', 
        'True or False',  
        'It’s often a good idea to make a horizontal histogram so that the labels of the x-axis are easier to read.',  
        { 
        'True': 'The labels of histograms are numbers that don’t need to be rotated to be readable.',
        'False': 'It’s bar charts that can to rotated to make it easier to read the x-axis labels.'
        },
        'False',  
    );
</script>

<div id='mcq2'></div> 
<script>
    generateQuiz(
        'mcq2',
        'True or False',
        'It is best to sort bar charts from high to low values (unless the categorical values have a natural order).',
        {
        'True': 'It’s better to sort your bars with some sort of ordering (be it natural or by frequency)!',
        'False': 'Does sorting a bar chart make it easier to read?'
        },
        'True',
    );
</script>

## Testing Your Bar Knowledge

<div id='mcq3'></div> 
<script>
    generateQuiz(
        'mcq3', 
        'Question 1',  
        'Why do we avoid bar charts when showing summary statistics such as the mean?',  
        { 
        'They do not look the best aestetically.': 'Bar plots can be quite useful and beautiful depending on what is communicated!',
        'Summary statistics are communicated best with line or scatter plots.': 'Is a plot communicating just the summary statistics even a good idea?',
        'They tend to take too long.': ' Sometimes this can be an issue with coding but not when it comes to visualization.',
        'They remove a lot of information such as variation amoung the data.': ''
        },
        'They remove a lot of information such as variation amoung the data.',  
    );
</script>

<div id='mcq4'></div> 
<script>
    generateQuiz(
        'mcq4', 
        'Question 2',  
        'If we wanted to increase the number of bars in the histogram (see code below), what would be needed instead of <code>"???"</code> in the code below?',  
        { 
        '<code>50</code>': 'You need to use a helper function to increase the number of bars and not just set `bin` equal to a number.',
        '<code>alt.Bin(50)</code>': 'There needs to be some sort of argument set within `alt.Bin()`.',
        '<code>bin=alt.Bin(bins=30)</code>': 'You are close but the argument `bins` within the helper function `alt.Bin()` is not quite right.',
        '<code>bin=alt.Bin(maxbins=30)</code>': ''
        },
        '<code>bin=alt.Bin(maxbins=30)</code>',  
    );
</script>

```python
alt.Chart(data_source).mark_bar().encode(
    x=alt.X('students', bin=???),
    y='count()').properties(title='The distribution of students per classroom')
```

## Practicing Bar Plots with Penguins

**Instructions:**
Be patient when running a coding exercise for the first time, it can take a few minutes.

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output
and submit it to validate if you were correct.**

Alright, let's bring in a new dataset containing information on penguins. This data is available from [Kaggle](https://www.kaggle.com/parulpandey/palmer-archipelago-antarctica-penguin-data) and originally available from [Allison Horst's GitHub Repository](https://github.com/allisonhorst/palmerpenguins). 

```{pyodide}
import altair as alt
import pandas as pd

penguins_df = pd.read_csv('data/penguins.csv')
penguins_df.info()
```

We are interested in obtaining the number of penguins we collected of each species. 

**Tasks:**

- Using a bar plot, visualize the count of penguins for each species using the dataframe `penguins_df`. 
- Choose the appropriate rotation, given the axis labels. 
- Sort your bars in an appropriate order. 
- Make sure to give it a title and set the dimensions to a height of 150 and a width of 300.
- Save your plot in an object named `penguin_bar`.


```{pyodide}
#| setup: true
#| exercise: 
#|   - practicing_bar_plots
#|   - making_history

import altair as alt
import pandas as pd
from utils import assert_chart_equal 

penguins_df = pd.read_csv('data/penguins.csv')
```

```{pyodide}
#| exercise: practicing_bar_plots
mass_boxplot = alt.Chart(___).___().encode(
    alt.X(___),
    alt.Y(___).properties(
        ___, ___ )
)

____
```

```{pyodide}
#| exercise: practicing_bar_plots
#| check: true

solution = alt.Chart(penguins_df).mark_bar().encode(
    x='count()',
    y=alt.Y('species', sort='x')
    ).properties(title='Frequency of penguin species', width=300, height=150)

solution = solution.properties(title='')
result = result.properties(title='')

assert_chart_equal(solution, result)
```

:::: { .hint exercise="practicing_bar_plots"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you using `.mark_bar()`?
- Are you assigning the plot to an object named`penguin_bar`?
- Are you specifying `alt.Y('species', sort='x')` on the y-axis?
- Are you specifying `count()` on the x-axis?
- Are you giving the plot a title and proper dimensions using `.properties()`?

:::
::::

:::: { .solution exercise="practicing_bar_plots" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
mass_boxplot = alt.Chart(penguins_df).mark_bar().encode(
    x='count()',
    y=alt.Y('species', sort='x')
    ).properties(title='Frequency of penguin species', width=300, height=150)

mass_boxplot
```

:::
::::

<div id='mcq5'></div> 
<script>
    generateQuiz(
        'mcq5', 
        'Question',  
        'Which species is most occurring in the dataset?',  
        { 
        'Chinstrap': 'Are you looking at the right plot?',
        'Gentoo': 'Maybe try again.',
        'Adelie': ''
        },
        'Adelie',  
    );
</script>

## Making History with Histograms

**Instructions:**
Be patient when running a coding exercise for the first time, it can take a few minutes.

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output
and submit it to validate if you were correct.**

Let's now see what the distribution of penguin flipper length looks like. 

**Tasks:**

- Using bars, show the counts of the `flipper_length_mm` values using the `penguins_df` dataframe
- Make sure to give it a title and set the dimensions to a height of 150 and a width of 300.
- Save your plot in an object named `penguin_hist`.

```{pyodide}
#| exercise: making_history
penguin_hist = alt.Chart(____).____().encode(
    x=alt.X(____, ____),
    y='____',
    ).properties(____='Flipper length among Penguins', ____=300, height=____)

penguin_hist
```

```{pyodide}
#| exercise: making_history
#| check: true

solution = alt.Chart(penguins_df).mark_bar().encode(
    x=alt.X('flipper_length_mm', bin=True),
    y='count()',
    ).properties(title='Flipper length among Penguins', width=300, height=150)

assert_chart_equal(solution, result)
```

:::: { .hint exercise="making_history"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you using `.mark_bar()`?
- Are you assigning the plot to an object named`penguin_hist`?
- Are you specifying `alt.X('flipper_length_mm', bin=True)` on the x-axis?
- Are you specifying `count()` on the y-axis?
- Are you giving the plot a title and proper dimensions using `.properties()`?

:::
::::

:::: { .solution exercise="making_history" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide} 
penguin_hist = alt.Chart(penguins_df).mark_bar().encode(
    x=alt.X('flipper_length_mm', bin=True),
    y='count()',
    ).properties(title='Flipper length among Penguins', width=300, height=150)

penguin_hist
```

:::
::::