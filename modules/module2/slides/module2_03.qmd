---
format: revealjs
title: Creating Area Charts
title-slide-attributes:
  data-notes: |
    In this slide deck,
    we will be learning how to create area charts 
    and when they are a suitable alternative to use
    instead of line charts.

---

```{python}
# | echo: false
%run src/utils.py
```

## Global Development Data

<table>
<thead>
<tr class="header">
<th style="text-align: center;">Column</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>country</td>
<td style="text-align: right;">Country name</td>
</tr>
<tr class="even">
<td>year</td>
<td style="text-align: right;">Year of observation</td>
</tr>
<tr class="odd">
<td>population</td>
<td style="text-align: right;">Population in the country at each year</td>
</tr>
<tr class="even">
<td>region</td>
<td style="text-align: right;">Continent the country belongs to</td>
</tr>
<tr class="odd">
<td>sub_region</td>
<td style="text-align: right;">Sub-region the country belongs to</td>
</tr>
<tr class="even">
<td>income_group</td>
<td style="text-align: right;">Income group [as specified by the world bank in 2018]</td>
</tr>
<tr class="odd">
<td>life_expectancy</td>
<td style="text-align: right;">The mean number of years a newborn would live if mortality patterns remained constant</td>
</tr>
<tr class="even">
<td>income</td>
<td style="text-align: right;">GDP per capita (in USD) adjusted for differences in purchasing power</td>
</tr>
<tr class="odd">
<td>children_per_woman</td>
<td style="text-align: right;">Average number of children born per woman</td>
</tr>
<tr class="even">
<td>child_mortality</td>
<td style="text-align: right;">Deaths of children under 5 years of age per 1000 live births</td>
</tr>
<tr class="odd">
<td>pop_density</td>
<td style="text-align: right;">Average number of people per km2</td>
</tr>
<tr class="even">
<td>co2_per_capita</td>
<td style="text-align: right;">CO2 emissions from fossil fuels (tonnes per capita)</td>
</tr>
<tr class="odd">
<td>years_in_school_men</td>
<td style="text-align: right;">Mean number of years in primary, secondary, and tertiary school for 25-36 years old men</td>
</tr>
<tr class="even">
<td>years_in_school_women</td>
<td style="text-align: right;">Mean number of years in primary, secondary, and tertiary school for 25-36 years old women</td>
</tr>
</tbody>
</table>

[as specified by the world bank in 2018]: (https://datahelpdesk.worldbank.org/knowledgebase/articles/378833-how-are-the-income-group-thresholds-determined)

::: {.notes}
We will be visualizing global health data to answer the question: How has the population for different regions around the world changed over time?

This dataset is more similar to those you will encounter in the wild than the sample dataset, we saw in the first module. We will be exploring this data in the assignments for the first two modules.

In later labs we will look at many other datasets, but weâ€™re sticking to a familiar one for now so that we can focus on laying down a solid understanding of the visualization principles with data that we already know.
:::

## Read in and glimpse at the data with pandas

```{python}
import pandas as pd

gm = pd.read_csv("data/world-data-gapminder.csv", parse_dates=["year"])
gm
```

::: {.notes}
As we read in the data with pandas, we specify to read in the year column as a date, rather than an integer, which is the default behaviour.

Remember that Altair uses the pandas data types to infer the data it is working with. Integers would show up on the Altair chart axes as 1,990, 2,000, etc whereas dates are shown as 1990, 2000, etc, so make sure to parse these columns as dates when using pandas.
:::

## *.info()* shows column data types and missing values

```{python}
gm.info()
```

::: {.notes}
When reading in a new dataset,
it is always a good idea to glimpse at a few rows
like we did in the previous slide
to get an idea of what the data looks like.

Another helpful practice is to use the `.info()` method
to get an overview of the column data types
and see if there are any `NaNs` (missing values).

If there are many missing values in a column,
we would want to look into why that is.
Later in the course, we will learn about how to visualize
missing values to understand if there are patterns
in which values are missing,
which could affect our data analysis.

In this and the previous slide,
we can also see that our dataset is pretty big,
there are almost 40,000 rows!

The first time working with such large datasets in Altair can be a bit confusing
because Altair saves the entire dataframe as part of the visualization,
when working with `pandas` dataframes,

This is great because each visualization is reproducible in itself,
we don't need to go looking for the data if we come across a plot on the web,
or worry that the authors didn't upload it.

However,
for large datasets this causes the visualizations files to become really big,
and Altair shows a warning for any dataset larger than 5000 rows.

We will talk about this in detail in a later module,
and see different strategies for working with large datasets.
:::

## Working with large data in Altair via URLs

```{python}
chart = (
    alt.Chart("https://website.com/data.csv")
    .mark_line()
    .encode(x="column1:T", y="column2:Q")
)
```

::: {.notes}
In this slide deck,
we're going to leverage the fact that Altair does not have to work with dataframes,
but can also use a URL link that points to data
that has been uploaded somewhere on the web.
The slides show an example of what this syntax looks like in general.

Since we have uploaded our dataset to the course online repository,
we will read the data directly from there
using this URL
<https://raw.githubusercontent.com/UBC-MDS/exploratory-data-viz/refs/heads/main/data/world-data-gapminder.csv>.

This is powerful since we can use any data online
without downloading it first
and it allows us to create Altair charts
without worrying that the entire dataframe will be included!
Since Altair knows the location of the data online,
the chart is still reproducible
as long as the data is not removed from its online location.

The drawback of not using a dataframe,
is that Altair cannot rely on pandas to infer
what type of data there is in each column,
so we need to help it by indicating the datatype.

This is what the `:T` and `:Q` after the column names do
and an explanation of all the data types in Altair
can be found in the next slide.
:::

## Data types need to be manually specified when not working with pandas

<table>
<thead>
<tr class="header">
<th style="text-align: center;">Data Type</th>
<th style="text-align: center;">Shorthand Code</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Examples</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ordinal</td>
<td style="text-align: center;">O</td>
<td style="text-align: right;">a discrete ordered quantity</td>
<td style="text-align: right;">"dislike", "neutral", "like"</td>
</tr>
<tr class="even">
<td>Nominal</td>
<td style="text-align: center;">N</td>
<td style="text-align: right;">a discrete un-ordered quantity</td>
<td style="text-align: right;">eye color, postal code, university</td>
</tr>
<tr class="odd">
<td>Quantitative</td>
<td style="text-align: center;">Q</td>
<td style="text-align: right;">a continuous quantity</td>
<td style="text-align: right;">5, 5.0, 5.011</td>
</tr>
<tr class="even">
<td>Temporal</td>
<td style="text-align: center;">T</td>
<td style="text-align: right;">a time or date value</td>
<td style="text-align: right;">date (August 13 2020), time (12:00 pm)</td>
</tr>
</tbody>
</table>

::: {.notes}
Altair recognizes the four main column types,
which you can see in this slide
(that you also saw in the [Programming with Python course](https://ubc-mds.github.io/programming-in-python-for-data-science/en/)).

Ordinal and nominal both describe categorical data. 

Ordinal implies that there is a natural order to the categories.
for example, movie ratings with 1-5 stars would be an ordinal scale since a five-star rating is better than a single-star rating.

In contrast,
there is no such order for nominal categories,
for example colours, fruits, or countries.

Quantitative data describes data that is continuous,
which means that it is a number
that can be described with infinite precision.
For example,
someone's height could be said to be either 170 cm, 170.12 cm, 170.1281 cm, and so on
depending on how accurately we can measure them.

Dates are generally temporal,
but there are instances when it makes sense to defines them as ordinal or even nominal categories,
for example when having just a few dates to compare between.

Armed with this knowledge,
let's get started visualizing our data!
:::


## Draw a line chart for how you think the world population has changed since the 1800s

<br>
<br>
<br>
<br>

Take a few minutes to first sketch out how you would expect your plot to appear before going to the next slide. 

::: {.notes}
Now that we have seen what the data table looks like,
and which data type the values in each column are,
let's think about what we would want to visualize and why.

Since the data reaches all the way back to the 1800s,
it would be really interesting to plot
how the world population has been growing up until today.
We could use a line plot for this
as we learned in the first module.

Draw this out on paper yourself
so that it is clear what you expect the plot
before going to the next slide.
:::

## Our sketched out plot

![](../../../static/module2/drawing.png){fig-alt="Drawing"}

::: {.notes}
If we drew this visualization out on paper, we would expect something a little like this - a single line that increases from the 1800s up until today
as the population increased. It's a good idea to include axis labels too!
:::

## A line chart is a good choice for trends over time

```{python}
import altair as alt

gm_url = "https://raw.githubusercontent.com/UBC-MDS/exploratory-data-viz/refs/heads/main/data/world-data-gapminder.csv"

alt.Chart(gm_url).mark_line().encode(
    x='year:T',
    y='population:Q'
)
```

::: {.notes}
Next, we try to plot it in Altair using `mark_line()` and mapping `year` to the x-axis and `population` to the y-axis. 

But the plot on this slide doesn't look like a line plot,
why is that?

Because every country has multiple entries,
one for each year.
We have plotted the population for every single country
in every year and connected them all with a line.

That's not what we want!
:::

## The *.sum()* aggregate method will show us the trend of the entire world

```{python}
alt.Chart(gm_url).mark_line().encode(
    x='year:T',
    y='sum(population):Q')
```

::: {.notes}
We want to see how the **world** population has been changing.

We can calculate this by summing up all the countries'
populations for each year via the `.sum()` aggregation method in Altair.

That looks much better!

Interestingly,
it seems like the world population have been growing in two distinct phases:
slowly before 1950,
and more rapidly afterwards.

We will talk more about that in a few slides.

We can see here that Altair automatically changes the axis label for us to reflect the operation
that we have performed on the data,
here taking the "sum" of the countries.

This is often great to keep track of how we have aggregated the data,
but is not always needed.

In this case,
our plot could be made even clearer
if the axis title read "World population" instead.
:::

## Changing axes titles clarifies makes our plot easier to interpret

```{python}
alt.Chart(gm_url).mark_line().encode(
    x='year:T',
    y=alt.Y('sum(population):Q', title='World population'))
```

::: {.notes}
To change an axis title,
we can use the helper functions `alt.X` and `alt.Y`,
instead of `x=` and `y=`.

These have the role of customizing things like titles, orders, groups, and scales
for the axes.
When using just `y='column'`,
we're still calling `alt.Y()` under the hood,
we just save ourselves some typing.

We can also get rid of the `y=` and `x=` parts altogether as well which is even more efficient. 

We will do a deep dive into titles for axis and other chart elements
in a later module.

From now on we will just use it to clarify
when an automatic label might be confusing.
:::

## Area charts are also effective at visualizing trends over time

```{python}
alt.Chart(gm_url).mark_area().encode(
    alt.X('year:T'),
    alt.Y('sum(population):Q', title='World population'))
```

::: {.notes}
Let's see how we can visualize the world population changes
with an area chart instead of a line chart.

Thanks to Altair's consistent visualization grammar,
the modifications we need to make to the code are minor.
Replace `mark_line` with `mark_area` and we're done.

For showing a single trend over time,
the choice between a line and area chart comes down to aesthetics.
They are both effective choices for this purpose.

However,
when visualizing the trends over time for multiple groups,
lines and areas have different advantages,
as we will see next.
:::

## Area charts are preferred when the total of the groups is the most important

```{python}
alt.Chart(gm_url).mark_area().encode(
    alt.X('year:T'),
    alt.Y('sum(population):Q', title='World population'),
    color='region:N')
```

::: {.notes}
The y-axis range of this chart
is the same as the one on the previous slide,
so it is easy to see how the total world population has changed over time.

From the stacked coloured regions,
we also get a rough idea of how each region has grown,
but it is hard to compare exactly,
especially for regions that are not stacked next to each other.

For example,
we can't really tell if Europe or Africa, has the largest population in the most recent year.
:::

## It is helpful to clarify that the areas are stacked on top of each other

```{python}
alt.Chart(gm_url).mark_area().encode(
    alt.X('year:T'),
    alt.Y('sum(population):Q', title='Cumulative population of stacked regions'),
    color='region:N')
```

::: {.notes}
Altair stacks by areas by default,
which is usually what we want when creating an area chart with groups.

But if someone saw our chart without knowing this,
they might think that the areas are layered behind each other,
so that we only see the top of the blue region 
peak out behind the orange region.

To prevent this misunderstanding,
we can change the y-axis label
to clearly state that areas are stacked.

Taken together,
stacked area charts are ideal when you want to focus on a total measurement
and give a rough idea of the contributions from different groups.
:::

## Line charts are preferred when the individual groups are the most important

```{python}
alt.Chart(gm_url).mark_line().encode(
    alt.X('year:T'),
    alt.Y('sum(population):Q', title='Population'),
    color='region:N')
```

::: {.notes}
Using a line chart
is the preferred choice when we want to view the exact values of each group
and don't care as much about the total of the groups added together.

For example,
here it is immediately clear that Africa has a bigger population 
than Europe
and we can see that the populations shifted shortly after the year 2000.

On the other hand,
it's quite cognitively demanding
to try to reconstruct the total world population
by adding all the lines up together,
especially over time!

In summary,
split line charts are ideal when you want to compare the different groups accurately.
:::

## When will the world's population stop growing?

```{python}
alt.Chart(gm_url).mark_area().encode(
    alt.X('year:T'),
    alt.Y('sum(population):Q', title='World population'))
```

::: {.notes}
Going back to the area chart with one group,
let's look closer at the growth curve of the world's population.

First,
there is a slow linear phase,
but soon after the end of the second world war,
it the growth starts increasing much more rapidly
(but still in a straight line).

Will the world population keep growing like this for much longer?
:::

## The world population is predicted to stabilize at around 11 billion

```{python}
alt.Chart(gm_url).mark_area().encode(
    alt.X('year:T'),
    alt.Y('mean(children_per_woman):Q', title='Average children per woman worldwide'))
```

::: {.notes}
Fortunately,
the world population is predicted
to stabilize around 11 billion people at the end of the century.

Why?
Because as living conditions improve around the world,
child mortality is going down
as can be seen in this visualization.

In countries where child mortality is high,
women will often give birth to more children than they want
in order to protect against losing some of their children.

Lower child mortality leads to more predictable family planning,
which in turn often leads to smaller families.
In the majority of countries where child mortality has been observed to decrease,
the number of children per woman has followed
and stabilized around two.

If you're interested in knowing more about the world population predictions,
you can use Gapminder's online resources,
for example [this video on population growh](https://www.gapminder.org/answers/how-did-the-world-population-change/)
and [this one on why it will slow down](https://www.gapminder.org/answers/the-rapid-growth-of-the-world-population-when-will-it-slow-down/).
:::

# Let's apply what we learned!
