---
format: revealjs
title: Using Widgets to Control Selections
title-slide-attributes:
  data-notes: |
    In this slide deck we will learn how to use widgets
    such as dropdowns, radio buttons, and sliders to control
    filtering events in Altair.

    IMPORTANT: The slide deck is currently out of sync with the visuals and narration in the video, as the slides reflect a more recent version of Altair. We plan to re-record the video as soon as possible.
---

```{python}
# | echo: false
%run ../../utils.py
```

## Reading in the movies dataset

```{python}
import altair as alt
import pandas as pd

movies = pd.read_csv("../../data/movies_rating.csv", parse_dates=["Release_Year"])
movies
```

:::{.notes}
To demonstrate how we can use widgets in Altair
we will be using an abbreviated version of the movies dataset
which you can see in this slide.

This data contains how much each movie made, when it was released, its genre, maturity rating, and user ratings on two online sites: IMDB and Rotten Tomatoes.
:::

## Interactive selections can make charts with many categories more effective

```{python}
select_genre = alt.selection_point(fields=['Major_Genre'], bind='legend')

points = alt.Chart(movies).mark_circle().encode(
    alt.X('Rotten_Tomatoes_Rating', title='Rotten Tomatoes rating'),
    alt.Y('IMDB_Rating', title='IMDB rating'),
    alt.Color('Major_Genre', title='Major genre'),
    opacity=alt.condition(select_genre, alt.value(0.7), alt.value(0.05))).properties(height=200)
points.add_selection(select_genre)
```

:::{.notes}
We saw in the previous slide deck
how we could use the `bind` parameter of a selection
to link it to the legend of the plot
and highlight points by clicking on categories in the legend.

Here we create that same type of plot
using the movie data set that we just saw in the last slide.

At first glance,
this chart does not look very effective,
as the many genre categories are mapped to more colours
than we can easily distinguish between.
However, the chart we created is not static!

We used `alt.selection_point` and `alt.condition` to make it  interactive,
so that we can click the legend
to show the points from only a specific genre.
This alleviates the problem of having too many colour encodings
that we cannot distinguish between.
:::

## Binding selections to dropdowns instead of legends

```{python}
genres = sorted(movies['Major_Genre'].unique())
dropdown = alt.binding_select(name='Genre ', options=genres)
select_genre = alt.selection_point(fields=['Major_Genre'], bind=dropdown)

points.add_selection(select_genre).encode(
    opacity=alt.condition(select_genre, alt.value(0.7), alt.value(0.05)))
```

:::{.notes}
Driving our interactions via a dropdown instead of a legend
could be useful if we have too many categories to show in the legend,
or if we wanted to have a different dataframe column
in the dropdown from what we use in the legend.

Here we use the same column for both,
so that you can clearly see how the interaction works.

In this slide,
We create a dropdown selection widget via `alt.binding_select`.
Then, 
instead of binding `alt.selection_point` to the legend
we can pass the dropdown to the `bind` parameter.

The dropdown requires an array to be passed to the options parameter;
here we sort the genres alphabetically before passing them to the dropdown.

Since we recreated the `select_genre` variable,
we need to also redefine the opacity encoding
and add this new variable
to overwrite the old one.

Now you can use the dropdown to select movies of different genres!

Note that the location of the dropdown is fixed
and there is no way change its location.
:::

## Setting the default value in a widget

```{python}
select_genre = alt.selection_point(
    fields=["Major_Genre"], bind=dropdown, value="Comedy"
)

points.add_selection(select_genre).encode(
    opacity=alt.condition(select_genre, alt.value(0.7), alt.value(0.05))
)
```

:::{.notes}
If we don't specify a default value in a widget,
the first value in `select_genre` will be shown in the widget,
but it is not used to select points
until we click the dropdown.

If we wanted to set a specific default value
and immediately use it to highlight the data,
we could specify which column and value to use
via the `value` parameter
as we have done in this slide.

Because we did this,
the chart initially displays only the comedy genre,
instead of all the points.
:::

## Adding multiple widgets to the same charts

```{python}
mpaa_rating = sorted(movies['MPAA_Rating'].unique())
radiobuttons_mpaa = alt.binding_radio(name='MPAA Rating ', options=mpaa_rating)
dropdown_genre = alt.binding_select(name='Genre ', options=genres)
select_genre_and_mpaa = alt.selection_point(
    fields=['Major_Genre', 'MPAA_Rating'],
    bind={'Major_Genre': dropdown_genre, 'MPAA_Rating': radiobuttons_mpaa})

points.add_selection(select_genre_and_mpaa).encode(
    opacity=alt.condition(select_genre_and_mpaa, alt.value(0.7), alt.value(0.05)))
```

:::{.notes}
Sometimes we want to highlight our data based on more than a single criteria.
For example,
we might want to show only comedies that are rated as suitable for children to watch.

We have already seen how to perform such breakdowns via faceting,
but we could also do it by combining multiple interactive widgets.

Here we're adding a set of radio buttons for the maturity rating of the movies
and a dropdown button for the genre selection.

First we create the radio buttons and the dropdown
as two separate widgets.
We then use both these widgets to the `selection_point` object,
so that the dropdown is bound to the `'Major_Genre'` dataframe column
and the radio buttons are bound to `'MPAA_Rating`.

To trigger a selection,
we now need to both click a radio button
**and** make a selection in the dropdown.
:::

## Adding sliders allows us to highlight points based on quantitative value comparisons

```{python}
slider = alt.binding_range(name='Tomatometer ')
select_rating = alt.selection_point(
    fields=['Rotten_Tomatoes_Rating'],
    bind=slider)

points.encode(
    opacity=alt.condition(select_rating, alt.value(0.7), alt.value(0.05))
).add_selection(select_rating)
```

:::{.notes}
So far we have seen how to select categorical values from dropdown menus and radio buttons.
To instead highlight based on quantitative values,
we can use a slider.

Adding a slider is similar to adding a dropdown or set of radio buttons,
and we do it via `binding_range()`.
Here we link the slider to the same column that is mapped to the x-axis,
so that you can see how it works.

If you drag the slider around,
you can see that the default behaviour
is to only highlight points
that exactly match the value of the slider.

Now that we understand how we can create a slider,
let's next see how to  use it in a slightly more realistic setting,
such as highlighting values above or below a threshold.
:::


## Highlighting points smaller or bigger than a slider value

```{python}
points.encode(
    opacity=alt.condition(
        alt.datum.Rotten_Tomatoes_Rating < select_rating.Rotten_Tomatoes_Rating,
        alt.value(0.7), alt.value(0.05))
).add_selection(select_rating)
```

:::{.notes}
Let's say that we want to create a chart
where we highlight values
which are smaller than the value specified by the slider.
To do this
we need to compare the current value of the slider
with the observations' values in the column we are filtering on.

The current value of the slider can be accessed via `select_rating.Rotten_Tomatoes_Rating`,
and Altair has a special `datum` object 
to access values from different columns in the dataframe.
To compare against the column with the Rotten Tomatoes Ratings,
we use `alt.datum.Rotten_Tomatoes_Rating`.

This might seem cumbersome at first,
but it is necessary to avoid ambiguity with only writing `"Rotten_Tomatoes_Rating"`,
which in comparison expressions means just the string 
and is not a reference to a column in the dataframe.

Now that we drag the slider you can see that all the points are highlighted 
that have a value less than the slider value.
:::

## Customizing a slider widget

```{python}
slider = alt.binding_range(name="IMDB rating ", min=1, max=10, step=0.5)
select_rating = alt.selection_point(fields=["IMDB_Rating"], bind=slider, value=4)

points.encode(
    opacity=alt.condition(
        alt.datum.IMDB_Rating < select_rating.IMDB_Rating,
        alt.value(0.7),
        alt.value(0.05),
    )
).add_selection(select_rating)
```

:::{.notes}
By default the range for the slider is from 0 to 100.
This happens to work well for the ratings from Rotten Tomatoes,
but what if we wanted to use it for the IMDB ratings instead?

Since the slider does not automatically adjust to the range of the data,
we need to define the range manually.
Here we set the minimum to be 1 (there is no 0 rating for IMDB),
the maximum to be 10.

We also demonstrate how to change the step size.
Now that we drag the slider handle
it jumps half a step at a time,
instead of the default step size of 1,
which gives us increased precision in which movies we are selecting.

Just as with dropdowns
we could set an explicit start value to have an active selection
when the chart first appears.

Here we have specified the slider to be set at 4
when the chart first loads
via setting `value=4` in `alt.selection_point`.
:::

## It is more useful to bind a slider to a dataframe column not displayed on the chart axes

```{python}
slider = alt.binding_range(name='Worldwide Gross ', max=100_000_000, step=1_000_000)
select_rating = alt.selection_point(fields=['Worldwide_Gross'], bind=slider)

points.encode(
    opacity=alt.condition(
        alt.datum.Worldwide_Gross < select_rating.Worldwide_Gross,
        alt.value(0.7), alt.value(0.05))
).add_selection(select_rating)
```

:::{.notes}
So far we have used the same column for the slider
as we have on the x-axis
to clearly see the effect from changing the slider behavior.

However,
when creating an interactive visualization
it is often the most useful to bind the slider to a dataframe column
that is not already included on one of the axes.

In this slide,
we instead filter on the worldwide gross.
Since the range for this is outside 0 - 100,
we explicitly set the max to a higher value,
and adjust the stepsize to something more meaningful.

Now we can use the slider to filter movies on the amount they grossed.
However,
since we cannot select a range on the slider,
we're limited to selecting 
all movies either bigger than or smaller than the slider value.
:::

## Sliders only work with numerical data

```{python}
slider = alt.binding_range(name='Year')
select_rating = alt.selection_point(fields=['Release_Year'], bind=slider)

points.encode(
    opacity=alt.condition(select_rating, alt.value(0.7), alt.value(0.05))
).add_selection(select_rating)
```

:::{.notes}
In this slide
we try to use the slider widget to highlight
movies based on the year they were produced,
so that we can effectively explore movies from different time periods separately.

However,
as you can see it doesn't work as we expected
and nothing happens when we drag the slider handle back and fourth.
The reason for this is that sliders only work with numerical data
and support for temporal data is not yet implemented.
in Altair.

As an alternative to the slider,
we can use another plot to to select data,
which has several other advantages as you will see in the next slide.
:::


## Driving range selections from another plot is more effective

```{python}
select_year = alt.selection_interval()
bar_slider = (alt.Chart(movies).mark_bar().encode(
    alt.X('Release_Year', title='Release Year'),
    alt.Y('count()'),
    opacity=alt.condition(select_year, alt.value(0.7), alt.value(0.05)))
.properties(height=50).add_selection(select_year))

points.encode(opacity=alt.condition(select_year, alt.value(0.7), alt.value(0.05))) & bar_slider
```

:::{.notes}
With range selection in general,
and especially for temporal data,
it is more effective to use a histogram instead of a slider.
This is because
the histogram gives us information about how many movies
we have data for each year
and it also lets us select a range of years.

We can use what we learned in the last slide deck 
to link the selection between the two plots.
The biggest difference here
is that instead of a single or multi selection,
we will use the `selection_interval` function
to create a range selection.

In this histogram
we can see that there are just a few movies
from the 1980s in the data
and only one in 2040,
which must be an error in the dataset.

In addition to showing the distribution of the data
this also allows us to select a range of values,
which is not possible with sliders in Altair.
We can then drag the selection with the mouse,
just as when we were selecting in the scatter plots
in the first slide deck of this module.

If we wanted to we could also style the histogram chart to look more like a widget,
and remove the incorrect data point,
but we won't do that here.
:::

## Interval selection can also be used to create a "minimap" for chart navigation

```{python}
movies_1995_2010 = movies.loc[movies['Release_Year'].between('1995', '2010')]
base = alt.Chart(movies_1995_2010).mark_area().encode(
    alt.X('Release_Year', title=None),
    alt.Y('mean(Worldwide_Gross)', title='Gross worldwide'))

select_year = alt.selection_interval()
lower = base.properties(height=50).add_selection(select_year)
upper = base.encode(alt.X('Release_Year', title=None, scale=alt.Scale(domain=select_year))).properties(height=200)
upper & lower
```

:::{.notes}
Particularly when visualizing data over long time periods,
it can be useful to both have and overview of the data
and be able to zoom in
on specific event.

One way to achieve this is with the `interactive` method
we used earlier.
However,
we could also use the approach with an additional chart as in the previous slide
to create a so called "minimap" for navigation of another chart.

The key to making this interaction work
is to let the interval selection control the axis extent (the domain)
of the main chart,
while only adding it as a selection on the "minimap" chart.

The syntax for this is consistent with what we have learned earlier,
but instead of having a condition that checks
if an observation falls within the selection,
we're directly using the range of the selection to set the domain
in the main chart.
:::

# Let's apply what we learned