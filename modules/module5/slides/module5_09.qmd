---
format: revealjs
title: Effective use of colour for quantitative data
title-slide-attributes:
  data-notes: |
   This slide deck describes how to choose colour to accurately represent numerical data.
---

```{python}
#  | echo: false
%run ../../utils.py
```

## Repetition of hue, lightness, and saturation

![](../../../static/module5/hsl-questions.png){fig-alt="Hsl questions" fig-align="center" width="60%"}

::: {.notes}
In the last slide deck, we varied hues to represent categorical values,
with a focus on the distinction between colour hues/categories.
When choosing a colour scheme to represent quantitative data,
we will instead focus on sequential, perceptually uniform changes in lightness.

Sequential changes in lightness ensures that uniform changes in the values of the data
are perceived as uniform changes in the colour space.
In other words,
we want it to be intuitive 
how the colours relate to the numerical values they represent,
so that we can accurately understand how the data values vary
when looking at the changing colours.
:::

## Lightness is more effective than hue to communicate changes in quantitative data

<iframe src="../../../static/module5/charts/lightness-vs-hues.html" width="100%" height="420px" style="border:none;"></iframe>

::: {.notes}
In the plots on this slide,
we have encoded the same variable (Horsepower) to be represented by both the x-axis and the colour.
This is rarely done in practice,
but it is useful to contrast and understand colour schemes
because we know that the colours of the points should change in a perceptually uniform manner
as we move from left to right along the x-axis.

In the leftmost plot in this slide, we used the default categorical colour scheme.
As you can see this is not at all well suited to represent numerical data
as the sharp transitions between hues makes it appear as if there are groups in the data,
whereas we know that these values are changing gradually from left to right on the x-axis.

In the plot to the right,
we have used the default sequential colour scheme for quantitative data in Altair.
This conveys the gradual change in the Horsepower values in a perceptually uniform manner.
We can clearly see that colour is changing gradually from light to dark along the x-axis,
although it can be hard to pinpoint exactly which number a particular colour is
(remember that colour is not as good as position to convey an exact value
even when it is easy to see the overall trend).
:::

## Combining lightness variation with a slight variation in hue highlights detail in the data

<iframe src="../../../static/module5/charts/lightness-and-hues.html" width="100%" height="420px" style="border:none;"></iframe>

::: {.notes}
The leftmost plot here uses the same default colour scheme as in the previous slide.

The plot on the right has a colour scheme that adds a slight variation in hue
while keeping the perceptually uniform variation in lightness.

The reason for this is to highlight small variations in the data
when this is of great importance. 
We can see the effect of this by studying the values in the 60-80 range in both plots.
It is hard to see the differences between these in the leftmost plot,
but thanks to the hue transition from yellow to green in the rightmost plot
we can more clearly perceive detail in this range.

Although the hue shifts in these plots are more gradual
than in the plot with the categorical colour scheme in the previous slide,
it may still introduce a slight bias towards seeing groupings where there are none,
which is something to keep in mind.

In practice,
both of these colour schemes are used often to represent quantitative data.
:::

## High values should have the most contrast to the background

```{python}
# | include: false
from vega_datasets import data

cars = data.cars()
```
```{python}
cars = data.cars()
alt.Chart(cars).mark_circle(size=50).encode(
    alt.X('Horsepower', title='Engine power (hp)'),
    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),
    color=alt.Color('Horsepower', title='Engine power (hp)',
                    scale=alt.Scale(scheme='viridis', reverse=True)))
```

::: {.notes}
To decide whether the highest or lowest values
should be at the lightest or darkest end of a sequential colour scheme,
it is advisable to set it so that the most important values
has the most contrast to the background.

Often there is no difference in importance between high and low values;
then the convention is to set the highest values
to have the most contrast with the background,
which is the case for most Altair colour schemes by default.

However,
for the "viridis" colour scheme that we are using here,
goes from dark to light by default
so we need to pass `reverse=True` to `alt.Scale`
(this technique could be used to reverse any scale in Altair,
including the value along one of the axes).

The Viridis colour scheme was designed by the developers of matplotlib (another Python plotting package).
In addition to the colour schemes linked in the previous slide deck,
more details and examples are available in the [matplotlib documentation],
and many of the core design principles are outlined in [this entertaining talk],
including the design choice behind Viridis.

Note that we are using filled circular marks
and the `size` parameter to enlarge the points slightly
and make it easier to see the changes in colour
that we will be discussing in this slide deck.

[matplotlib documentation]: http://matplotlib.org/users/colormaps.html
[this entertaining talk]: https://www.youtube.com/watch?v=xAoljeRJ3lU
:::

## Some colour schemes are designed specifically for people with colour vision deficiencies

```{python}
alt.Chart(cars).mark_circle(size=50).encode(
    alt.X('Horsepower', title='Engine power (hp)'),
    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),
    color=alt.Color('Horsepower', title='Engine power (hp)',
                    scale=alt.Scale(scheme='cividis', reverse=True)))
```

::: {.notes}
Both viridis, the default blue colour scheme,
and most of the quantitative colour schemes available in Altair
are well perceived by people with colour vision deficiencies 
since the data variation is mostly represented as variation in lightness.

However,
there are also some colour schemes that are designed to look almost exactly the same
for people with the most common colour vision deficiencies
also when it comes to the hue variation.

`'cividis'` is one of these colour schemes and you can see how it looks in this plot.

Nearly 10% of the population is colour vision deficient;
red-green colour blindness, in particular, affects 8% of men and 0.5% of women.
Guidelines for making your visualizations more accessible to those with reduced colour vision,
will in many cases also improve the interpretability of your graphs
for people who have standard colour vision.

Fortunately,
many of these are followed by the default settings in Altair,
and we don't need to change the colour scheme for this reason.

If you are unsure how your plot will look for someone who sees colours differently than you,
[this website lets you upload an image and simulate different colour vision deficiencies](https://www.color-blindness.com/coblis-color-blindness-simulator/).
:::

## Additional hue variation brings out further detail but distorts the perceptual uniformity

```{python}
alt.Chart(cars).mark_circle(size=50).encode(
    alt.X('Horsepower', title='Engine power (hp)'),
    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),
    color=alt.Color('Horsepower', title='Engine power (hp)',
                    scale=alt.Scale(scheme='turbo')))
```

::: {.notes}
If minor variation in the data is of uttermost importance,
it is possible to use sequential colour schemes with additional hues.

In this plot,
we use a modern rainbow colour scheme to highlight small changes in the Horsepower variable.
While both the previous colour schemes were gradually increasing in lightness,
this is not the case for this rainbow map.

Here the lightest colours are in the middle and the darkest at both extremes of the colour schemes.
This is particularly negative for people with colour vision deficiencies,
which can no longer rely on the gradual lightness change
and the varying hues, therefore, makes this plot less accessible.

In addition to losing the overall intuitiveness of the colour scheme,
the many hues mean that we’re likely
to perceive changes in the colour in a non-uniform manner,
and see groups where they are none.

Importantly,
the rainbow map we have used here is a modern colour scheme called “turbo”,
which was recently developed by Google.
Most rainbow colour schemes you will see on plots in the wild use a colour scheme called “jet”,
which used to be the default in many plotting packages
but is not a good choice for any data,
because it introduces artificial banding and highlighting of values.

The take-home message here is that there are valid use cases for modern rainbow maps,
but you should be confident that there is no better alternative before reaching for this tool,
and be careful when interpreting rainbow-coloured plots in general.

The jet rainbow colourmap should be avoided for many reasons,
including that the sharp transitions between colours introduce a visual threshold
that do not represent the underlying continuous data.
Another issue is luminance (brightness).
For example,
your eye is drawn to the yellow and cyan regions,
because the luminance is higher.
This can have the unfortunate effect of highlighting features in your data
that don't exist,
misleading your viewers!
Since higher values are not always lighter,
this means that your graph is not going to translate well to greyscale.
More details about jet can be found in [this blog post] and [this series of posts].
A better alternative when you really need small differences in your data to stand out
is to use the [turbo rainbow colour scheme](https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html).

[this blog post]: https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/
[this series of posts]: https://mycarta.wordpress.com/2012/05/12/the-rainbow-is-dead-long-live-the-rainbow-part-1/
:::

## Colour is most effectively used to represent a separate dataframe column

```{python}
alt.Chart(cars).mark_circle(size=50).encode(
    alt.X('Horsepower', title='Engine power (hp)'),
    alt.Y('Miles_per_Gallon', title='Mileage (miles/gallon)'),
    color=alt.Color('Weight_in_lbs', title='Weight (lbs)'))
```

:::{.notes}
In the previous slides, we encoded the same dataframe column
in both the `x` and `color` channel
so that it was easy for us
to directly compare the colours to the points position on the x-axis.

However,
this is rarely done in practice,
where it is often more effective to encode a separate dataframe column
as the colour of the points.

In this slide
we have encoded the weight of the cars as the colour.
As we talked about in a previous module,
it is difficult to see exactly which value a colour represents,
but we can effectively communicate roughly how heavy the cars are
as well as clearly highlight trends in the data.

In this plot, the trend is that the points get gradually darker
the further towards the bottom right corner they lie.
This means that heavier cars
are the ones with more powerful engines
and poorer gas mileage.
:::

## Diverging colour schemes are suitable for plots with a natural midpoint

![](../../../static/module5/color-schemes-lightness.png){fig-alt="Color schemes lightness" fig-align="center" width="70%"}

:::{.notes}
In this slide,
you see the lightness variation among all the colour schemes we have covered.
Categorical colours are discretely separated,
perceptually uniform colour schemes vary lightness linearly throughout the range,
whereas rainbow maps
peak lightness in the middle and have dark colours at the extremes.

The colour scheme to the far right is called a diverging colour scheme,
which are useful when there is a natural midpoint in the data
as we will see next.

There is also one other type of colour scheme,
cyclical,
which starts and ends in both the same lightness and hue.
This design is useful for values with natural cycles
such as degrees of an angle of the month of the year,
where the end and beginning are close to each other.
:::

## Temperature data can be represented with a sequential colour scheme

```{python}
import pandas as pd

toronto_temp = pd.read_csv(
    "../../data/weatherstats_toronto_daily.csv", parse_dates=["date"]
)[["date", "avg_temperature"]]
alt.Chart(toronto_temp).mark_circle(size=50).encode(
    alt.X("date", title=None),
    alt.Y("avg_temperature", title="Average temperature (°C)"),
    color=alt.Color("avg_temperature", title="Average temperature (°C)"),
)
```

:::{.notes}
Examples of data that is effectively represented by diverging colour schemes 
include temperature, correlations, and differences,
where zero often can be a natural midpoint.

Here we are plotting data from the last few years
of the average daily temperature (C) in Toronto, Canada
[downloaded from weatherstats.ca](https://toronto.weatherstats.ca/download.html).

As you can see,
a sequential colour scheme can be used to visualize this data,
but it does not get a good sense
for when the temperature was negative
and when it was positive.
:::

## A diverging colour scheme effectively highlights values at the extreme temperatures

```{python}
alt.Chart(toronto_temp).mark_circle(size=50).encode(
    alt.X('date', title=None),
    alt.Y('avg_temperature', title='Average temperature (°C)'),
    color=alt.Color('avg_temperature',
                    title='Average temperature (°C)',
                    scale=alt.Scale(scheme='blueorange', domainMid=0)))
```

:::{.notes}
When using a diverging colours scheme as in this slide,
it is clear which days had the extreme negative 
and the extreme positive temperatures.

This is because diverging colour schemes vary in lightness
from dark at the extremes to light in the middle,
and use different hues for values on each side of the midpoint.

By default, the midpoint would be set in the middle of the max and min values in our data
(so around +5 here).
Since 0 is a natural midpoint,
we specify this manually.

The default diverging colour scheme uses orange and blue hues,
but there are many other effective combinations.
You should avoid using green and red,
because these are practically impossible to tell apart
for people with the most common types of colour vision deficiencies.
:::

## An explicit domain can be defined to adjust colours at the extremes

```{python}
alt.Chart(toronto_temp).mark_circle(size=50).encode(
    alt.X('date', title=None),
    alt.Y('avg_temperature', title='Average temperature (°C)'),
    color=alt.Color('avg_temperature',
                    title='Average temperature (°C)',
                    scale=alt.Scale(scheme='blueorange', domain=[-30, 30])))
```

:::{.notes}
When setting the midpoint of the diverging colour scheme,
the extremes data values on either side are given the darkest lightness values.

This means that the positive side of the scale is longer,
and only points 30 degrees away from the midpoint
are coloured in the darkest orange colour,

On the other hand,
for the negative values, it is sufficient
to be only 20 degrees away from the midpoint
to be colour in the darkest blue colour.

This colouring strategy is often effective,
but it is also possible for us to set the explicit domain
over which the colours are defined,
so that points as many steps on either side of the midpoint
are assigned the same lightness values.

For temperature data,
either approach is fine and it depends on what we want to highlight.

For correlation data,
which can never be over 1 or under -1,
it would more often than not be sensible
to set these limits as the domain values.

[If you are interested in reading more about how colour choices determines what we see,
this is an educational article](https://eos.org/features/visualizing-science-how-color-determines-what-we-see).
:::

# Let's apply what we learned!
