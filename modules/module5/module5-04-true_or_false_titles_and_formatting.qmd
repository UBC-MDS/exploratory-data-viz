---
format:
  live-html
resources:
  - ../utils.py
  - ./../../static/
  - ../data
---

<script src='../../src/quiz.js'></script> 

# 2.1. Exercises

## True or False: Titles and Formatting (T/F)?

<div id='mcq1'></div> 
<script>
    generateQuiz(
        'mcq1',
        'True or False',
        'All plots should have a subtitle that adds additional details.',
        {
        'True': 'Often it’s not necessary to have a subtitle but they can help support the communication of the plot’s insights.',
        'False': ''
        },
        'False',
    );
</script>

<div id='mcq2'></div> 
<script>
    generateQuiz(
        'mcq2',
        'True or False',
        'Using Altair, we can split up a title or subtitle by adding "\\n" to indicate a line break',
        {
        'True': 'This does work in other plotting tools, but in Altair, we separate our title and subtitle lines but putting strings as elements in a list. Each element in the list is indicative of a new line.',
        'False': ''
        },
        'False',
    );
</script>

<div id='mcq3'></div> 
<script>
    generateQuiz(
        'mcq3',
        'True or False',
        'Not all axes and legends need to have a title.',
        {
        'True': '',
        'False': 'For axes such as time and some categorical labels, it’s redundant to have labels.'
        },
        'True',
    );
</script>


## Mutliple Choices for Titles and Labels

<div id='mcq4'></div> 
<script>
    generateQuiz(
        'mcq4',
        'Question 1',
        'When aligning your titles, which argument would you use in <code>.TitleParams()</code>?',
        {
        '<code>alignment</code>': 'I think your argument should be called something else.',
        '<code>position</code>': 'I think your argument should be called something else.',
        '<code>align</code>': 'I think your argument should be called something else.',
        '<code>anchor</code>': ''
        },
        '<code>anchor</code>',
    );
</script>

<div id='mcq5'></div> 
<script>
    generateQuiz(
        'mcq5',
        'Question 2',
        'To display the full number in the axis tick values instead of scientific notation, we can set <code>format()</code> in <code>.Axis()</code> to which of the following?',
        {
        '<code>full</code>': 'Not quite. Maybe take a look at slide 11.',
        '<code>s</code>': '',
        '<code>SI-units</code>': 'Although this is the correct name, it’s not the value we assign to the format argument',
        '<code>SI</code>': 'Close but not quite here.'
        },
        '<code>s</code>',
    );
</script>

<div id='mcq6'></div> 
<script>
    generateQuiz(
        'mcq6',
        'Question 3',
        'Which title is most appropriate for the plot below',
        {
        'NHL hockey player nationality': 'This isn’t explaining any insights from the plot.',
        'birth_country vs frequency in NHL': 'Referencing the column names isn’t explaining any insights from the plot.',
        'Majority of NHL hockey players originate from Canada': '',
        'Hockey Players in the NLH originate from all around the world': 'This is not exactly what we are trying to communicate with the plot we see above. We would more likely want to title it commenting on the large number of players originating from Canada.'
        },
        'Majority of NHL hockey players originate from Canada',
    );
</script>

![](../../static/module5/hockey3.svg)


## Formatting Fun! 

**Instructions:**    
Be patient when running a coding exercise for the first time, it can take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run the code to see if you obtain the desired output
and submit it to validate if you were correct.**


The [penguins](https://www.kaggle.com/parulpandey/palmer-archipelago-antarctica-penguin-data) that we see time and time again is going to help us practice with formatting in this question.

```{pyodide}
import altair as alt
import pandas as pd

penguins_df = pd.read_csv('data/penguins.csv')
penguins_df.info()
```


For this question let's create a stacked histogram of the values in the `culmen_depth_mm` column for different penguin species.

Remember in the previous module we discussed that the culmen is also sometimes referred to as the bill and is [upper ridge of a bird's beak](https://allisonhorst.github.io/palmerpenguins/articles/articles/art.html). 
Here is the diagram we showed you in an earlier module that was made by [Allison Horst](https://twitter.com/allison_horst).

![](../../static/module3/penguin_culmen.jpg){fig-alt="Penguin Culmen" fig-align="center" width="40%"}

**Tasks:**

Fill in the blanks in the code below so that the following gets accomplished:

- In a plot named `base`, use the data source `penguins_df` to make a histogram of the different quantities of penguin species in the data. 
- Map the species on the y-axis and the count on the x-axis. 
- In the base plot make sure to give a label to the x-axis. Since the species is categorical, do not set a label for the y-axis.
- Display the base plot and take a look at what it's communicating.
- Create text by using `mark_text()` and save this in an object named `text`. It should have the same x and y mapping as the base plot but this time you want to make sure the count is displayed on the side of each species bar. Make sure it's centered in alignment and located at `dx=10`.
- After observing the plot create and object named `penguin_title` using `.TitleParams()`. In this method, you will need to specify an insightful title, and subtitle, give the title a fontsize of 18, and set the subtitle colour to `firebrick`.
- Remove the grey box outlining the entire figure by setting the argument `strokeWidth` in the `.configure_view()` method.


```{pyodide}
#| setup: true
#| exercise: formatting_fun
import altair as alt
import pandas as pd
from utils import assert_chart_equal

penguins_df = pd.read_csv('data/penguins.csv')
```

```{pyodide}
#| exercise: formatting_fun
# The base plot 
base = alt.Chart(penguins_df).mark_bar().encode(
    alt.Y('species', title=None),
    alt.X('count()', title='Number of penguins'))
base

# Create added text 
text = alt.Chart(____).____(____, ____).encode(
alt.____('species'),
alt.____('count()'),
alt.____(____))

# Set up the title and subtitle formatting
penguin_title = alt.____(
    ____,
    ____,
    ____,
    subtitleColor=____)

formatted_plot = (base + text).configure_view(____=0
).properties(height=200, width=300, title=penguin_title)

formatted_plot
```

```{pyodide}
#| exercise: formatting_fun
#| check: true

base = alt.Chart(penguins_df).mark_bar().encode(
    alt.Y('species', title=None),
    alt.X('count()', title='Number of penguins'))

text = alt.Chart(penguins_df).mark_text(align='center', dx=10).encode(
    alt.Y('species'),
    alt.X('count()'),
    alt.Text('count()'))

penguin_title = alt.TitleParams(
    "Adelie Penguins species most abundant in the Antarctic",
     subtitle = "The Chinstrap species appears to have the lowest penguin population.",
     fontSize=18,
     subtitleColor='firebrick')

solution = (base + text).configure_view(strokeWidth=0
).properties(height=200, width=300, title=penguin_title)

solution = solution.properties(title='')
result = result.properties(title='')

assert_chart_equal(solution, result)
```

:::: { .hint exercise="formatting_fun"}
::: { .callout-note collapse="false"}

## Hint 1

- In the text plot, are you coding `.mark_text(align='center', dx=10)`?
- In the text plot, are you specifying `alt.Text('count()'`?
- for the titles formatting are you making sure to use the arguments `subtitle`, `fontSize` and `subtitleColor`?

:::
::::

:::: { .solution exercise="formatting_fun" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# The base plot 
base = alt.Chart(penguins_df).mark_bar().encode(
    alt.Y('species', title=None),
    alt.X('count()', title='Number of penguins'))
base

# Create added text 
text = alt.Chart(penguins_df).mark_text(align='center', dx=10).encode(
    alt.Y('species'),
    alt.X('count()'),
    alt.Text('count()'))

# Set up the title and subtitle formatting
penguin_title = alt.TitleParams(
    "Adelie Penguins species most abundant in the Antarctic",
     subtitle = "The Chinstrap species appears to have the lowest penguin population.",
     fontSize=18,
     subtitleColor='firebrick')

formatted_plot = (base + text).configure_view(strokeWidth=0
).properties(height=200, width=300, title=penguin_title)

formatted_plot
```

:::
::::

The base plot of the code above looks like this:

![](../../static/module5/base_plot.svg)

<div id='mcq7'></div> 
<script>
    generateQuiz(
        'mcq7',
        'Question',
        'Which question can you now answer confidently using the formatted plot above, that you could not before with just the base plot?',
        {
        'Which penguin species is most prominent in the Arctic based on the data collected?': 'We could answer this question using the base plot since the position channel informed us of this. Comparing categories with the bars was still possible.',
        'How many Gentoo Penguins were observed in the data?': 'This would have been much harder to answer with our base plot only.',
        'Which island has the most diverse penguin population?': 'Neither plot shows any information regarding the <code>island</code> column.',
        },
        'How many Gentoo Penguins were observed in the data?',
    );
</script>